<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0" xml:base="../../" xml:id="kie.ReleaseNotesKIE.6.0.0"
  xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
  xmlns="http://docbook.org/ns/docbook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xlink="http://www.w3.org/1999/xlink"
  xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:ns="http://docbook.org/ns/docbook">
  <title>New and Noteworthy in KIE API 6.0.0</title>
  <section>
    <title>New KIE name</title>
    <para>KIE is the new umbrella name used to group together our related projects; as the family continues to grow. KIE is also used for the 
      generic parts of unified API; such as build and loading. This replaces the droolsjbpm and knowledge keywords that would have been used before. </para>
    <figure>
      <title>KIE Anatomy</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="images/kie/Overview/kie.png"/>
        </imageobject>
      </mediaobject>
    </figure>    
  </section>
  <section>
    <title>Maven aligned projects and modules and Maven Deployment</title>
    <para>One of the biggest complaints during the 5.x series was the lack of defined methodolgy for deployment. The
      mechanism used by Drools and jBPM was very flexible, but it was too flexible. A big focus for 6.0 was streamling
      the build, deploy and loading(utilization) aspects of the system. Building and deploying now align with Maven and
      the utilization is now convention and configuration oriented, instead of programmatic, with sane default to
      minimise the configuration.</para>
  </section>
  <section>
    <title>Configuration and convention based projects</title>
    <para>xxxx</para>
  </section>

  <section>
    <title>KieBase Inclusion</title>

    <para>It is possible to include all the Kie artifacts belonging to a KieBase into a second KieBase.
    This means that the second KieBase beyond all the rules, function and processes directly defined
    into it will also contain the ones created in the included KieBase. This inclusion can be
    done both declaratively in the kmodule.xml file</para>

    <example>
      <title>Including a KieBase into another declaratively</title>

      <programlisting language="xml">&lt;kmodule xmlns="http://jboss.org/kie/6.0.0/kmodule"&gt;
  &lt;kbase name="kbase2" includes="kbase1"&gt;
    &lt;ksession name="ksession2"/&gt;
  &lt;/kbase&gt;
&lt;/kmodule&gt;</programlisting>
    </example>

    <para>or programmatically using the <code>KieModuleModel</code>.</para>

    <example>
      <title>Including a KieBase into another programmatically</title>

      <programlisting language="java">KieModuleModel kmodule = KieServices.Factory.get().newKieModuleModel();
KieBaseModel kieBaseModel1 = kmodule.newKieBaseModel("KBase2").addInclude("KBase1");</programlisting>
    </example>
  </section>

  <section>
    <title>KieScanner</title>

    <para>The <code>KieScanner</code> is a maven-oriented replacement of the KnowledgeAgent
    present in Drools 5. In fact it allows to continously monitoring your maven repository
    to check if a new release of a Kie project has been installed and if so deploying it in
    the <code>KieContainer</code> wrapping that project. The use of the <code>KieScanner</code>
    requires kie-ci.jar to be on the classpath.</para>

    <para>In more detail a <code>KieScanner</code> can be registered on a <code>KieContainer</code>
    as in the following example.</para>

    <example>
      <title>Registering and starting a KieScanner on a KieContainer</title>

      <programlisting language="java">KieServices kieServices = KieServices.Factory.get();
ReleaseId releaseId = kieServices.newReleaseId( "org.acme", "myartifact", "1.0-SNAPSHOT" );
KieContainer kContainer = kieServices.newKieContainer( releaseId );
KieScanner kScanner = kieServices.newKieScanner( kContainer );

// Start the KieScanner polling the maven repository every 10 seconds
kScanner.start( 10000L );</programlisting>
    </example>

    <para>In this example the <code>KieScanner</code> is configured to run with a fixed
    time interval, but it is also possible to run it on demand by invoking the
    <code>scanNow()</code> method on it. If the <code>KieScanner</code> finds in the
    maven repository an updated version of the Kie project used by that <code>KieContainer</code>
    it automatically downloads the new version and triggers an incremental build of the new
    project. From this moment all the new <code>KieBase</code>s and <code>KieSession</code>s
    created from that <code>KieContainer</code> will use the new project version.</para>
  </section>

  <section>
    <title>Hierarchical ClassLoader</title>
    <para>The CompositeClassLoader is no longer used; as it was a constant source of performance problems and bugs.
      Traditional hierarchical classloaders are now used. The root classloader is at the KieContext level, there is then
      one child ClassLoader per namespace. This makes it cleaner to add and remove rules, but there can now be no
      referencing betwen namespaces in DRL files; i.e. functions can only be used by the namespaces that declared them.
      The recommendation is to use static java methods in your project, which is visible to all namespaces; but those
      cannot  (like other classes on the root KieContainer ClassLoader). be dynamiccally updated.</para>
  </section>
  <section>
    <title>KIE Documentation</title>
    <para> While a lot of new documentation has been added for working with the new KIE api, the entire documentation
      has not yet been brought up to date. For this reason there will be continued references to old terminologies.
      Apologies in adanced, and thank you for your patience. We hope those in the community will work with us to get the
      documentation updated throughout, for 6.1</para>
  </section>
</section>
