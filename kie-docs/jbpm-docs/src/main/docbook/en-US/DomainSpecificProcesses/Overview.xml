<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xmlns="http://docbook.org/ns/docbook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:ns="http://docbook.org/ns/docbook">
  <title>Overview</title>
    
<para>Before moving on to an example, this section explains what custom work items and custom 
work item handlers are.</para> 

  <section id="sec.workitemdefinition.overview">
    <title id="sec.workitemdefinition.overview.title">Work Item Definitions</title>

<para>In short, we use the term <emphasis>custom work item</emphasis> when we're describing a node 
in your process that represents a domain-specific task and as such, contains extra properties and 
is handled by a <code>WorkItemHandler</code> implementation.</para>

<para>Because it's a domain-specific <emphasis>task</emphasis>, that means that a <emphasis>custom 
work item</emphasis> is equivalent to a <code>&lt;task&gt;</code> or <code>&lt;task&gt;</code>-type 
node in BPMN2. However, a <emphasis><code>WorkItem</code></emphasis> is also Java class instance 
that's used when a <code>WorkItemHandler</code> instance is called to complete the task or work 
item.</para>

<para>Depending on the BPMN2 editor you're using, you can create a custom work item definition in 
one of two ways: 
  <itemizedlist>
    <listitem>If you're using <emphasis>Designer</emphasis>, then this means creating a MVEL based 
    definition and adding the definition in Designer itself. A description of this can be
    found in the <link linkend='sec.designer.workitems' endterm="sec.designer.workitems.title"/> 
    section in the <link linkend='ch.designer' endterm="ch.designer.title"/> chapter. Once this is
    done, a new service node will appear on the BPMN 2.0 palette.</listitem>
    <listitem>If you're using the <emphasis>Eclipse BPMN 2.0 modeler plugin</emphasis> (which can 
    be found <ulink url="http://eclipse.org/bpmn2-modeler/">here</ulink>), then you'll can modify 
    the BPMN2 <code>&lt;task&gt;</code> or <code>&lt;task&gt;</code>-type element to work with 
    <code>WorkItemHandler</code> implementations. See the <link linkend='sec.eclipse.task-nodes' 
    endterm="sec.eclipse.task-nodes.title"/> section in the <link linkend='ch.eclipse-bpmn-plugin' 
    endterm="ch.eclipse-bpmn-plugin.title"/> chapter.</listitem>
  </itemizedlist>
</para>

  </section>

  <section id="sec.workitemhandler.overview" >
    <title id="sec.workitemhandler.overview.title" >Work Item Handlers</title>

<para>A <emphasis>work item handler</emphasis> is a Java class used to execute (or abort) work 
items. That also means that the class implements the <code>org.kie.runtime.instance.WorkItemHandler</code> 
interface. While jBPM provides some custom <code>WorkItemHandler</code> instances (listed below), 
a Java developer with a minimal knowledge of jBPM can easily create a new work item handler class 
with its own custom business logic.</para>

<para>Among others, jBPM offers the following <code>WorkItemHandler</code> implementations:
  <itemizedlist>
    <listitem>In the <filename>jbpm-bpmn2</filename> module, <code>org.jbpm.bpmn2.handler</code> 
    package:<itemizedlist>
      <listitem>ReceiveTaskHandler (for use with BPMN element <code>&lt;receiveTask&gt;</code>)</listitem>
      <listitem>SendTaskHandler (for use with BPMN element <code>&lt;sendTask&gt;</code>)</listitem>
      <listitem>ServiceTaskHandler (for use with BPMN element <code>&lt;serviceTask&gt;</code>)</listitem>
    </itemizedlist></listitem>
    <listitem>In the <filename>jbpm-workitems</filename> module, in various packages under
    the <code>org.jbpm.process.workitem</code> package:<itemizedlist>
      <listitem>ArchiveWorkItemHandler</listitem>
    </itemizedlist></listitem>
  </itemizedlist>

There are a many more <code>WorkItemHandler</code> implementations present in the
<filename>jbpm-workitems</filename> module. If you're looking for specific integration logic with
Twitter, for example, we recommend you take a look at the classes made available there.</para>

<para>In general, a <code>WorkItemHandler</code>'s <code>.executeWorkItem(...)</code> and
<code>.abortWorkItem(...)</code> methods will do the following:
  <orderedlist>
    <listitem>Extract information about the task being executed (or aborted) from the
    <code>WorkItem</code> instance</listitem>
    <listitem>Execute the necessary business logic. This might be mean interacting with a web
    service, database, or other technical component.</listitem>
    <listitem>Inform the process engine that the work item has been completed (or aborted) by
    calling one of the following two methods on the <code>WorkItemManager</code> instance passed 
    to the method:
    </listitem>
  </orderedlist>
</para>

<programlisting language="java">WorkItemManager.completeWorkItem(long workItemId, Map&lt;String, Object&gt; results)
WorkItemManager.abortWorkItem(long workItemId)
</programlisting>

<para>In order to make sure that your custom work item handler is used for a particular process
instance, it's necessary to register the work item handler before starting the process. This makes
the engine aware of your <code>WorkItemHandler</code> so that the engine can use it for the proper
node. For example:</para> 

<programlisting language="java">ksession.getWorkItemManager().registerWorkItemHandler("Notification",
    new NotificationWorkItemHandler());
</programlisting>

<para>The <code>ksession</code> variable above is a <code>StatefulKnowledgeSession</code> (and also 
a <code>KieSession</code>) instance. The example code above comes from the example that we will go 
through in the next session.</para>

  <tip>
<para>You can use different work item handlers for the same process depending on the
system on which it runs: by registering different work item handlers on different systems, you can
customize how a custom work item is processed on a particular system. You can also substitute mock
<code>WorkItemHandler</code> instances when testing.</para>  
  </tip>

  </section>

</section>
