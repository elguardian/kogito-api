<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0" 
  xml:base="../../" 
  xml:id="drools.ReleaseNotesDrools.6.2.0" 
  xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd" 
  xmlns="http://docbook.org/ns/docbook" 
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
  xmlns:xs="http://www.w3.org/2001/XMLSchema" 
  xmlns:xlink="http://www.w3.org/1999/xlink" 
  xmlns:xi="http://www.w3.org/2001/XInclude" 
  xmlns:ns="http://docbook.org/ns/docbook">

  <title>What is New and Noteworthy in Drools 6.2.0</title>
      
  <section>
    <title>Propagation modes</title>

    <para>The introduction of PHREAK as default algorithm for the Drools engine made the rules' evaluation
    lazy. This new Drools lazy behavior allowed a relevant performance boost but, in some very specific cases,
    breaks the semantic of a few Drools features.</para>

    <para>More precisely in some circumstances it is necessary to propagate the insertion of new fact into th
    session immediately. For instance Drools allows a query to be executed in pull only (or passive) mode by
    prepending a '?' symbol to its invocation as in the following example:</para>

    <example>
      <title>A passive query</title>

      <programlisting language="java">query Q (Integer i)
    String( this == i.toString() )
end
rule R when
    $i : Integer()
    ?Q( $i; )
then
    System.out.println( $i );
end</programlisting>
    </example>

    <para>In this case, since the query is passive, it shouldn't react to the insertion of a String
    matching the join condition in the query itself. In other words this sequence of commands</para>

    <programlisting language="java">KieSession ksession = ...
ksession.insert(1);
ksession.insert("1");
ksession.fireAllRules();</programlisting>

    <para>shouldn't cause the rule R to fire because the String satisfying the query condition has
    been inserted after the Integer and the passive query shouldn't react to this insertion.
    Conversely the rule should fire if the insertion sequence is inverted because the insertion
    of the Integer, when the passive query can be satisfied by the presence of an already existing
    String, will trigger it.</para>

    <para>Unfortunately the lazy nature of PHREAK doesn't allow the engine to make any
    distinction regarding the insertion sequence of the two facts, so the rule will fire
    in both cases. In circumstances like this it is necessary to evaluate the rule eagerly as
    done by the old RETEOO-based engine.</para>

    <para>In other cases it is required that the propagation is eager, meaning that it is not immedate,
    but anyway has to happen before the engine/agenda starts scheduled evaluations. For instance this
    is necessary when a rule has the no-loop or the lock-on-active attribute and in fact when this
    happens this propagation mode is automatically enforced by the engine.</para>

    <para>To cover these use cases, and in all other situations where an immediate or eager rule
    evaluation is required, it is possible to declaratively specify so by annotating the rule
    itself with <emphasis role="bold">@Propagation(Propagation.Type)</emphasis>, where
    Propagation.Type is an enumeration with 3 possible values:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis role="bold">IMMEDIATE</emphasis> means that the propagation is performed immediately.</para>
      </listitem>
      <listitem>
        <para><emphasis role="bold">EAGER</emphasis> means that the propagation is performed lazily but
        eagerly evaluated before scheduled evaluations.</para>
      </listitem>
      <listitem>
        <para><emphasis role="bold">LAZY</emphasis> means that the propagation is totally lazy and this is
        default PHREAK behaviour</para>
      </listitem>
    </itemizedlist>

    <para>This means that the following drl:</para>

    <example>
      <title>A data-driven rule using a passive query</title>

      <programlisting language="java">query Q (Integer i)
    String( this == i.toString() )
end
rule R @Propagation(IMMEDIATE) when
    $i : Integer()
    ?Q( $i; )
then
    System.out.println( $i );
end</programlisting>
    </example>

    <para>will make the rule R to fire if and only if the Integer is inserted after the String, thus
    behaving in accordance with the semantic of the passive query.</para>
  </section>
  
</section>



