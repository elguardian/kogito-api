<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0" xml:base="./../../" xml:id="KIEDeployingSection"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Deploying</title>

  <!--section>
    <title>KieRepository</title>
    <para>xxx</para>
  </section-->
  
  <section>
    <title>KieBase</title>
    <para>The <code>KieBase</code> is a repository of all the application's knowledge definitions. It will contain
      rules, processes, functions, and type models. The <code>KieBase</code> itself does not contain data; instead,
      sessions are created from the <code>KieBase</code> into which data can be inserted and from which process
      instances may be started. The <code>KieBase</code> can be obtained from the <code>KieContainer</code> containing
      the <code>KieModule</code> where the <code>KieBase</code> has been defined.</para>
    <figure>
      <title>KieBase</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="images/kie/BuildDeployUtilizeAndRun/KieBase.png"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>Sometimes, for instance in a OSGi environment, the <code>KieBase</code> needs to resolve types that are not in
      the default class loader. In this case it will be necessary to create a <code>KieBaseConfiguration</code> with an
      additional class loader and pass it to <code>KieContainer</code> when creating a new <code>KieBase</code> from
      it.</para>
    <example>
      <title>Creating a new KieBase with a custom ClassLoader</title>
      <programlisting language="java">KieServices kieServices = KieServices.Factory.get();
KieBaseConfiguration kbaseConf = kieServices.newKieBaseConfiguration( null, MyType.class.getClassLoader() );
KieBase kbase = kieContainer.newKieBase( kbaseConf );</programlisting>
    </example>
  </section>

  <section>
    <title>KieSessions and KieBase Modifications</title>

    <para>KieSessions will be discussed in more detail in
    section "Running". The <code>KieBase</code> creates and returns
    <code>KieSession</code> objects, and it may optionally keep
    references to those. When <code>KieBase</code> modifications occur
    those modifications are applied against the data in the sessions. This
    reference is a weak reference and it is also optional, which is controlled
    by a boolean flag.</para>
  </section>

  <section>
    <title>KieScanner</title>

    <para>The <code>KieScanner</code> allows continuous monitoring of your Maven repository
    to check whether a new release of a Kie project has been installed. A new release is deployed in
    the <code>KieContainer</code> wrapping that project. The use of the <code>KieScanner</code>
    requires kie-ci.jar to be on the classpath.</para>

    <figure>
      <title>KieScanner</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/kie/BuildDeployUtilizeAndRun/KieScanner.png"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>A <code>KieScanner</code> can be registered on a <code>KieContainer</code>
    as in the following example.</para>

    <example>
      <title>Registering and starting a KieScanner on a KieContainer</title>

      <programlisting language="java">KieServices kieServices = KieServices.Factory.get();
ReleaseId releaseId = kieServices.newReleaseId( "org.acme", "myartifact", "1.0-SNAPSHOT" );
KieContainer kContainer = kieServices.newKieContainer( releaseId );
KieScanner kScanner = kieServices.newKieScanner( kContainer );

// Start the KieScanner polling the Maven repository every 10 seconds
kScanner.start( 10000L );</programlisting>
    </example>

    <para>In this example the <code>KieScanner</code> is configured to run with a fixed
    time interval, but it is also possible to run it on demand by invoking the
    <code>scanNow()</code> method on it. If the <code>KieScanner</code> finds in the
    Maven repository an updated version of the Kie project used by that <code>KieContainer</code>
    it automatically downloads the new version and triggers an incremental build of the new
    project. From this moment all the new <code>KieBase</code>s and <code>KieSession</code>s
    created from that <code>KieContainer</code> will use the new project version.</para>
	<para>The <code>KieScanner</code> will only pickup changes to deployed jars if it is using a SNAPSHOT, version range, or the LATEST setting. 
	Fixed versions will not automatically update at runtime.
	</para>
  </section>
  <section>
    <title>Maven Versions and Dependencies</title>
    <para>Maven supports a number of mechanisms to manage versioning and dependencies within applications. Modules can
      be published with specific version numbers, or they can use the SNAPSHOT suffix. Dependencies can specify version
      ranges to consume, or take avantage of SNAPSHOT mechanism.</para>
    <para>StackOverflow provides a very good description for this, which is reproduced below.</para>
    <para><link
        xlink:href="http://stackoverflow.com/questions/30571/how-do-i-tell-maven-to-use-the-latest-version-of-a-dependency"
        > http://stackoverflow.com/questions/30571/how-do-i-tell-maven-to-use-the-latest-version-of-a-dependency
      </link></para>
    
    <para>If you always want to use the newest version, Maven has two keywords you can use as an alternative to version
      ranges. You should use these options with care as you are no longer in control of the plugins/dependencies you are
      using. </para>
    
    <para>When you depend on a plugin or a dependency, you can use the a version value of LATEST or RELEASE. LATEST
      refers to the latest released or snapshot version of a particular artifact, the most recently deployed artifact in
      a particular repository. RELEASE refers to the last non-snapshot release in the repository. In general, it is not
      a best practice to design software which depends on a non-specific version of an artifact. If you are developing
      software, you might want to use RELEASE or LATEST as a convenience so that you don't have to update version
      numbers when a new release of a third-party library is released. When you release software, you should always make
      sure that your project depends on specific versions to reduce the chances of your build or your project being
      affected by a software release not under your control. Use LATEST and RELEASE with caution, if at all. </para>
    
    <para>See the POM Syntax section of the Maven book for more details. </para>
    <para><link xlink:href="http://books.sonatype.com/mvnref-book/reference/pom-relationships-sect-pom-syntax.html"
        >http://books.sonatype.com/mvnref-book/reference/pom-relationships-sect-pom-syntax.html </link></para>
    <para><link
        xlink:href="http://books.sonatype.com/mvnref-book/reference/pom-relationships-sect-project-dependencies.html"
        >http://books.sonatype.com/mvnref-book/reference/pom-relationships-sect-project-dependencies.html</link></para>
    <para>Here's an example illustrating the various options. In the Maven repository, com.foo:my-foo has the following
      metadata:</para>
    
      <programlisting language="XML">&lt;metadata&gt;
  &lt;groupId&gt;com.foo&lt;/groupId&gt;
  &lt;artifactId&gt;my-foo&lt;/artifactId&gt;
  &lt;version&gt;2.0.0&lt;/version&gt;
  &lt;versioning&gt;
    &lt;release&gt;1.1.1&lt;/release&gt;
    &lt;versions&gt;
      &lt;version&gt;1.0&lt;/version&gt;
      &lt;version&gt;1.0.1&lt;/version&gt;
      &lt;version&gt;1.1&lt;/version&gt;
      &lt;version&gt;1.1.1&lt;/version&gt;
      &lt;version&gt;2.0.0&lt;/version&gt;
    &lt;/versions&gt;
    &lt;lastUpdated&gt;20090722140000&lt;/lastUpdated&gt;
  &lt;/versioning&gt;
&lt;/metadata&gt;</programlisting>
    
    <para>If a dependency on that artifact is required, you have the following options (other version ranges can be
      specified of course, just showing the relevant ones here): Declare an exact version (will always resolve to
      1.0.1): <programlisting>&lt;version&gt;[1.0.1]&lt;/version&gt;</programlisting> Declare an explicit version (will
      always resolve to 1.0.1 unless a collision occurs, when Maven will select a matching version):
      <programlisting>&lt;version&gt;1.0.1&lt;/version&gt;</programlisting> Declare a version range for all 1.x (will
      currently resolve to 1.1.1): <programlisting>&lt;version&gt;[1.0.0,2.0.0)&lt;/version&gt;</programlisting> Declare
      an open-ended version range (will resolve to 2.0.0):
      <programlisting>&lt;version&gt;[1.0.0,)&lt;/version&gt;</programlisting> Declare the version as LATEST (will
      resolve to 2.0.0): <programlisting>&lt;version&gt;LATEST&lt;/version&gt;</programlisting> Declare the version as
      RELEASE (will resolve to 1.1.1): <programlisting>&lt;version&gt;RELEASE&lt;/version&gt;</programlisting>Note that
      by default your own deployments will update the "latest" entry in the Maven metadata, but to update the "release"
      entry, you need to activate the "release-profile" from the Maven super POM. You can do this with either
      "-Prelease-profile" or "-DperformRelease=true" </para>
    
  </section>
  <section>
    <title>Settings.xml and Remote Repository Ssetup</title>
    <para>The maven settings.xml is used to configure Maven execution. Detailed instructions can be found at the Maven
      website:</para>
    <para><link xlink:href="http://maven.apache.org/settings.html">http://maven.apache.org/settings.html</link></para>
    <para> The settings.xml file can be located in 3 locations, the actual settings used is a merge of those 3
      locations.</para>
    <itemizedlist>
        <listitem>
        <para>The Maven install: $M2_HOME/conf/settings.xml</para>
      </listitem>
      <listitem>
        <para>A user's install: ${user.home}/.m2/settings.xml</para>
      </listitem>
      <listitem>
        <para>Folder location specified by the system propert kie.maven.settings.custom</para>
      </listitem>
      </itemizedlist>
    <para>The settings.xml is used to specify the location of remote repositories. It is important that you activate the
      profile that specifies the remote repository, typically this can be done using "activeByDefault":</para>
    <programlisting language="XML">&lt;profiles&gt;
  &lt;profile&gt;
    &lt;id&gt;profile-1&lt;/id&gt;
    &lt;activation&gt;
      &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;
    &lt;/activation&gt;
    ...
  &lt;/profile&gt;
&lt;/profiles&gt;
    </programlisting>
    <para>Maven provides detailed documentation on using multiple remote repositories:</para>
    <para><link xlink:href="http://maven.apache.org/guides/mini/guide-multiple-repositories.html"
        >http://maven.apache.org/guides/mini/guide-multiple-repositories.html</link></para>
  </section>
</section>
