<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0" xml:id="DataMappings"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xmlns="http://docbook.org/ns/docbook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:ns="http://docbook.org/ns/docbook">
  <title>Data Mappings</title>
       <para>
              Human tasks typically present some data related to the task that needs to be performed to the 
              actor that is executing the task and usually also request the actor to provide some result data related to the 
              execution of the task. Task forms are typically used to present this data to the actor and request results.
       </para>
       <para>
              The data that will be used by the Task needs to be specified when we define the User Task in our Process. In 
              order to do that we need to define which data will be copied from the process context to the task context. 
              Notice that the data is copied, so it can be modified inside the Task context but it will not affect the process
              variables unless we decide to copy back the value from the task to the process context. 
       </para>
       <para>
              Most of the times Forms are used to display data to the end user. Allowing them to generate/create new data that will be
              propagated to the process context to be used by future activities. In order to decide how the information flow from the process to a
              particular task and from the task to the process we need to define which pieces of information will be automatically copied
              by the process engine. The following sections shows how to do these mappings by configuring the DataInputSet, DataOutputSet and the
              Assignments properties of a User Task.
              
       </para>
       <para> Let's start defining the Task <emphasis role="bold">DataInputSet</emphasis>: </para>
       <mediaobject>
              <imageobject>
                     <imagedata align="center" format="PNG" role=""
                            fileref="images/TaskService/data-input.png"/>
              </imageobject>
       </mediaobject>
       <para>Both GroupId and Comment are automatically generated, so you don't need to worry about
              that. In this case the only user defined Data Input is called: <emphasis role="bold"
                     >in_name</emphasis>. This means that the task will be receiving information
              from the process context and internally this variable will be called in_name. The type
              is also specified here. </para>
       <para>In the <emphasis role="bold">Data Outputs</emphasis> represent the data that will be
              generated by the tasks. In this case we have two variables of type String called:
                     <emphasis role="bold">out_name</emphasis> and <emphasis role="bold"
                     >out_mail</emphasis> and two Integer variables called: <emphasis role="bold"
                     >out_age</emphasis> and <emphasis role="bold">out_score</emphasis> are defined.
              This means that inside the task context we will need to set the value to these
              variables. </para>
       
       <mediaobject>
              <imageobject>
                     <imagedata align="center" format="PNG" role=""
                            fileref="images/TaskService/data-output.png"/>
              </imageobject>
       </mediaobject>
       
       <para>Finally all the connections with the process context needs to be done in the <emphasis
                     role="bold">Data Assignments</emphasis>. The main idea here is to define how
              Data Inputs and Data Outputs will be associated with process variables. </para>
       
       <mediaobject>
              <imageobject>
                     <imagedata align="center" format="PNG" role=""
                            fileref="images/TaskService/data-assignments.png"/>
              </imageobject>
       </mediaobject>
       
       <para> As shown  in the previous screenshot, the assignments between the process variables
              (in this case (<emphasis role="bold">name, age, mail and hr_score</emphasis>)) and the
              Data Inputs and Outputs are done in the Data Assignments screen. Notice that the
              example uses a convention that makes it easy to know which is an internal Task
              variables (Data Input/Output) using the "<emphasis role="bold">in_</emphasis>" and
                     "<emphasis role="bold">out_</emphasis>" prefix to the variable names.  Using
              this convention you can quickly understand the Assignments screen. The first row maps
              the process variable called <emphasis role="bold">name</emphasis> to the data input
              called <emphasis role="bold">in_name</emphasis>.  The second row maps the data output
              called <emphasis role="bold">out_mail</emphasis> to the process variable called
                     <emphasis role="bold">mail</emphasis>, and so on.</para>
       <para>These mappings at runtime will automatically copy the variables content from one
              context (process and task) to the other automatically for us.</para>
</section>
