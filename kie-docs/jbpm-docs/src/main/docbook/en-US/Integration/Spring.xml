<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xmlns="http://docbook.org/ns/docbook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:ns="http://docbook.org/ns/docbook">
  <title>Spring</title>
       <para>jBPM can be configured in many ways with Spring though the two most frequenlty used
              approaches are:</para>
       <para>
              <itemizedlist>
                     <listitem>
                            <para>direct use of runtime manager API</para>
                     </listitem>
                     <listitem>
                            <para>use of jbpm services</para>
                     </listitem>
              </itemizedlist>
       </para>
       <para>While both approaches are tested and valid, which one to chose is a matter of the
              system functionaltiy. Before selecting one of the approache the most important
              question to ask is: </para>
       <para>Will my system run multiple runtime managers at the same time?</para>
       <para>If the asnwer to this question is no, then go ahead with direct Runtime Manager API as
              it will be the simplest way to use jBPM within your application. But when answer is
              yes, then go ahead with jbpm services as they encapsulate runtime manager API with
              best practices by providing dynamic runtime environment for your BPM logic - also
              known as execution server. </para>
       <section>
              <title>Direct use of Runtime Manager API</title>
              <para>This is the standard (and the simplest) way to get up and running with jBPM in
                     your application. You only configure it once and run as part of the
                     application. With the RuntimeManager usage, both process engine and task
                     service will be managed in complete synchronization, meaning there is no need
                     from end user to deal with "plumbing" code to make these two work together. </para>
              <para>To provide spring based way of setting up jBPM, few factory beans where
                     added:</para>
              <para>
                     <itemizedlist>
                            <listitem>
                                   <para>org.kie.spring.factorybeans.RuntimeEnvironmentFactoryBean</para>
                            </listitem>
                            <listitem>
                                   <para>org.kie.spring.factorybeans.RuntimeManagerFactoryBean</para>
                            </listitem>
                            <listitem>
                                   <para>org.kie.spring.factorybeans.TaskServiceFactoryBean</para>
                            </listitem>
                     </itemizedlist>
              </para>
              <para>FactoryBeans provide standard way to configure Spring application spring xml
                     though there are not custom spring xml tags equivalent for them.</para>
              <section>
                     <title>RuntimeEnvironmentFactoryBean</title>
                     <para>Factory responsible for producing instances of RuntimeEnvironment that
                            are consumed by RuntimeManager upon creation. It allows to create
                            following types of RuntimeEnvironment (that mainly means what is
                            configured by default):<itemizedlist>
                                   <listitem>
                                          <para>DEFAULT - default (most common) configuration for
                                                 RuntimeManager</para>
                                   </listitem>
                                   <listitem>
                                          <para>EMPTY - completely empty environment to be manually
                                                 populated</para>
                                   </listitem>
                                   <listitem>
                                          <para>DEFAULT_IN_MEMORY - same as DEFAULT but without
                                                 persistence of the runtime engine</para>
                                   </listitem>
                                   <listitem>
                                          <para>DEFAULT_KJAR - same as DEFAULT but knowledge asset
                                                 are taken from KJAR identified by releaseid or
                                                 GAV</para>
                                   </listitem>
                                   <listitem>
                                          <para>DEFAULT_KJAR_CL - build directly from classpath that
                                                 consists kmodule.xml descriptor</para>
                                   </listitem>
                            </itemizedlist></para>
                     <para>Mandatory properties depends on the selected type but knowledge
                            information must be given for all types. That means that one of the
                            following must be provided:<itemizedlist>
                                   <listitem>
                                          <para>knowledgeBase</para>
                                   </listitem>
                                   <listitem>
                                          <para>assets</para>
                                   </listitem>
                                   <listitem>
                                          <para>releaseId</para>
                                   </listitem>
                                   <listitem>
                                          <para>groupId, artifactId, version</para>
                                   </listitem>
                            </itemizedlist></para>
                     <para>Next for DEFAULT, DEFAULT_KJAR, DEFAULT_KJAR_CL persistence needs to be configured:<itemizedlist>
                                   <listitem>
                                          <para>entity manager factory</para>
                                   </listitem>
                                   <listitem>
                                          <para>transaction manager</para>
                                   </listitem>
                            </itemizedlist></para>
                     <para>Transaction Manager must be Spring transaction manager as based on its
                            presence entire persistence and transaction support is configured.
                            Optionally EntityManager can be provided to be used instead of always
                            creating new one from EntityManagerFactory - e.g. when using shared
                            entity manager from Spring. All other properties are optional and are
                            meant to override the default given by type of the environment
                            selected.</para>
              </section>
              <section>
                     <title>RuntimeManagerFactoryBean</title>
                     <para>FactoryBean responsible for creation of RuntimeManager instances of given
                            type based on provided runtimeEnvironment. Supported types:<itemizedlist>
                                   <listitem>
                                          <para>SINGLETON</para>
                                   </listitem>
                                   <listitem>
                                          <para>PER_REQUEST</para>
                                   </listitem>
                                   <listitem>
                                          <para>PER_PROCESS_INSTANCE</para>
                                   </listitem>
                            </itemizedlist></para>
                     <para>where default is SINGLETON when no type is specified. Every runtime
                            manager must be uniquely identified thus identifier is a mandatory
                            property. All instances created by this factory are cached to be able to
                            properly dispose them using destroy method (close()).</para>
              </section>
              <section>
                     <title>TaskServiceFactoryBean</title>
                     <para>Creates instance of TaskService based on given properties. Following are
                            mandatory properties that must be provided:<itemizedlist>
                                   <listitem>
                                          <para>entity manager factory</para>
                                   </listitem>
                                   <listitem>
                                          <para>transaction manager</para>
                                   </listitem>
                            </itemizedlist></para>
                     <para>Transaction Manager must be Spring transaction manager as based on its
                            presence entire persistence and transaction support is configured.
                            Optionally EntityManager can be provided to be used instead of always
                            creating new one from EntityManagerFactory - e.g. when using shared
                            entity manager from Spring. In addition to above there are optional
                            properties that can be set on task service instance:<itemizedlist>
                                   <listitem>
                                          <para>userGroupCallback - implementation of
                                                 UserGroupCallback to be used, defaults to
                                                 MVELUserGroupCallbackImpl</para>
                                   </listitem>
                                   <listitem>
                                          <para>userInfo - implementation of UserInfo to be used,
                                                 defaults to DefaultUserInfo</para>
                                   </listitem>
                                   <listitem>
                                          <para>listener - list of TaskLifeCycleEventListener that
                                                 will be notified upon various operations on
                                                 tasks</para>
                                   </listitem>
                            </itemizedlist></para>
                     <para>This factory creates single instance of task service only as it's
                            intended to be shared across all other beans in the system.</para>
              </section>
              <section>
                     <title>Sample configuration of RuntimeManager with Spring</title>
                     <para>Following section aims at giving complete spring configuration for single
                            runtime manager wihtin spring application context.<orderedlist>
                                   <listitem>
                                          <para>Setup entity manager factory and transaction
                                                 manager:<programlisting>
&lt;bean id="jbpmEMF" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
  &lt;property name="persistenceUnitName" value="org.jbpm.persistence.spring.jta"/>
&lt;/bean>

&lt;bean id="btmConfig" factory-method="getConfiguration" class="bitronix.tm.TransactionManagerServices">&lt;/bean>

&lt;bean id="BitronixTransactionManager" factory-method="getTransactionManager"
      class="bitronix.tm.TransactionManagerServices" depends-on="btmConfig" destroy-method="shutdown" />
  
&lt;bean id="jbpmTxManager" class="org.springframework.transaction.jta.JtaTransactionManager">
  &lt;property name="transactionManager" ref="BitronixTransactionManager" />
  &lt;property name="userTransaction" ref="BitronixTransactionManager" />
&lt;/bean>
</programlisting></para>
                                          <para>with this we have ready persistence configuration
                                                 that gives us:<itemizedlist>
                                                  <listitem>
                                                  <para>JTA transaction manager (backed by bitronix
                                                  - for unit tests or servlet containers)</para>
                                                  </listitem>
                                                  <listitem>
                                                  <para>entity manager factory for persistence unit
                                                  named org.jbpm.persistence.spring.jta</para>
                                                  </listitem>
                                                 </itemizedlist></para>
                                   </listitem>
                                   <listitem>
                                          <para>Configure resource that we are going to use -
                                                 business
                                                 process<programlisting>
&lt;bean id="process" factory-method="newClassPathResource" class="org.kie.internal.io.ResourceFactory">
  &lt;constructor-arg>
    &lt;value>jbpm/processes/sample.bpmn&lt;/value>
  &lt;/constructor-arg>
&lt;/bean>
</programlisting></para>
                                          <para>this configures single process that will be
                                                 available for execution - sample.bpmn that will be
                                                 taken from class path. This is the simplest way to
                                                 get your processes included when trying out
                                                 jbpm.</para>
                                   </listitem>
                                   <listitem>
                                          <para>Configure RuntimeEnvironment with our infrastructure
                                                 (entity manager, transaction manager,
                                                 resources)<programlisting>
&lt;bean id="runtimeEnvironment" class="org.kie.spring.factorybeans.RuntimeEnvironmentFactoryBean">
  &lt;property name="type" value="DEFAULT"/>
  &lt;property name="entityManagerFactory" ref="jbpmEMF"/>
  &lt;property name="transactionManager" ref="jbpmTxManager"/>
  &lt;property name="assets">
    &lt;map>
      &lt;entry key-ref="process">&lt;util:constant static-field="org.kie.api.io.ResourceType.BPMN2"/>&lt;/entry>
    &lt;/map>
  &lt;/property>
&lt;/bean>
</programlisting></para>
                                          <para>that gives us default runtime environment ready to
                                                 be used to create instance of a
                                                 RuntimeManager.</para>
                                   </listitem>
                                   <listitem>
                                          <para>Create RuntimeManager with the environment we just
                                                 setup<programlisting>
&lt;bean id="runtimeManager" class="org.kie.spring.factorybeans.RuntimeManagerFactoryBean" destroy-method="close">
  &lt;property name="identifier" value="spring-rm"/>
  &lt;property name="runtimeEnvironment" ref="runtimeEnvironment"/>
&lt;/bean>
</programlisting></para>
                                          <para>with just four steps you are ready to execute your
                                                 processes with Spring and jBPM 6, utilizing
                                                 EntityManagerFactory and JTA transaction
                                                 manager.</para>
                                          <para>Complete spring configuration file can be found
                                                  <link
                                                  xlink:href="https://github.com/droolsjbpm/droolsjbpm-integration/blob/master/kie-spring/src/test/resources/jbpm/jta-emf/jta-emf-spring.xml"
                                                  >here</link>.</para>
                                   </listitem>
                            </orderedlist></para>
                     <para>This is just one configuration setup that jBPM 6 supports - JTA
                            transaction manager and EntityManagerFactory, others are: <itemizedlist>
                                   <listitem>
                                          <para>JTA and SharedEntityManager </para>
                                   </listitem>
                                   <listitem>
                                          <para>Local Persistence Unit and
                                                 EntityManagerFactory</para>
                                   </listitem>
                                   <listitem>
                                          <para>Local Persistence Unit and
                                                 SharedEntityManager</para>
                                   </listitem>
                            </itemizedlist></para>
                     <para>For more details about difference configuration options look at the
                            example <link
                                   xlink:href="https://github.com/droolsjbpm/droolsjbpm-integration/tree/master/kie-spring/src/test/resources/jbpm"
                                   >configuration files</link> and <link
                                   xlink:href="https://github.com/droolsjbpm/droolsjbpm-integration/tree/master/kie-spring/src/test/java/org/kie/spring/jbpm"
                                   >test cases</link>.</para>
              </section>
       </section>
       <section>
              <title>jBPM services with Spring</title>
              <para>In case more dynamic nature is required in your Spring application then more
                     appropriate could be to build up so called execution server based on jbpm
                     services. jBPM services has been designed in a way to make them framework
                     agnostic and in case framework specific addons are required they will be
                     brought by additional module. So the code logic of the services is embedded in
                     jbpm-kie-services. These are pure java services and by that can be easily
                     consumed by Spring application. </para>
              <para>Dynamic nature means that processes (And other assets like data model, rules,
                     forms, etc) can be added and removed without restarting application.</para>
              <para>There is almost no code involved to completely configure jBPM services in spring
                     besides single interface that needs to be implemented - IdentityProvider that
                     depends on your security configuration. One built with Spring Security can be
                     like following though it might not cover all features one can have for Spring
                     application.<programlisting>
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import org.kie.internal.identity.IdentityProvider;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.context.SecurityContextHolder;

public class SpringSecurityIdentityProvider implements IdentityProvider {

	public String getName() {
		
		Authentication auth = SecurityContextHolder.getContext().getAuthentication();
		if (auth != null &amp;&amp; auth.isAuthenticated()) {
			return auth.getName();
		}
		return "system";
	}

	public List&lt;String> getRoles() {
		Authentication auth = SecurityContextHolder.getContext().getAuthentication();
		if (auth != null &amp;&amp; auth.isAuthenticated()) {
			List&lt;String> roles = new ArrayList&lt;String>();
			
			for (GrantedAuthority ga : auth.getAuthorities()) {
				roles.add(ga.getAuthority());
			}
			
			return roles;
		}
		
		return Collections.emptyList();
	}

	public boolean hasRole(String role) {
		return false;
	}

}
</programlisting></para>
              <section>
                     <title>Configure jBPM services in Spring application</title>
                     <para>As usual, first thing to start with is transaction
                            configuration:<programlisting>
&lt;context:annotation-config />
&lt;tx:annotation-driven />
&lt;tx:jta-transaction-manager />                

&lt;bean id="transactionManager" class="org.springframework.transaction.jta.JtaTransactionManager" />
</programlisting></para>
                     <para>Next configuration of JPA and persistence
                            follows:<programlisting>
&lt;bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean" depends-on="transactionManager">
   &lt;property name="persistenceXmlLocation" value="classpath:/META-INF/jbpm-persistence.xml" />
&lt;/bean>
</programlisting></para>
                     <para>Configure security and user/group information
                            providers<programlisting>
&lt;util:properties id="roleProperties" location="classpath:/roles.properties" />
 
&lt;bean id="userGroupCallback" class="org.jbpm.services.task.identity.JBossUserGroupCallbackImpl">
  &lt;constructor-arg name="userGroups" ref="roleProperties">&lt;/constructor-arg>
&lt;/bean>

&lt;bean id="identityProvider" class="org.jbpm.spring.SpringSecurityIdentityProvider"/>
</programlisting></para>
                     <para>Configure runtime manager factory that is Spring context aware and by
                            that can interact with spring container in correct way and supporting
                            services (transactional command service and task
                            service)<programlisting>
&lt;bean id="runtimeManagerFactory" class="org.kie.spring.manager.SpringRuntimeManagerFactoryImpl">
  &lt;property name="transactionManager" ref="transactionManager"/>
  &lt;property name="userGroupCallback" ref="userGroupCallback"/>
&lt;/bean>

&lt;bean id="transactionCmdService" class="org.jbpm.shared.services.impl.TransactionalCommandService">
  &lt;constructor-arg name="emf" ref="entityManagerFactory">&lt;/constructor-arg>
&lt;/bean>

&lt;bean id="taskService" class="org.kie.spring.factorybeans.TaskServiceFactoryBean" destroy-method="close">
  &lt;property name="entityManagerFactory" ref="entityManagerFactory"/>
  &lt;property name="transactionManager" ref="transactionManager"/>
  &lt;property name="userGroupCallback" ref="userGroupCallback"/>
  &lt;property name="listeners">
    &lt;list>
      &lt;bean class="org.jbpm.services.task.audit.JPATaskLifeCycleEventListener">
        &lt;constructor-arg value="true"/>
      &lt;/bean>
    &lt;/list>
  &lt;/property>
&lt;/bean>
</programlisting></para>
                     <para>Configure jBPM services as spring
                            beans<programlisting>
&lt;!-- definition service -->
&lt;bean id="definitionService" class="org.jbpm.kie.services.impl.bpmn2.BPMN2DataServiceImpl"/>

&lt;!-- runtime data service -->
&lt;bean id="runtimeDataService" class="org.jbpm.kie.services.impl.RuntimeDataServiceImpl">
  &lt;property name="commandService" ref="transactionCmdService"/>
  &lt;property name="identityProvider" ref="identityProvider"/>
  &lt;property name="taskService" ref="taskService"/>
&lt;/bean>

&lt;!-- -- deployment service -->
&lt;bean id="deploymentService" class="org.jbpm.kie.services.impl.KModuleDeploymentService" depends-on="entityManagerFactory" init-method="onInit">
  &lt;property name="bpmn2Service" ref="definitionService"/>
  &lt;property name="emf" ref="entityManagerFactory"/>
  &lt;property name="managerFactory" ref="runtimeManagerFactory"/>
  &lt;property name="identityProvider" ref="identityProvider"/>
  &lt;property name="runtimeDataService" ref="runtimeDataService"/>
&lt;/bean>

&lt;!-- process service -->
&lt;bean id="processService" class="org.jbpm.kie.services.impl.ProcessServiceImpl" depends-on="deploymentService">
  &lt;property name="dataService" ref="runtimeDataService"/>
  &lt;property name="deploymentService" ref="deploymentService"/>
&lt;/bean>

&lt;!-- user task service -->
&lt;bean id="userTaskService" class="org.jbpm.kie.services.impl.UserTaskServiceImpl" depends-on="deploymentService">
  &lt;property name="dataService" ref="runtimeDataService"/>
  &lt;property name="deploymentService" ref="deploymentService"/>
&lt;/bean>

&lt;!-- register runtime data service as listener on deployment service so it can receive notification about deployed and undeployed units -->
&lt;bean id="data" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean" depends-on="deploymentService">
  &lt;property name="targetObject" ref="deploymentService">&lt;/property>
  &lt;property name="targetMethod">&lt;value>addListener&lt;/value>&lt;/property>
  &lt;property name="arguments">
  &lt;list>
      &lt;ref bean="runtimeDataService"/>
  &lt;/list>
  &lt;/property>
&lt;/bean>
</programlisting></para>
                     <para>And this is all is needed to build fully featured execution server with
                            Spring and jBPM services. A complete Spring web application with this
                            setup can be found <link
                                   xlink:href="https://github.com/mswiderski/spring-jbpm-app"
                                   >here</link>.</para>
              </section>
       </section>
    
</section>
