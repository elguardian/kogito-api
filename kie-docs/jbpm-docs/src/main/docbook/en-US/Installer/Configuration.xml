<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xmlns="http://docbook.org/ns/docbook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:ns="http://docbook.org/ns/docbook">
  <title>Configuration</title>
  
    <section>
      <title>Playgrounds</title>
      
      <para>The workbench by default brings two sample playground repositories (by cloning the jbpm-playground
      repository hosted on GitHub). In cases where this is not wanted (access to Internet might not be available
      or there might be a need to start with a completely clean installation of the workbench) this default behavior
      can be turned off. To do so, change the following system property in the start.jboss target to false
      in the build.xml:
      <programlisting>-Dorg.kie.demo=false</programlisting>
      Note that this will create a completely empty version of the workbench. To be able to start modeling
      processes, the following elements need to be created first:
        <itemizedlist>
          <listitem>Organizational unit</listitem>
          <listitem>Repository (new or clone existing one)</listitem>
          <listitem>Project</listitem>
        </itemizedlist>
      </para>
    </section>
    
    <section>
      <title>Workbench Authentication</title>
      
      <para>The workbench web application is using the "default" security domain for authenticating
      and authorizing users (as specified in the WEB-INF/jboss-web.xml inside the WARs).</para>
      
      <para>The application server is configured by default to use properties files for specifying
      users.  Note that this is for demo purposes only (as passwords and roles are stored in simple
      property files).  The security domain is configured in the standalone.xml configuration file
      as follows:</para>
      
      <programlisting>&lt;security-domain name="other" cache-type="default"&gt;
  &lt;authentication&gt;
    &lt;login-module code="UsersRoles" flag="required"&gt;
      &lt;module-option name="usersProperties" value="${jboss.server.config.dir}/users.properties"/&gt;
      &lt;module-option name="rolesProperties" value="${jboss.server.config.dir}/roles.properties"/&gt;
    &lt;/login-module&gt;
  &lt;/authentication&gt;
&lt;/security-domain&gt;</programlisting>

  <para>By default, these configuration files contain the following users:</para>
      
  <table>
    <title>Default users</title>
      <tgroup cols="4">
        <thead>
          <row>
            <entry>Name</entry>
            <entry>Password</entry>
            <entry>Workbench roles</entry>
            <entry>Task roles</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>admin</entry>
            <entry>admin</entry>
            <entry>admin,analyst</entry>
            <entry></entry>
          </row>
        </tbody>
        <tbody>
          <row>
            <entry>krisv</entry>
            <entry>krisv</entry>
            <entry>admin,analyst</entry>
            <entry></entry>
          </row>
        </tbody>
        <tbody>
          <row>
            <entry>john</entry>
            <entry>john</entry>
            <entry>analyst</entry>
            <entry>Accounting,PM</entry>
          </row>
        </tbody>
        <tbody>
          <row>
            <entry>mary</entry>
            <entry>mary</entry>
            <entry>analyst</entry>
            <entry>HR</entry>
          </row>
        </tbody>
        <tbody>
          <row>
            <entry>sales-rep</entry>
            <entry>sales-rep</entry>
            <entry>analyst</entry>
            <entry>sales</entry>
          </row>
        </tbody>
        <tbody>
          <row>
            <entry>jack</entry>
            <entry>jack</entry>
            <entry>analyst</entry>
            <entry>IT</entry>
          </row>
        </tbody>
        <tbody>
          <row>
            <entry>katy</entry>
            <entry>katy</entry>
            <entry>analyst</entry>
            <entry>HR</entry>
          </row>
        </tbody>
        <tbody>
          <row>
            <entry>salaboy</entry>
            <entry>salaboy</entry>
            <entry>admin,analyst</entry>
            <entry>IT,HR,Accounting</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    
    <para>Authentication can be customized by editing the authentication and configuration files in the
    jbpm-installer/auth folder and/or by changing the standalone-*.xml files in the jbpm-installer folder.  Note
    that you need to rerun the installer to make sure the modified files are copied and picked correctly.</para>
      
  </section>
  
  <section>
    <title>Using your own database</title>

    <section>
      <title>Introduction</title>
  
      <para>By default, the jbpm-installer uses an H2 database for persisting runtime data.  In this
      section we will:  
        <orderedlist>
          <listitem><para>modify the persistence settings for runtime persistence of process instance state</para></listitem>
          <listitem><para>test the startup with our new settings!</para></listitem>
        </orderedlist>
      </para>
  
      <para>You will need a local instance of a database, in this case we will use MySQL.</para>
  
      <para>First though, let's look at the persistence setup that jBPM uses. In the demo, and 
      in general, there are following types of persistent entities used by jBPM:
        <itemizedlist> 
          <listitem>entities used for saving the actual session and process instance information - aka runtime data.</listitem>
          <listitem>entities used for logging and generating reports - aka audit log.</listitem>
          <listitem>entities used by the task service.</listitem>
        </itemizedlist>
      </para>
  
      <para><quote>persistent entities</quote> in this context, are Java classes that represent information in the database.</para>
    </section>
  
    <section>
      <title>Database setup</title>
  
      <para>In the MySQL database used in this quickstart, create a single user:
        <itemizedlist>
          <listitem>user/schema "jbpm" with password "jbpm" (which will be used to persist all entities)</listitem>
        </itemizedlist>
      </para>
  
      <para>If you end up using different names for your user/schemas, please make a note of
      where we insert "jbpm" in the configuation files.</para>
  
      <para>If you want to try this quickstart with <emphasis>another</emphasis> database, a section at
      the end of this quickstart describes what you may need to modify.</para>
  
    </section>
  
    <section>
      <title>Configuration</title>
  
      <para>The following files define the persistence settings for the jbpm-installer demo:
        <itemizedlist>
          <listitem>jbpm-installer/db/jbpm-persistence-JPA2.xml</listitem>
          <listitem>Application server configuration
            <itemizedlist>
              <listitem>standalone-*.xml</listitem>
            </itemizedlist>
          </listitem>
        </itemizedlist>
      </para>
      
      <tip><para>There are multiple standalone.xml files available (depending on whether you are using JBoss
      AS 7.1.1 or JBoss EAP 6.1.1 and whether you are running the normal or full profile).  The full profile
      is required to use the JMS component for remote integration. Best practice is to update all standalone.xml
      files to have consistent setup but most important is to have standalone-full-as-7.1.1.Final.xml
      properly configured as this is used by default by the installer.</para></tip>
      
      <para>Do the following:
        <itemizedlist>
        <listitem>Disable H2 default data base and enable mysql data base in build.properties
        <programlisting># default is H2
# H2.version=1.3.168
# db.name=h2
# db.driver.jar.name=${db.name}.jar
# db.driver.download.url=http://repo1.maven.org/maven2/com/h2database/h2/${H2.version}/h2-${H2.version}.jar
#mysql
db.name=mysql
db.driver.module.prefix=com/mysql
db.driver.jar.name=${db.name}-connector-java.jar
db.driver.download.url=https://repository.jboss.org/nexus/service/local/repositories/central/content/mysql/mysql-connector-java/5.1.18/mysql-connector-java-5.1.18.jar
        </programlisting>
        </listitem>
        <listitem>
          <para><filename>db/jbpm-persistence-JPA2.xml</filename>:</para>
          <para>This is the JPA persistence file that defines the persistence settings used by 
          jBPM for both the process engine information, the logging/BAM information and task service. </para>
          <para>In this file, you will have to change the name of the hibernate dialect used for your database.</para>
          <para>The original line is:</para> 
          <programlisting>&lt;property name="hibernate.dialect" value="org.hibernate.dialect.H2Dialect"/&gt;</programlisting>
          <para>In the case of a MySql database, you need to change it to:</para> 
          <programlisting>&lt;property name="hibernate.dialect" value="org.hibernate.dialect.<emphasis role="bold">MySQL</emphasis>Dialect"/&gt;</programlisting>
          <para>For those of you who decided to use another database, a list of the available 
          hibernate dialect classes can be found <link
  xlink:href="http://docs.jboss.org/hibernate/core/3.3/reference/en-US/html/session-configuration.html#configuration-optional-dialects">
          here</link>.</para>
        </listitem>
        <listitem>
          <para><filename>standalone.xml</filename>:</para>
          <para>This file is the configuration for the standalone JBoss application server. When the 
          installer installs the demo, it copies these files to the <code>standalone/configuration</code>
          directory in the JBoss server directory.</para>
          <para>We need to change the datasource configuration in <code>standalone.xml</code>
          so that the jBPM process engine can use our MySQL database</para>
          <para>The original file contains the following lines:</para>
          <programlisting>
&lt;datasource jndi-name="java:jboss/datasources/jbpmDS" enabled="true" use-java-context="true" pool-name="H2DS"&gt;
    &lt;connection-url&gt;jdbc:h2:tcp://localhost/runtime/jbpm-demo&lt;/connection-url&gt;
    &lt;driver&gt;h2&lt;/driver&gt;
    &lt;pool&gt;&lt;/pool&gt;
    &lt;security&gt;
       &lt;user-name&gt;sa&lt;/user-name&gt;
       &lt;password&gt;&lt;/password&gt;
    &lt;/security&gt;
&lt;/datasource&gt;
&lt;drivers&gt;
    &lt;driver name="h2" module="com.h2database.h2"&gt;
        &lt;xa-datasource-class&gt;org.h2.jdbcx.JdbcDataSource&lt;/xa-datasource-class&gt;
    &lt;/driver&gt;
&lt;/drivers&gt;
            </programlisting>
          <para>Change the lines to the following:</para>
          <programlisting>
&lt;datasource jndi-name="java:jboss/datasources/jbpmDS" pool-name="MySQLDS" enabled="true" use-java-context="true"&gt;
    &lt;connection-url&gt;<emphasis role="bold">jdbc:mysql://localhost:3306/jbpm</emphasis>&lt;/connection-url&gt;
    &lt;driver&gt;<emphasis role="bold">mysql</emphasis>&lt;/driver&gt;
    &lt;pool&gt;&lt;/pool&gt;
    &lt;security&gt;
       &lt;user-name&gt;<emphasis role="bold">jbpm</emphasis>&lt;/user-name&gt;
       &lt;password&gt;<emphasis role="bold">jbpm</emphasis>&lt;/password&gt;
    &lt;/security&gt;
&lt;/datasource&gt;
&lt;drivers&gt;
    &lt;driver name="<emphasis role="bold">mysql</emphasis>" module="<emphasis role="bold">com.mysql</emphasis>"&gt;
        &lt;xa-datasource-class&gt;<emphasis role="bold">com.mysql.jdbc.jdbc2.optional.MysqlXADataSource</emphasis>&lt;/xa-datasource-class&gt;
    &lt;/driver&gt;
&lt;/drivers&gt;
           </programlisting>
        </listitem><listitem>
          <para><filename>Starting the demo</filename></para>
          <para>We've modified all the necessary files at this point. Now would be a good time to make sure
          your database is started up as well!</para>
          <para>The installer script copies this file into the jbpm-console WAR before the WAR is installed
          on the server. If you have already run the installer, it is recommended to stop the installer and clean
          it first using <programlisting>ant stop.demo</programlisting> and <programlisting>ant clean.demo</programlisting>
          before continuing.</para>
          <para>Run <programlisting>ant install.demo</programlisting> to (re)install the wars and copy the
          necessary configuration files.  Once you've done that, (re)start the demo using 
          <programlisting>ant start.demo</programlisting>.</para>
        </listitem>
        <listitem>
          <para><filename>Problems?</filename></para>
          <para>If this isn't working for you, please try the following:
            <itemizedlist>
              <listitem>Please double check the files you've modified: I <emphasis>wrote</emphasis> this, but still made mistakes when changing files!</listitem>
              <listitem>Please make sure that you don't secretly have another (unmodified) instance of JBoss AS running.</listitem>
              <listitem>If neither of those work (and you're using MySQL), please do then let us know.</listitem>
            </itemizedlist>
          </para>
        </listitem>
      </itemizedlist></para>
    </section>
  
    <section>
      <title>Using a different database</title>
      
      <para>If you decide to use a different database with this demo, you need to remember 
      the following when going through the steps above:
        <itemizedlist>
          <listitem>Change the JDBC URLs, usernames and passwords, and Hibernate dialect lines 
          to match your database information in the configuration files mentioned above.</listitem>
          <listitem>In order to make sure your driver will be correctly installed in
          the JBoss AS 7 server, you can do one of two things. Both ways are explained 
          <link
  xlink:href="https://community.jboss.org/wiki/DataSourceConfigurationinAS7">here</link>.
            <itemizedlist>
              <listitem>
              <link
  xlink:href="https://community.jboss.org/wiki/DataSourceConfigurationinAS7#Installing_a_JDBC_driver_as_a_module">
              Install</link> the driver JAR as a <emphasis>module</emphasis>, which is what
              the install script does. 
              </listitem>
              <listitem><link
  xlink:href="https://community.jboss.org/wiki/DataSourceConfigurationinAS7#Installing_a_JDBC_driver_as_a_deployment">
                Otherwise, you can modify and install</link> the downloaded JAR as a <emphasis>deployment</emphasis>.
                In this case you will have to copy the JAR yourself to the <code>standalone/deployments</code>
                directory.
              </listitem>
            </itemizedlist>
          If you choose to install driver as JBoss module, please do the following:
            <itemizedlist>
              <listitem>Disable default H2 driver properties
                <programlisting>
# default is H2
# H2.version=1.3.168
# db.name=h2
# db.driver.jar.name=${db.name}.jar
# db.driver.download.url=http://repo1.maven.org/maven2/com/h2database/h2/${H2.version}/h2-${H2.version}.jar
                </programlisting>
              </listitem>
              <listitem>Copy one of the example configs (mysql or postgresql)
              <programlisting>
#postresql
db.name=postresql
db.driver.module.prefix=org/postgresql
db.driver.jar.name=${db.name}-jdbc.jar
db.driver.download.url=https://repository.jboss.org/nexus/content/repositories/thirdparty-uploads/postgresql/postgresql/9.1-902.jdbc4/postgresql-9.1-902.jdbc4.jar
              </programlisting>
              </listitem>
              <listitem>Change the <code>db.name</code> property in <code>build.properties</code>
              to the name of the downloaded jdbc driver JAR you placed in <code>db/drivers</code>.
              </listitem>
              <listitem>Change the <code>&lt;driver&gt;</code> information in
              the <code>&lt;datasource&gt;</code> section of <code>standalone.xml</code> so 
              that it refers to the name of your driver module (see next step). For example:
              <programlisting>&lt;driver&gt;<emphasis role="bold">postgresql</emphasis>&lt;/driver&gt;</programlisting>
              </listitem>
              <listitem>Further on in <code>standalone.xml</code> is the
              <code>&lt;drivers&gt;</code> section of the 
              <code>&lt;datasources&gt;</code> (note the plural: driver<emphasis>s</emphasis>, 
              datasource<emphasis>s</emphasis>). We need to do the following with this file:
              <itemizedlist>
                <listitem>Change the name of the driver to match the name in the last step,</listitem> 
                <listitem>Give an appropriate name to the module,</listitem>
                <listitem>And fill in the correct name of the XA datasource class to use.</listitem>
              </itemizedlist>
              For example:
              <programlisting>
&lt;drivers&gt;
  &lt;driver name="<emphasis role="bold">postgresql</emphasis>" module="<emphasis role="bold">org.postgresql</emphasis>"&gt;
      &lt;xa-datasource-class&gt;<emphasis role="bold">org.postgresql.xa.PGXADataSource</emphasis>&lt;/xa-datasource-class&gt;
  &lt;/driver&gt;
&lt;/drivers&gt;
              </programlisting>
              </listitem><listitem>Change the <code>db.driver.module.prefix</code> property 
              in <code>build.properties</code> to the same <quote>value</quote> you used for the module name
              in <code>standalone.xml</code>. In the example above, I used 
              <quote><code>org.postgresql</code></quote> which means that I should then use
              <code>org/postgresql</code> for the <code>db.driver.module.prefix</code> property.
              </listitem>
              <listitem>Lastly, you'll have to create the <code>db/${db.name}_module.xml</code>
              file. As an example you can use db/mysql_module.xml, so just make a copy of it and:
              <itemizedlist>
                <listitem>Change the name of the <emphasis>module</emphasis> to match the 
                          <code>db.driver.module.prefix</code> property above</listitem>
                <listitem>Change the name of the module resource to the name of the JDBC driver 
                          JAR that was downloaded.</listitem>
              </itemizedlist>
              The top of the original file looks like this: 
              <programlisting>&lt;module xmlns="urn:jboss:module:1.0" name="com.mysql"&gt;
   &lt;resources&gt;
     &lt;resource-root path="mysql-connector-java.jar"/&gt;
   &lt;/resources&gt;</programlisting>
              Change those lines to look like this, for example: 
              <programlisting>&lt;module xmlns="urn:jboss:module:1.0" name="<emphasis role="bold">org.postgresql</emphasis>"&gt;
   &lt;resources&gt;
     &lt;resource-root path="<emphasis role="bold">postgresql-9.1-902.jdbc4.jar</emphasis>"/&gt;
   &lt;/resources&gt;</programlisting>
              </listitem>
            </itemizedlist>
          </listitem>
        </itemizedlist>
      </para>
    </section>
  
  </section>

  <section>
    <title>jBPM data base schema scripts (DDL scripts)</title>

    <para>By default the demo setup makes use of Hibernate auto DDL generation capabilities to build up 
    the complete data base schema, including all tables, sequences, etc. This might not always be welcomed
    (by your database administrator) and thus the installer provides DDL scripts for most popular databases.
    </para>

    <table>
    <title>DDL scripts</title>
      <tgroup cols="2">jBPM DDL scripts for data bases
        <thead>
          <row>
            <entry>Data base name</entry>
            <entry>Location</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>db2</entry>
            <entry>jbpm-installer/db/ddl-scripts/db2</entry>
          </row>
        </tbody>
        <tbody>
          <row>
            <entry>derby</entry>
            <entry>jbpm-installer/db/ddl-scripts/derby</entry>
          </row>
        </tbody>
        <tbody>
          <row>
            <entry>h2</entry>
            <entry>jbpm-installer/db/ddl-scripts/h2</entry>
          </row>
        </tbody>
        <tbody>
          <row>
            <entry>hsqldb</entry>
            <entry>jbpm-installer/db/ddl-scripts/hsqldb</entry>
          </row>
        </tbody>
        <tbody>
          <row>
            <entry>mysql5</entry>
            <entry>jbpm-installer/db/ddl-scripts/mysql5</entry>
          </row>
        </tbody>
        <tbody>
          <row>
            <entry>mysqlinnodb</entry>
            <entry>jbpm-installer/db/ddl-scripts/mysqlinnodb</entry>
          </row>
        </tbody>
        <tbody>
          <row>
            <entry>oracle</entry>
            <entry>jbpm-installer/db/ddl-scripts/oracle</entry>
          </row>
        </tbody>
        <tbody>
          <row>
            <entry>postgresql</entry>
            <entry>jbpm-installer/db/ddl-scripts/postgresql</entry>
          </row>
        </tbody>
        <tbody>
          <row>
            <entry>sqlserver</entry>
            <entry>jbpm-installer/db/ddl-scripts/sqlserver</entry>
          </row>
        </tbody>
        <tbody>
          <row>
            <entry>sqlserver2008</entry>
            <entry>jbpm-installer/db/ddl-scripts/sqlserver2008</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>DDL scripts are provided for both jBPM and Quartz schemas although Quartz schema DDL script is only
    required when the timer service should be configured with Quartz database job store. See the section on timers
    for additional details.</para>

    <para>This can be used to initially create the database schema, but it can also serve as the basis for any\
    optimization that needs to be applied - such as indexes, etc.</para>

  </section>

  <section>
    <title>jBPM installer script</title>

    <para>jBPM installer ant script performs most of the work automatically and usually does not require additional
      attention but in case it does, here is a list of available targets that might be needed to perform some of the steps
      manually.</para>

    <table>
      <title>jBPM installer available targets</title>
      <tgroup cols="2">
        <thead>
          <row>
            <entry>Target</entry>
            <entry>Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>clean.db</entry>
            <entry>cleans up data base used by jBPM demo (applies only to H2 database)</entry>
          </row>
        </tbody>
        <tbody>
          <row>
            <entry>clean.demo</entry>
            <entry>cleans up entire installation so new installation can be performed</entry>
          </row>
        </tbody>
        <tbody>
          <row>
            <entry>clean.demo.noeclipse</entry>
            <entry>same as clean.demo but does not remove Eclipse</entry>
          </row>
        </tbody>
        <tbody>
          <row>
            <entry>clean.eclipse</entry>
            <entry>removes Eclipse and its workspace</entry>
          </row>
        </tbody>
        <tbody>
          <row>
            <entry>clean.generated.ddl</entry>
            <entry>removes DDL scripts generated if any</entry>
          </row>
        </tbody>
        <tbody>
          <row>
            <entry>clean.jboss</entry>
            <entry>removes application server with all its deployments</entry>
          </row>
        </tbody>
        <tbody>
          <row>
            <entry>clean.jboss.repository</entry>
            <entry>removes repository content for demo setup (guvnor Maven repo, niogit, etc)</entry>
          </row>
        </tbody>
        <tbody>
          <row>
            <entry>download.dashboard</entry>
            <entry>downloads jBPM dashboard component (BAM)</entry>
          </row>
        </tbody>
        <tbody>
          <row>
            <entry>download.db.driver</entry>
            <entry>downloads DB driver configured in build.properties</entry>
          </row>
        </tbody>
        <tbody>
          <row>
            <entry>download.ddl.dependencies</entry>
            <entry>downloads all dependencies required to run DDL script generation tool</entry>
          </row>
        </tbody>
        <tbody>
          <row>
            <entry>download.droolsjbpm.eclipse</entry>
            <entry>downloads Drools and jBPM Eclipse plugin</entry>
          </row>
        </tbody>
        <tbody>
          <row>
            <entry>download.eclipse</entry>
            <entry>downloads Eclipse distribution</entry>
          </row>
        </tbody>
        <tbody>
          <row>
            <entry>download.jboss</entry>
            <entry>downloads JBoss Application Server</entry>
          </row>
        </tbody>
        <tbody>
          <row>
            <entry>download.jBPM.bin</entry>
            <entry>downloads jBPM binary distribution (jBPM libs and its dependencies)</entry>
          </row>
        </tbody>
        <tbody>
          <row>
            <entry>download.jBPM.console</entry>
            <entry>downloads jBPM console for JBoss AS</entry>
          </row>
        </tbody>
        <tbody>
          <row>
            <entry>install.dashboard.into.jboss</entry>
            <entry>installs jBPM dashboard into JBoss AS</entry>
          </row>
        </tbody>
        <tbody>
          <row>
            <entry>install.db.files</entry>
            <entry>installs DB driver as JBoss module</entry>
          </row>
        </tbody>
        <tbody>
          <row>
            <entry>install.demo</entry>
            <entry>installs complete demo environment</entry>
          </row>
        </tbody>
        <tbody>
          <row>
            <entry>install.demo.eclipse</entry>
            <entry>installs Eclipse with all jBPM plugins, no server installation</entry>
          </row>
        </tbody>
        <tbody>
          <row>
            <entry>install.demo.noeclipse</entry>
            <entry>similar to install.demo but skips Eclipse installation</entry>
          </row>
        </tbody>
        <tbody>
          <row>
            <entry>install.dependencies</entry>
            <entry>installs custom libraries (such as work item handlers, etc) into the jBPM console</entry>
          </row>
        </tbody>
        <tbody>
          <row>
            <entry>install.droolsjbpm-eclipse.into.eclipse</entry>
            <entry>installs droolsjbpm Eclipse plugin into Eclipse</entry>
          </row>
        </tbody>
        <tbody>
          <row>
            <entry>install.eclipse</entry>
            <entry>install Eclipse IDE</entry>
          </row>
        </tbody>
        <tbody>
          <row>
            <entry>install.jboss</entry>
            <entry>installs JBoss AS</entry>
          </row>
        </tbody>
        <tbody>
          <row>
            <entry>install.jBPM-console.into.jboss</entry>
            <entry>installs jBPM console application into JBoss AS</entry>
          </row>
        </tbody>
      </tgroup>
      <tbody>
        <row>
          <entry>install.jBPM.runtime</entry>
          <entry>installs jBPM runtime libraries with their dependencies into jbpm-installer/runtime folder</entry>
        </row>
      </tbody>
      <tbody>
        <row>
          <entry>install.modeler.into.eclipse</entry>
          <entry>installs BPMN2 eclipse modeler into Eclipse</entry>
        </row>
      </tbody>
      <tbody>
        <row>
          <entry>jbpm.schemaexport</entry>
          <entry>generates DDL scripts for jBPM data base schema based on persistence.xml located in jbpm-installer/db</entry>
        </row>
      </tbody>
      <tbody>
        <row>
          <entry>remove.db.files</entry>
          <entry>removes DB driver module from JBoss AS</entry>
        </row>
      </tbody>
      <tbody>
        <row>
          <entry>start.demo</entry>
          <entry>starts complete demo environment including JBoss AS and Eclipse</entry>
        </row>
      </tbody>
      <tbody>
        <row>
          <entry>start.demo.eclipse</entry>
          <entry>starts Eclipse with demo setup</entry>
        </row>
      </tbody>
      <tbody>
        <row>
          <entry>start.demo.noeclipse</entry>
          <entry>starts demo with Jboss AS only (no Eclipse)</entry>
        </row>
      </tbody>
      <tbody>
        <row>
          <entry>start.h2</entry>
          <entry>starts H2 database server</entry>
        </row>
      </tbody>
      <tbody>
        <row>
          <entry>start.jboss</entry>
          <entry>starts JBoss AS</entry>
        </row>
      </tbody>
      <tbody>
        <row>
          <entry>stop.demo</entry>
          <entry>stops all components of the demo setup (JBoss AS, H2)</entry>
        </row>
      </tbody>
      <tbody>
        <row>
          <entry>stop.eclipse</entry>
          <entry>stops H2 server that is used by demo in Eclipse</entry>
        </row>
      </tbody>
      <tbody>
        <row>
          <entry>stop.h2</entry>
          <entry>stops H2 DB server</entry>
        </row>
      </tbody>
      <tbody>
        <row>
          <entry>stop.jboss</entry>
          <entry>stops JBoss AS</entry>
        </row>
      </tbody>
    </table>
  </section>    
</section>
