<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xml:id="releaseNotes_5.5.0.beta1" xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>What is New and Noteworthy in Drools 5.5.0.beta1</title>

  <section xml:id="releaseNotes_5.5.0.beta1_Expert">
    <title>Drools Expert</title>

    <section>
      <title>Grouped accessors for nested objects</title>

      <para>We already allow nested accessors to be used as follows, where address is the nested object:</para>

      <programlisting>Person( name == "mark", address.city == "london", address.country == "uk" )</programlisting>

      <para>Now these accessors to nested objects can be grouped with a '.(...)' syntax providing more readable rules as
      it follows:</para>

      <programlisting>Person( name==  "mark", address.( city == "london", country ==  "uk") )</programlisting>

      <para>Note the '.' prefix, this is necessary to differentiate the nested object constrtaints from a method
      call.</para>
    </section>

    <section>
      <title>Inline casts and coercion</title>

      <para>When dealing with nested objects, we may need to cast to a subtype. Now it is possible to do that via the #
      symbol as in:</para>

      <programlisting>Person( name=="mark", address#LongAddress.country == "uk" )</programlisting>

      <para>This example casts Address to LongAddress, making its getters available. If the cast is not possible
      (instanceof returns false), the evaluation will be considered false. Also fully qualified names are
      supported:</para>

      <programlisting>Person( name=="mark", address#org.domain.LongAddress.country == "uk" )</programlisting>

      <para>It is possible to use multiple inline casts in the same expression:</para>

      <programlisting>Person( name == "mark", address#LongAddress.country#DetailedCountry.population &gt; 10000000 )</programlisting>

      <para>moreover, since we also support the instanceof operator, if that is used we will infer its results for
      further uses of that field, within that pattern:</para>

      <programlisting>Person(  name=="mark", address instanceof LongAddress, address.country == "uk" )</programlisting>
    </section>

    <section>
      <title>Conditional named consequences</title>

      <para>Sometimes the constraint of having one single consequence for each rule can be somewhat limiting and leads
      to verbose and difficult to be maintained repetitions like in the following example:</para>

      <programlisting>rule "Give 10% discount to customers older than 60"
when
    $customer : Customer( age &gt; 60 )
then
    modify($customer) { setDiscount( 0.1 ) };
end

rule "Give free parking to customers older than 60"
when
    $customer : Customer( age &gt; 60 )
    $car : Car ( owner == $customer )
then
    modify($car) { setFreeParking( true ) };
end</programlisting>

      <para>It is already possible to partially overcome this problem by making the second rule extending the first one
      like in:</para>

      <programlisting>rule "Give 10% discount to customers older than 60"
when
    $customer : Customer( age &gt; 60 )
then
    modify($customer) { setDiscount( 0.1 ) };
end

rule "Give free parking to customers older than 60"
    extends "Give 10% discount to customers older than 60"
when
    $car : Car ( owner == $customer )
then
    modify($car) { setFreeParking( true ) };
end</programlisting>

      <para>Anyway this feature makes it possible to define more labelled consequences other than the default one in a
      single rule, so, for example, the 2 former rules can be compacted in only one like it follows:</para>

      <programlisting>rule "Give 10% discount and free parking to customers older than 60"
when
    $customer : Customer( age &gt; 60 )
    do[giveDiscount]
    $car : Car ( owner == $customer )
then
    modify($car) { setFreeParking( true ) };
then[giveDiscount]
    modify($customer) { setDiscount( 0.1 ) };
end</programlisting>

      <para>This last rule has 2 consequences, the usual default one, plus another one named "giveDiscount" that is
      activated, using the keyword do, as soon as a customer older than 60 is found in the knowledge base, regardless of
      the fact that he owns a car or not. The activation of a named consequence can be also guarded by an additional
      condition like in this further example:</para>

      <programlisting>rule "Give free parking to customers older than 60 and 10% discount to golden ones among them"
when
    $customer : Customer( age &gt; 60 )
    if ( type == "Golden" ) do[giveDiscount]
    $car : Car ( owner == $customer )
then
    modify($car) { setFreeParking( true ) };
then[giveDiscount]
    modify($customer) { setDiscount( 0.1 ) };
end</programlisting>

      <para>The condition in the if statement is always evaluated on the pattern immediately preceding it. In the end
      this last, a bit more complicated, example shows how it is possible to switch over different conditions using a
      nested if/else statement:</para>

      <programlisting>rule "Give free parking and 10% discount to over 60 Golden customer and 5% to Silver ones"
when
    $customer : Customer( age &gt; 60 )
    if ( type == "Golden" ) do[giveDiscount10]
    else if ( type == "Silver" ) break[giveDiscount5]
    $car : Car ( owner == $customer )
then
    modify($car) { setFreeParking( true ) };
then[giveDiscount10]
    modify($customer) { setDiscount( 0.1 ) };
then[giveDiscount5]
    modify($customer) { setDiscount( 0.05 ) };
end</programlisting>

      <para>Here the purpose is to give a 10% discount AND a free parking to Golden customers over 60, but only a 5%
      discount (without free parking) to the Silver ones. This result is achieved by activating the consequence named
      "giveDiscount5" using the keyword break instead of do. In fact do just schedules a consequence in the agenda,
      allowing the remaining part of the LHS to continue of being evaluated as per normal, while break also blocks any
      further pattern matching evaluation. Note, of course, that the activation of a named consequence not guarded by
      any condition with break doesn't make sense (and generates a compile time error) since otherwise the LHS part
      following it would be never reachable.</para>
    </section>
  </section>

  <section xml:id="releaseNotes_5.5.0.beta1_Fusion">
    <title>Drools Fusion</title>

    <section>
      <title>TODO</title>

      <para>TODO</para>
    </section>
  </section>

  <section xml:id="releaseNotes_5.5.0.beta1_Guvnor">
    <title>Guvnor</title>

    <section>
      <title>Improved consistency of BRL editor</title>

      <para>The Guided Rule Editor (BRL) has been made more consistent with the other editors in Guvnor.</para>

      <para>The left-hand side (WHEN) part of the rule is now authored in a similar manner to the right-hand side
      (THEN).</para>

      <itemizedlist>
        <listitem>
          <para>Additional popups for literal values have been removed</para>
        </listitem>

        <listitem>
          <para>Date selectors are consistent with Decision Tables and Rule Templates</para>
        </listitem>
      </itemizedlist>

      <figure>
        <title>Improved consistency</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="images/Chapter-Release_Notes/brl-consistency.png" format="PNG"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Exposure of non-Java Bean compliant class members</title>

      <para>In response to a request (https://issues.jboss.org/browse/GUVNOR-1756) to be able to build a rule that bound
      a variable to the size of a java.util.List we have now exposed model class members that do not adhere to the Java
      Bean conventions. i.e. you can now select model class members that are not "getXXX" or "setXXX".</para>

      <para>If you import a Java POJO model be prepared to see more members listed than you may have had
      previously.</para>

      <figure>
        <title>Additional members</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="images/Chapter-Release_Notes/brl-additional-members1.png" format="PNG"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>

      <figure>
        <title>An example rule</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="images/Chapter-Release_Notes/brl-additional-members2.png" format="PNG"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Valid indicator for assets</title>

      <para>A valid indicator has now been added to the asset lists as well as the asset editors. The indicator shows
      whether an asset is valid, invalid or if the validity of the asset is undetermined. For already existing assets
      the validity of the asset will remain undetermined until the next time either validation is run on the asset or
      the asset has been saved again.</para>

      <figure>
        <title>Indicator in asset list</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="images/Chapter-Release_Notes/valid_indicator.png" format="PNG"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>

      <figure>
        <title>Toolbar indicator</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="images/Chapter-Release_Notes/toolbar_valid_indicator.png" format="PNG"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Guided rule editor supports "entry-points" in Accumlates and Collects</title>

      <para>The guided rule editor now supports nesting entry-points in "from accumulate" and "from collect" constructs.
      Define a "from accumulate" or "from collect" in the usual manner and then choose "from entry-point" when defining
      the inner pattern. This feature is also available in Rule Templates and the guided web-based Decision Table's BRL
      fragment columns.</para>

      <figure>
        <title>Accumulate with entry-point</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center"
                       fileref="images/Chapter-Release_Notes/guided-editor-accumulate-from-entry-point.png" format="PNG"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Guided Decision Table receives an Audit Log</title>

      <para>An audit log has been added to the web-guided Decision Table editor to track additions, deletions and
      modifications.</para>

      <para>By default the audit log is not configured to record any events, however, users can easily select the events
      in which they are interested.</para>

      <para>The audit log is persisted whenever the asset is checked in.</para>

      <figure>
        <title>An empty audit log</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="images/Chapter-Release_Notes/audit-log1.png" format="PNG"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>

      <para>Once the capture of events has been enabled all susbsequent operations are recorded. Users are able to
      perform the following:-</para>

      <itemizedlist>
        <listitem>
          <para>Record an explanatory note beside each event.</para>
        </listitem>

        <listitem>
          <para>Delete an event from the log. Event details remain in the underlying repository.</para>
        </listitem>
      </itemizedlist>

      <figure>
        <title>Example of audit events</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="images/Chapter-Release_Notes/audit-log2.png" format="PNG"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Simulation Testing (unfinished prototype)</title>

      <para>Simulation testing allows you to test a sequence of events in Guvnor. This is very usefull for testing CEP
      use cases.</para>

      <para>The example below shows a testcase that calls <literal>fireAllRules</literal> twice: once after a little
      over 3 seconds and once after a little over 5 seconds:</para>

      <figure>
        <title>Prototype of the simulation testing GUI</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="images/Chapter-Release_Notes/simulation-testing1.png" format="PNG"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>

      <para>Each simulation consists out of a number of paths: in the example above there is only 1 path. Each path
      consists out of number of steps: in the example above there are 3 steps. Notice how the timeline overview shows
      the steps and their relative time distance. The timeline can zoom in and out.</para>

      <para>Each step consist out of a number of actions: in the example above, the second step at 3 seconds does 2
      actions: fire all rules and data assertion. Actions, steps and paths can be added, moved and removed as
      needed.</para>

      <para>For more information, take a look at <link
      xlink:href="http://blog.athico.com/2012/08/simulation-testing-in-guvnor-first.html">the simulation testing
      video</link>. A simulation test asset stored in 5.5.0.Beta1 will not be readable in 5.5.0.Beta2. Feedback is
      welcome.</para>
    </section>
  </section>

  <section xml:id="releaseNotes_5.5.0.beta1_Planner">
    <title>Planner</title>

    <section>
      <title>New selector architecture</title>

      <para>The new selector architecture is far more flexible and powerful. It works great out-of-the-box, but it can
      also be easily tailored to your use case for additional gain.</para>

      <programlisting language="xml">    &lt;unionMoveSelector&gt;
      &lt;cacheType&gt;JUST_IN_TIME&lt;/cacheType&gt;
      &lt;selectionOrder&gt;RANDOM&lt;/selectionOrder&gt;
      &lt;changeMoveSelector/&gt;
      &lt;swapMoveSelector/&gt;
      ...
    &lt;/unionMoveSelector&gt;</programlisting>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Release_Notes/selectorTree.png"></imagedata>
        </imageobject>
      </mediaobject>

      <para>Custom move factories are often no longer needed (but still supported). For now, the new selector
      architecture is only applied on local search (tabu search, simulated annealing, ...), but it will be applied on
      construction heuristics too.</para>
    </section>

    <section>
      <title>Highly scalable planning with Just In Time random selection</title>

      <para>The new selector architecture allows for Just In Time random selection. For very large use cases, this
      configuration uses far <emphasis role="bold">less memory</emphasis> and is several times <emphasis
      role="bold">faster in performance</emphasis> than the older configurations. Every move is generated just in time
      and there's no move list that needs shuffling:</para>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Release_Notes/jitRandomSelection.png"></imagedata>
        </imageobject>
      </mediaobject>
    </section>

    <section>
      <title>Filtered selection</title>

      <para>Filtered selection allows you to discard specific moves easily, such as a pointless move that swaps 2
      lectures of the same course:</para>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Release_Notes/filteredSelection.png"></imagedata>
        </imageobject>
      </mediaobject>
    </section>

    <section>
      <title>Probability selection</title>

      <para>Probability selection allows you to favor certain moves more than others.</para>
    </section>

    <section>
      <title>Richer benchmarker report</title>

      <para>The benchmarker report has been improved, both visually:</para>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Release_Notes/benchmarkReportTwitterBootstrap.png"></imagedata>
        </imageobject>
      </mediaobject>

      <para>... and in content:</para>

      <itemizedlist>
        <listitem>
          <para>Worst score difference percentage graph/table</para>
        </listitem>

        <listitem>
          <para>Each graph now has a table with the data too. This is especially useful for matrix benchmarks and the
          graphs become cluttered.</para>
        </listitem>

        <listitem>
          <para>Solver configuration is shown in the report</para>
        </listitem>

        <listitem>
          <para>General benchmark information (such as warm up time) is now also recorded</para>
        </listitem>

        <listitem>
          <para>The favorite solver configuration is clearly marked</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Matrix benchmarking and parallel benchmarking (thanks to Lukas Petrovicky)</title>

      <para>The benchmarker now supports matrix benchmarking based on a template, which allows you to benchmark a
      combination of ranges of values easily.</para>

      <para>And if you have multiple CPU's in your computer, the benchmarker can now take advantage of them thanks to
      parallel benchmarking.</para>
    </section>

    <section>
      <title>Improved continuous planning with movableEntitySelectionFilter (AKA entity locking)</title>

      <para>It's now possible to prevent a planning entity from being changed at all. This is very useful for continuous
      planning where last week's entities shouldn't change.</para>

      <programlisting>@PlanningEntity(movableEntitySelectionFilter = MovableShiftAssignmentSelectionFilter.class)
public class ShiftAssignment {
    ...
}</programlisting>
    </section>

    <section>
      <title>Late acceptance</title>

      <para>There's a new local search algorithm: late acceptance.</para>
    </section>
  </section>

  <section xml:id="releaseNotes_5.5.0.beta1_Eclipse">
    <title>Eclipse plugin</title>

    <section>
      <title>TODO</title>

      <para>TODO</para>
    </section>
  </section>

  <section xml:id="releaseNotes_5.5.0.beta1_Drools Integration">
    <title>Drools Integration</title>

    <section>
      <title>Environment Definition</title>

      <para>drools-spring module now supports declarative definition of Enviornment (org.drools.runtime.Environment)
      <programlisting>
&lt;drools:environment id="..."&gt;
  &lt;drools:entity-manager-factory ref=".."/&gt;
  &lt;drools:transaction-manager ref=".."/&gt;
  &lt;drools:globals ref=".."/&gt;
  &lt;drools:object-marshalling-strategies&gt;
    ...
  &lt;/drools:object-marshalling-strategies&gt;
  &lt;drools:scoped-entity-manager scope="app|cmd" ref="..."/&gt;
&lt;/drools:environment&gt;
        </programlisting></para>
    </section>

    <section>
       

      <title>Knowledge Loggers</title>

       Using Spring XML, you can configure the knowledge runtime loggers (console, file, threaded-file). 

      <para>
        <programlisting>
  &lt;drools:ksession id="k1" type="stateless" kbase="kbase1"&gt;
    &lt;drools:consoleLogger id=".."/&gt;
    &lt;drools:fileLogger file="..." threaded="true|false"/&gt;
  &lt;/drools:ksession&gt;
</programlisting>
      </para>

       
    </section>
  </section>
</section>
