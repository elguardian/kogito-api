<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0"
  xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
  xml:base="./../" xml:id="jBPMReleaseNotes620" xmlns="http://docbook.org/ns/docbook"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:ns="http://docbook.org/ns/docbook">
  <title>New and Noteworthy in jBPM 6.2.0</title>
  <para>The following features were added to the jBPM core on top of 6.1.</para>
  <section>
    <title>jBPM services</title>
    <para> jBPM services modules have been significantly refactored to provide clear separation
      between the logic they bring and various frameworks that can be used to consume those
      services. With version 6.2 following modules are available:</para>
    <para>
      <itemizedlist>
        <listitem>
          <para>jbpm-services-api - clear services api that shall be used by any client code that
            consumes services</para>
        </listitem>
        <listitem>
          <para>jbpm-kie-services - core implementation of the services that do not have any
            framework specific code (e.g. CDI)</para>
        </listitem>
        <listitem>
          <para>jbpm-services-cdi - CDI specific code on top of jbpm-kie-services</para>
        </listitem>
        <listitem>
          <para>jbpm-services-ejb-api - ejb related extensions to services api - mainly to provide
            remote capablities for the interfaces</para>
        </listitem>
        <listitem>
          <para>jbpm-services-ejb-impl - ejb specific code on top of jbpm-kie-services</para>
        </listitem>
        <listitem>
          <para>jbpm-services-ejb-client - ejb client implementation to interact with services over
            remote ejb invocation - currently JBoss specific implementation available</para>          
        </listitem>
      </itemizedlist>
    </para>
    <para>jBPM services are intended to be base of execution server (regardless of what framework is
      used to build it up completely) so should be considered as first choice when enbedding jbpm in
      custom applications. With 6.2 capabilities it already provides support for most common
      frameworks used - CDI, EJB, Spring (should simply rely on core implementation).</para>
  </section>
  <section>
    <title>Process engine extensions</title>
    <orderedlist>
      <listitem>
        <para>Lazy initialization of runtime engine components by RuntimeManager to make runtime
          engine creation lightweight </para>
        <para>RuntimeEngine has been enhanced to lazy initialize its components (KieSession,
          TaskService, AuditService) to improve overall performance of retriveing RuntimeEngine
          instances from RuntimeManager.</para>
      </listitem>
      <listitem>
        <para>Life cycle management for work item handlers and event listeners </para>
        <para>Handler and listeners can implement additional interface to be managed by runtime
          engine, see <link linkend="sec.workitemhandler.overview">work item handler life cycle management</link> for more
          details.</para>
      </listitem>
      <listitem>
        <para>Deployments are now by default stored in data base (as deployment descriptors) to
          servive server restarts</para>
        <para>Prior to verion 6.2 deployments that were handled by DeploymentService implementation
          were not persisted so they required to be handled separately - in case of kie-workbench
          they were stored inside system.git repo. With version 6.2 deployment service will persist
          that information directly into db which will make it easier in many cases including
          clustering as it will not require VFS clustering (Zookeeper and Helix) setup.</para>
      </listitem>
      <listitem>
        <para>Extension to deployment descriptor to specify classes (by FQCN) that should be added
          to JAXB context for remote interfaces interaction </para>
        <para>Deployment descriptor accept new set of elements </para>
        <para>
          <programlisting>&lt;remoteable-classes>
   ...
   &lt;remotable-class>org.jbpm.test.CustomClass&lt;/remotable-class>
   ...
&lt;/remoteable-classes></programlisting>
        </para>
      </listitem>
      <listitem>
        <para>Classpath scanning for classes to be included in JAXB context for remote interfaces
          interaction</para>
        <para>Classes annotated with javax.xml.bind.annotation.XmlRootElement and
          org.kie.api.remote.Remotable will be automatically added to JAXB context of given
          deployment as soon as they are defined as project dependency. At the same time all classes
          included in project itself are also added to deployment's JAXB context.</para>
      </listitem>
    </orderedlist>
    <para>
    </para>
  </section>
  <section>
    <title>OSGi</title>
    <para>While a number of core jars were OSGi-ready (in v5 already), a significant number
    of additional jars were now added to this list, including for example the human task
    service, the runtime managers, full persistence, etc.  As a result, full core engine
    functionality is now available on top of OSGi.  Specific extensions and tests showing
    it in action are available for Apache Karaf and Aries Blueprint (in the droolsjbpm-integration
    repository).   
    </para>
  </section>
  <section>
    <title>Camel handler</title>
    <para>A new out-of-the-box service task has been implemented for using Apache Camel
    to connect a process to the outside world using some of the numerous Camel endpoint URIs.
    The service task allows you to for example specify how to pass data to an FTP endpoint
    by configuring properties such as hostname, port, username, payload, etc. for some
    common endpoints like (S)FTP, File, JMS, XSLT, etc. but you can use virtually any of the
    available endpoints by defining the URI yourself (http://camel.apache.org/uris.html).      
    </para>
  </section>
  <section>
    <title>Form Modeler improvements</title>
    <para>
      <para>Support for JavaScript code:</para>
      <itemizedlist>
        <listitem>
          <para>Added field property on simple fields to allow the user to add JavaScript code on the onchange event.
            This will allow the user to add richer functionallities on the forms.</para>
        </listitem>
        <listitem>
          <para>Simplified the autogenerated field id's in order to allow the user to access the inputs directly via
            JavaScript.</para>
        </listitem>
      </itemizedlist>
    </para>
    <para>
      <para>New field types:</para>
      <itemizedlist>
        <listitem>
          <para>Added configurable ComboBox and RadioGroup fields. This new fields types allow the user to add ComboBoxes
            and Radio Button groups selecting their data source from the list of the Sources registered on the application.</para>
        </listitem>
        <listitem>
          <para>Added support to simple types Lists (java.util.List&lt;String&gt;, java.util.List&lt;Integer&gt;,
            java.util.List&lt;Long&gt;...). This fields allow the user to upload multiple basic values (strings, numbers,
            dates and booleans) storing them on java.util.List</para>
        </listitem>
      </itemizedlist>
    </para>
  </section>
</section>
