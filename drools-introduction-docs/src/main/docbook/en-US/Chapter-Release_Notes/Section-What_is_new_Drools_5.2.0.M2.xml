<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>What is New and Noteworthy in Drools 5.2.0.M2</title>

  <section>
    <title>Maven artifactId changes</title>

    <para>A couple of maven artifacts (jars, wars, ...) have been renamed so
    it is more clear what they do. Below is the list of the GAV changes,
    adjust your <literal>pom.xml</literal> files accordingly when upgrading to
    the new version.</para>

    <table>
      <title>Maven GAV changes overview</title>

      <tgroup cols="4">
        <thead>
          <row>
            <entry align="center">Old groupId</entry>

            <entry align="center">Old artifactId</entry>

            <entry align="center">New groupId</entry>

            <entry align="center">New artifactId</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry>org.drools</entry>

            <entry>drools (the parent pom)</entry>

            <entry>org.drools</entry>

            <entry>droolsjbpm-parent</entry>
          </row>

          <row>
            <entry>org.drools</entry>

            <entry><emphasis role="bold">drools-api</emphasis></entry>

            <entry>org.drools</entry>

            <entry><emphasis role="bold">knowledge-api</emphasis></entry>
          </row>

          <row>
            <entry>org.drools</entry>

            <entry>drools-docs-introduction</entry>

            <entry>org.drools</entry>

            <entry>drools-introduction-docs</entry>
          </row>

          <row>
            <entry>org.drools</entry>

            <entry>drools-examples-drl</entry>

            <entry>org.drools</entry>

            <entry>drools-examples</entry>
          </row>

          <row>
            <entry>org.drools</entry>

            <entry>drools-examples-fusion / drools-examples-drl (jBPM using
            parts)</entry>

            <entry>org.drools</entry>

            <entry>droolsjbpm-integration-examples</entry>
          </row>

          <row>
            <entry>org.drools</entry>

            <entry>drools-docs-expert</entry>

            <entry>org.drools</entry>

            <entry>droolsjbpm-expert-docs</entry>
          </row>

          <row>
            <entry>org.drools</entry>

            <entry>drools-docs-fusion</entry>

            <entry>org.drools</entry>

            <entry>droolsjbpm-fusion-docs</entry>
          </row>

          <row>
            <entry>org.drools</entry>

            <entry><emphasis role="bold">drools-repository</emphasis></entry>

            <entry>org.drools</entry>

            <entry><emphasis role="bold">guvnor-repository</emphasis></entry>
          </row>

          <row>
            <entry>org.drools</entry>

            <entry><emphasis role="bold">drools-ide-common</emphasis></entry>

            <entry>org.drools</entry>

            <entry><emphasis
            role="bold">droolsjbpm-ide-common</emphasis></entry>
          </row>

          <row>
            <entry>org.drools</entry>

            <entry><emphasis role="bold">drools-guvnor</emphasis></entry>

            <entry>org.drools</entry>

            <entry><emphasis role="bold">guvnor-webapp</emphasis></entry>
          </row>

          <row>
            <entry>org.jboss.drools.guvnor.tools</entry>

            <entry>guvnor-importer</entry>

            <entry>org.drools</entry>

            <entry>guvnor-bulk-importer</entry>
          </row>

          <row>
            <entry>org.drools</entry>

            <entry>drools-docs-guvnor</entry>

            <entry>org.drools</entry>

            <entry>guvnor-docs</entry>
          </row>

          <row>
            <entry>org.drools</entry>

            <entry><emphasis role="bold">drools-server</emphasis></entry>

            <entry>org.drools</entry>

            <entry><emphasis
            role="bold">drools-camel-server</emphasis></entry>
          </row>

          <row>
            <entry>org.drools</entry>

            <entry>drools-docs-integration</entry>

            <entry>org.drools</entry>

            <entry>droolsjbpm-integration-docs</entry>
          </row>

          <row>
            <entry>org.drools</entry>

            <entry><emphasis role="bold">drools-flow-core</emphasis></entry>

            <entry>TODO</entry>

            <entry>TODO</entry>
          </row>

          <row>
            <entry>org.drools</entry>

            <entry><emphasis
            role="bold">drools-flow-compiler</emphasis></entry>

            <entry>TODO</entry>

            <entry>TODO</entry>
          </row>

          <row>
            <entry>org.drools</entry>

            <entry><emphasis
            role="bold">drools-flow-persistence-jpa</emphasis></entry>

            <entry>TODO</entry>

            <entry>TODO</entry>
          </row>

          <row>
            <entry>org.drools</entry>

            <entry>drools-docs-flow</entry>

            <entry>TODO</entry>

            <entry>TODO</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>For example: before, in your <literal>pom.xml</literal> files, you
    declared <literal>drools-api</literal> like this:</para>

    <programlisting>  &lt;dependency&gt;
    &lt;groupId&gt;org.drools&lt;/groupId&gt;
    &lt;artifactId&gt;drools-api&lt;/artifactId&gt;
    ...
  &lt;/dependency&gt;</programlisting>

    <para>And now, afterwards, in your <literal>pom.xml</literal> files, you
    declare <literal>knowledge-api</literal> like this instead:</para>

    <programlisting>  &lt;dependency&gt;
    &lt;groupId&gt;org.drools&lt;/groupId&gt;
    &lt;artifactId&gt;knowledge-api&lt;/artifactId&gt;
    ...
  &lt;/dependency&gt;</programlisting>
  </section>

  <section>
    <title>Knowledge API (renamed from Drools API)</title>

    <section>
      <title>Core</title>

      <para>drools.dialect.mvel.strict = &lt;true|false&gt;The MVEL dialect
      has been improved. We have moved all variable lookups to the new indexed
      factories, which should allow faster execution, as well as being simpler
      code. The build process for mvel has been reviewed to streamline it to
      avoid wasteless object creation so that the build time is faster. We
      still have some more improvements on this to share the
      ParserConfiguration which will make each MVEL compilation unit faster to
      initalise and use less memory, as they will share import information for
      each package.</para>

      <para>It was always possible to execute with MVEL in both dynamic and
      strict mode, with strict mode for static type safety the default. This
      is configurable via the MVEL dialect configuration:</para>

      <para>drools.dialect.mvel.strict = &lt;true|false&gt;</para>

      <para>However there were some places in execution when strict mode was
      not enforced. Effort has now been done to ensure that type safety is
      enforced through out, unless "strict == false". This means that some bad
      code that compiled before may not compile now, because it is not type
      safe. For those cases where the type safety cannot be achieved at
      compile time we added the @typeSafe annotation, discussed in it's own
      section.</para>
    </section>
  </section>

  <section>
    <title>Drools Expert and Fusion</title>

    <section>
      <title>Free Form expressions in Constraints (New Parser)</title>

      <para>The parser has been rewritten. We had reached the limitations of
      what we could achieve in pure ANTLR and moved to a hybrid parser, that
      adds flexibility to the language. </para>

      <para>The main benefit with the new parser is that the language now
      support free form expressions for constraints and 'from' statements. So
      complex expressions on nested accessors, method calls etc should now all
      be possible as simple constraints without wrapping them with an
      eval(.....). This was also important for us to start to move towards a
      single consistent grammer for both the "when" left hand side and "then"
      right hand side. As previously we had to document the restricted
      limitations of a field constraint on the LHS compared to expressions
      used inside of an 'eval' or used on the RHS. Complex expressions are
      still internally rewritten as evals, so it's just syntacic sugar.</para>

      <para>Examples:</para>

      <programlisting>Person( age * 2 &gt; $anotherPersonsAge + 2 ) // mathematical expressions
Person( addresses["home"].streetName.startsWith( "High Park" ) ) // method calls and collections simplified syntax
Person( isAdult() ) // boolean expression without relational operator</programlisting>

      <para>The new parser also support free form expressions on the "from"
      clause, allowing for instance, new syntaxes, like inline creation for
      lists:</para>

      <programlisting>Cheese( ) from [ $stilton, $brie, $provolone ] // inline list creation and iteration
</programlisting>
    </section>

    <section>
      <title>Rule API</title>

      <para>A fluent API was created to allow programatic creation of rules as
      an alternative to the previously suggested method of template
      creation.</para>

      <programlisting>PackageDescr pkg = DescrFactory.newPackage()
                   .name("org.drools.example")
                   .newRule().name("Xyz")
                       .attribute("ruleflow-grou","bla")
                   .lhs()
                       .and()
                           .pattern("Foo").id("$foo").constraint("bar==baz").constraint("x&gt;y").end()
                           .not().pattern("Bar").constraint("a+b==c").end()
                       .end()
                   .end()
                   .rhs( "System.out.println();" )
                   .end();
</programlisting>
    </section>

    <section>
      <title>Positional Arguments</title>

      <para>Patterns now support positional arguments on type
      declarations.</para>

      <para>Positional arguments are ones where you don't need to specify the
      field name, as the position maps to a known named field. i.e. Person(
      name == "mark" ) can be rewritten as Person( "mark"; ). The semi colon
      ';' is important so that the engine knows that everything before it is a
      positional argument. Otherwise we might assume it was a boolean
      expression, which is how it could be interpretted after the semi colon.
      You can mix positional and named arguments on a pattern by using the
      semi colon ';' to separate them. Any variables used in a positional that
      have not yet been bound will be bound to the field that maps to that
      position.</para>

      <programlisting>declare Cheese
    name : String
    shop : String
    price : int
end
</programlisting>

      <para>Example patterns, with two constraints and a binding. Remember
      semi colon ';' is used to differentiate the positional section from the
      named argument section.</para>

      <programlisting>
Cheese( "stilton", "Cheese Shop", p; )
Cheese( "stilton", "Cheese Shop"; p : price )
Cheese( "stilton"; shop == "Cheese Shop", p : price )
Cheese( name == "stilton"; shop == "Cheese Shop", p : price )
</programlisting>
    </section>

    <section>
      <title>Backward Chaining</title>

      <para>Drools now provides Prolog style derivation queries, as an
      experimental feature. What this means is that a query or the 'when' part
      of a rule may call a query, via a query element. This is also recursive
      so that a query may call itself. A query element must be prefixed with a
      question mark '?' which indicuates that we have a pattern construct that
      will pull data, rather than the normal reactive push nature of
      patterns.</para>

      <para>A key aspect of BC is unification. This is where a query parameter
      may be bound or unbound, when unbound it is considered an output
      variable and will bind to each found value.</para>

      <para>In the example below x and y are parameters. Unification is done
      by subsequent bindings inside of patterns. If a value for x is passed
      in, it's as though the pattern says "thing == x". If a value for x is
      not passed in it's as though "x: thing" and x will be bound to each
      found thing.</para>

      <programlisting>declare Location
    thing : String 
    location : String 
end

query isContainedIn( String x, String y ) 
    Location( x : thing, y : location)
    or 
    ( Location(z : thing, y : location) and ?isContainedIn(x : thing, z : location) )
end
</programlisting>

      <para>Positional and mixed positional/named are supported.</para>

      <programlisting>declare Location
    thing : String 
    location : String 
end

query isContainedIn( String x, String y ) 
    Location(x, y;)
    or 
    ( Location(z, y;) and ?isContainedIn(x, z;) )
end
</programlisting>

      <para>Here is an example of query element inside of a rule using mixed
      positional/named arguments.</para>

      <programlisting>query whereFood( String thing, String location ) 
    ( Location(thing, location;) and
      Edible(thing;) )
     or 
    ( Location(thing, location;) and
      TastesYucky(thing;) ) 
end

query look(String place, List things, List food, List exits) 
    Here(place;)
    things : List() from accumulate( Location(thing, place;),
                                    collectList( thing ) )
    food : List() from accumulate( ?whereFood(thing, place;) ,                                    
                                   collectList( thing ) )
    exits : List() from accumulate( ?connect(place, exit;),
                                    collectList( exit ) )
end

rule reactiveLook when
    Here( place : place) 
    ?look($place, $things; $food : food, $exits : exits)
then
    System.out.println( "You are in the " + $place);
    System.out.println( "  You can see " + $things );
    System.out.println( "  You can eat " + $food );
    System.out.println( "  You can go to " + $exits );
end
</programlisting>

      <para>Literal expressions can passed as query arguments, but at this
      stage you cannot mix expressions with variables.</para>

      <para>The other aspect to be aware of is that the implementation still
      executes with method recursion, so deeply recursive queries may have
      problems. Work is underway to an alternative algorithm that resolves
      this issue.</para>
    </section>

    <section>
      <title>Non Typesafe Classes</title>

      <para>@type( &lt;boolean&gt;) has been added to type declarations. This
      allows patterns with that annotation to be compiled without any static
      compile time checks. All constrants are generated as MVEL constraints
      and executed dynamially. This can be important when dealing with
      collections that do not have any generics or mixed type
      collections.</para>
    </section>

    <section>
      <title>Session Reports</title>

      <para>Added framework to inspect a session and generate a report, either
      based on a predefined template or with a user created template.</para>

      <programlisting>// Creates an inspector
SessionInspector inspector = new SessionInspector( ksession );
// Collects the session info
StatefulKnowledgeSessionInfo info = inspector.getSessionInfo();
// Generate a report using the "simple" report template
String report = SessionReporter.generateReport( "simple", info, null );
</programlisting>
    </section>

    <section>
      <title>Support to parameterized constructor on declared types</title>

      <para>Generate constructors with parameters for declared types.</para>

      <para>Example: for a declare type like the following:</para>

      <programlisting>declare Person
    firstName : String @key
    lastName : String @key
    age : int
end
</programlisting>

      <para>The compiler will implicitly generate 3 constructors: one without
      parameters, one with the @key fields, and one with all fields.</para>

      <programlisting>Person() // parameterless constructor
Person( String firstName, String lastName )
Person( String firstName, String lastName, int age )</programlisting>
    </section>
  </section>

  <section>
    <title>jBPM 5 (merged from Drools Fusion and jBPM 3-4)</title>

    <para>TODO</para>
  </section>

  <section>
    <title>Drools and jBPM integration</title>

    <section>
      <title>Improved Camel integration</title>

      <para>Camel integration using the Drools EndPoint was improved with the
      creation of both DroolsConsumer and DroolsProducer components.
      Configurations were added to support the insertion of either Camel's
      Exchange, Message or Body into the Drools session, allowing for the easy
      development of dynamic content based routing applications. Also, support
      to entry points was added.</para>

      <para>Examples of routes:</para>

      <programlisting>from( "direct:test-no-ep" ).to( "drools://node/ksession1?action=insertBody" );
from( "direct:test-with-ep" ).to( "drools://node/ksession1?action=insertBody&amp;entryPoint=ep1" );
from( "direct:test-message" ).to( "drools://node/ksession1?action=insertMessage" );
from( "direct:test-exchange" ).to( "drools://node/ksession1?action=insertExchange" );
</programlisting>
    </section>
  </section>

  <section>
    <title>Guvnor</title>

    <para>TODO</para>

    <section>
      <title>Decision Tables</title>

      <para>Further extension has been made to the decision table's
      featureset.</para>

      <section>
        <title>Negation of Fact patterns</title>

        <para>Fact Patterns in condition columns can be negated to match when
        the defined pattern does not exist in WorkingMemory. In essence it is
        now possible to construct rules within the decision table equivalent
        to the following DRL fragment:-</para>

        <programlisting>not Cheese( name == "Cheddar" ) </programlisting>

        <figure>
          <title>Negation of Fact Patterns</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center"
                         fileref="images/Chapter-Release_Notes/negate-fact-pattern.png"
                         format="PNG" scalefit="1"></imagedata>
            </imageobject>
          </mediaobject>
        </figure>
      </section>

      <section>
        <title>Negation of rules</title>

        <para>Entire rules can be negated, giving rise to DRL fragements such
        as:-</para>

        <programlisting>rule "no cheddar liked by Fred"
  when
    not (
      $c : Cheese( name == "Cheddar" )
      Person( name == "Fred", favouriteCheese == $c )
    )
  then
    ..
end
 </programlisting>

        <figure>
          <title>Negation of rules</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center"
                         fileref="images/Chapter-Release_Notes/negate-rule-option.png"
                         format="PNG" scalefit="1"></imagedata>
            </imageobject>
          </mediaobject>

          <mediaobject>
            <imageobject>
              <imagedata align="center"
                         fileref="images/Chapter-Release_Notes/negate-rule.png"
                         format="PNG" scalefit="1"></imagedata>
            </imageobject>
          </mediaobject>
        </figure>
      </section>

      <section>
        <title>Support for "otherwise"</title>

        <para>Condition columns containing literal values that use the
        equality (==, equal to) or inequality (!=, not equal to) operators can
        now contain a meta-value for "otherwise" which represents all other
        values not explicitly defined in the column. This feature gives rise
        to DRL fragments such as the following:-</para>

        <programlisting>#from row number: 1
rule "Row 1 dtable"
  salience 1
  dialect "mvel"
when
  $p : Person( name == "Bill" , age != "30" )
then
  $p.setAge( 12345 );
end

#from row number: 2
rule "Row 2 dtable"
  salience 2
  dialect "mvel"
when
  $p : Person( name == "Ben" , age in ( "30", "40", "50" ) )
then
  $p.setAge( 12345 );
end

#from row number: 3
rule "Row 3 dtable"
  salience 3
  dialect "mvel"
when
  $p : Person( name == "Weed" , age != "40" )
then
  $p.setAge( 12345 );
end

#from row number: 4
rule "Row 4 dtable"
  salience 4
  dialect "mvel"
when
  $p : Person( name not in ( "Bill", "Ben", "Weed" ) , age != "50" )
then
  $p.setAge( 12345 );
end</programlisting>

        <figure>
          <title>Support for "otherwise"</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center"
                         fileref="images/Chapter-Release_Notes/otherwise.png"
                         format="PNG" scalefit="1"></imagedata>
            </imageobject>
          </mediaobject>
        </figure>
      </section>
    </section>
  </section>
</section>
