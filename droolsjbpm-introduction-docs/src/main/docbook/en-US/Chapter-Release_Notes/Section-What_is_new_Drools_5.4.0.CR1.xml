<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xmlns="http://docbook.org/ns/docbook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:ns="http://docbook.org/ns/docbook">
  <title>What is New and Noteworthy in Drools 5.4.0.CR1</title>

  <section>
    <title>Drools Expert</title>

    <section>
      <title>Decision Tables support "timer" and "calendar" attributes</title>

      <para>Support has been added for the "timer" and "calendar" attributes.</para>

      <table>
        <title>New attributes</title>

        <tgroup cols="3">
          <thead>
            <row>
              <entry>Keyword</entry>

              <entry>Initial</entry>

              <entry>Value</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>TIMER</entry>

              <entry>T</entry>

              <entry>A timer definition. See "Timers and Calendars".</entry>
            </row>

            <row>
              <entry>CALENDARS</entry>

              <entry>E</entry>

              <entry>A calendars definition. See "Timers and Calendars".</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>

    <section>
      <title>KnowledgeBuilder supports building of cross referencing drl files</title>

      <para>KnowledgeBuilder has a new batch mode, with a fluent interface, that allows to build multiple drls at once
      as in the following example:</para>

      <programlisting>KnowledgeBuilder kbuilder = KnowledgeBuilderFactory.newKnowledgeBuilder();
      kbuilder.batch()
      .add(ResourceFactory.newByteArrayResource(rules1.getBytes()), ResourceType.DRL)
      .add(ResourceFactory.newByteArrayResource(rules2.getBytes()), ResourceType.DRL)
      .add(ResourceFactory.newByteArrayResource(declarations.getBytes()), ResourceType.DRL)
      .build();</programlisting>

      <para>In this way it is no longer necessary to build the drls files in the right order (e.g. first the drls
      containing the type declarations and then the ones with the rules using them) and it will also be possible to have
      circular references among them.</para>

      <para>Moreover the KnowledgeBuilder (regardless if you are using the batch mode or not) also allows to discard
      what has been added with the last drl(s) building. This can be useful to recover from wrong drl as it
      follows</para>

      <programlisting>kbuilder.add(ResourceFactory.newByteArrayResource(wrongDrl.getBytes()), ResourceType.DRL);
      if ( kbuilder.hasErrors() ) {
      kbuilder.undo();
      }</programlisting>
    </section>

    <section>
      <title>Fluent simulation testing</title>

      <para>Using the new fluent simulation testing, you can test your rules in unit tests more easily:</para>

      <programlisting language="java">    @Test
    public void rejectMinors() {
        SimulationFluent simulationFluent = new DefaultSimulationFluent();

        Driver john = new Driver("John", "Smith", new LocalDate().minusYears(10));
        Car mini = new Car("MINI-01", CarType.SMALL, false, new BigDecimal("10000.00"));
        PolicyRequest johnMiniPolicyRequest = new PolicyRequest(john, mini);
        johnMiniPolicyRequest.addCoverageRequest(new CoverageRequest(CoverageType.COLLISION));
        johnMiniPolicyRequest.addCoverageRequest(new CoverageRequest(CoverageType.COMPREHENSIVE));


        simulationFluent
        .newKnowledgeBuilder()
            .add(ResourceFactory.newClassPathResource("org/drools/examples/carinsurance/rule/policyRequestApprovalRules.drl"),
                    ResourceType.DRL)
            .end()
        .newKnowledgeBase()
            .addKnowledgePackages()
            .end()
        .newStatefulKnowledgeSession()
            .insert(john).set("john")
            .insert(mini).set("mini")
            .insert(johnMiniPolicyRequest).set("johnMiniPolicyRequest")
            .fireAllRules()
            .test("johnMiniPolicyRequest.automaticallyRejected == true")
            .test("johnMiniPolicyRequest.rejectedMessageList.size() == 1")
            .end()
        .runSimulation();
    }</programlisting>

      <para>You can even test your CEP rules in unit tests without suffering from slow tests:</para>

      <programlisting language="java">    @Test
    public void lyingAboutAge() {
        SimulationFluent simulationFluent = new DefaultSimulationFluent();

        Driver realJohn = new Driver("John", "Smith", new LocalDate().minusYears(10));
        Car realMini = new Car("MINI-01", CarType.SMALL, false, new BigDecimal("10000.00"));
        PolicyRequest realJohnMiniPolicyRequest = new PolicyRequest(realJohn, realMini);
        realJohnMiniPolicyRequest.addCoverageRequest(new CoverageRequest(CoverageType.COLLISION));
        realJohnMiniPolicyRequest.addCoverageRequest(new CoverageRequest(CoverageType.COMPREHENSIVE));
        realJohnMiniPolicyRequest.setAutomaticallyRejected(true);
        realJohnMiniPolicyRequest.addRejectedMessage("Too young.");

        Driver fakeJohn = new Driver("John", "Smith", new LocalDate().minusYears(30));
        Car fakeMini = new Car("MINI-01", CarType.SMALL, false, new BigDecimal("10000.00"));
        PolicyRequest fakeJohnMiniPolicyRequest = new PolicyRequest(fakeJohn, fakeMini);
        fakeJohnMiniPolicyRequest.addCoverageRequest(new CoverageRequest(CoverageType.COLLISION));
        fakeJohnMiniPolicyRequest.addCoverageRequest(new CoverageRequest(CoverageType.COMPREHENSIVE));
        fakeJohnMiniPolicyRequest.setAutomaticallyRejected(false);


        simulationFluent
        .newStep(0)
        .newKnowledgeBuilder()
            .add(ResourceFactory.newClassPathResource("org/drools/examples/carinsurance/cep/policyRequestFraudDetectionRules.drl"),
                    ResourceType.DRL)
            .end()
        .newKnowledgeBase()
            .addKnowledgePackages()
            .end(World.ROOT, KnowledgeBase.class.getName())
        .newStatefulKnowledgeSession()
            .end()
        .newStep(1000)
        .getStatefulKnowledgeSession()
            .insert(realJohn).set("realJohn")
            .insert(realMini).set("realMini")
            .insert(realJohnMiniPolicyRequest).set("realJohnMiniPolicyRequest")
            .fireAllRules()
            .test("realJohnMiniPolicyRequest.requiresManualApproval == false")
            .end()
        .newStep(5000)
        .getStatefulKnowledgeSession()
            .insert(fakeJohn).set("fakeJohn")
            .insert(fakeMini).set("fakeMini")
            .insert(fakeJohnMiniPolicyRequest).set("fakeJohnMiniPolicyRequest")
            .fireAllRules()
            .test("fakeJohnMiniPolicyRequest.requiresManualApproval == true")
            .end()
        .runSimulation();
    }</programlisting>
    </section>
  </section>

  <section>
    <title>Guvnor</title>

    <section>
      <title>BRL editor supports "timer" and "calendar" attributes</title>

      <para>Support has been added for the "timer" and "calendar" attributes.</para>

      <figure>
        <title>Timer and Calendar</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="images/Chapter-Release_Notes/timerAndCalendarAttributes-guvnor-brl.png"
                       format="PNG"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Decision Tables support "timer" and "calendar" attributes</title>

      <para>Support has been added for the "timer" and "calendar" attributes.</para>

      <figure>
        <title>Timer and Calendar</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center"
                       fileref="images/Chapter-Release_Notes/timerAndCalendarAttributes-guvnor-dtable.png" format="PNG"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Guided Decision Tables import from XLS</title>

      <para>Uploading a XLS decision table results in the creation of numerous new assets, including (obviously)
      web-guided Decision Tables, functions, declarative types and modifications to package globals and imports etc
      (Queries are not converted, although supported in the XLS form, as Guvnor doesn't support them <link
      xlink:href="https://issues.jboss.org/browse/GUVNOR-1532">yet</link>).</para>

      <figure>
        <title>XLS decision table</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="images/Chapter-Release_Notes/dtable-xls.png" format="PNG"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>

      <figure>
        <title>Guided decision table</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="images/Chapter-Release_Notes/dtable-converted.png" format="PNG"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>

      <para>This is the first stage of "round-tripping" decision tables. We still need to add the ability to export a
      guided decision table back to XLS, plus we'd like to add tighter integration of updated XLS assets to their
      original converted cousins - so if a new version of the XLS decision table is uploaded the related assets'
      versions are updated (rather than creating new) upon conversion.</para>

      <para>This is a powerful enhancement and as such your feedback is critical to ensure we implement the feature as
      you'd like it to operate. Check it out, feedback your opinions and help guide the future work.</para>
    </section>

    <section>
      <title>Improved value editors for numerical types</title>

      <para>Numerical "value editors" (i.e. the text boxes for numerical values) in the BRL, Rule Template, Test
      Scenarios and Decision Table editors now support the types Byte, Short, Integer, Long, Double, Float, BigDecimal
      and BigInteger (and their primitive counterparts) correctly. The generated DRL is automatically appended with "B"
      or "I" type classifiers for BigDecimal and BigInteger values respectively, as provided for by Drools Expert. The
      Right-hand Side generates applicable DRL for BigDecimal and BigInteger values according to the rule's
      dialect.</para>

      <figure>
        <title>Example of using a BigDecimal</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="images/Chapter-Release_Notes/guvnor-numeric-value-editors.png"
                       format="PNG"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Improved dependent enumerations support</title>

      <para>Dependent enumerations can now be used in both the Web Guided Decision Table editor and the Rule Template
      Data grid. Furthermore improvements were made to the operation of dependent enumerations in the BRL Guided Rule
      editor for sub-fields and expressions.</para>

      <figure>
        <title>Dependent enumerations in the Web Guided Decision Table editor</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="images/Chapter-Release_Notes/dtable-dependent-enums.png" format="PNG"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>
    </section>
  </section>

  <section>
    <title>Planner</title>

    <section>
      <title>New example selection screen</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Release_Notes/plannerExamplesAppScreenshot.png"></imagedata>
        </imageobject>
      </mediaobject>
    </section>

    <section>
      <title>New example: TSP</title>

      <para>This is an implementation of the classic <emphasis>Traveling Salesman Problem</emphasis>: given a list of
      cities, find the shortest tour for a salesman that visits each city exactly once.</para>

      <para>See <link xlink:href="http://www.youtube.com/watch?v=T5D3hTjZlRc">this video</link>.</para>
    </section>

    <section>
      <title>New example: Vehicle Routing</title>

      <para>This is an implementation of capacitated vehicle routing: Using a fleet of vehicles, transport items from
      the depot(s) to customers at different locations. Each vehicle can service multiple locations, but it has a
      limited capacity for items.</para>

      <para>In the screenshot below, there are 6 vehicles (the lines in different colors) that drop off 541 items at 33
      customer locations. Each vehicle can carry 100 items.</para>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Release_Notes/vehicleRoutingScreenshot.png"></imagedata>
        </imageobject>
      </mediaobject>

      <para>See <link xlink:href="http://www.youtube.com/watch?v=GybpV0uLrxc">this video</link>.</para>
    </section>

    <section>
      <title>Employee rostering example: better GUI</title>

      <para>The employee rostering example's GUI has been reworked to show shift assignment more clearly.</para>

      <para>See <link xlink:href="http://www.youtube.com/watch?v=Gxd-DqtK5Xc">this video</link>.</para>
    </section>

    <section>
      <title>Chaining support makes it easy to implement TSP and Vehicle Routing</title>

      <para>Untill now, implementing TSP or Vehicle Routing like problems in Planner was hard. The new chaining support
      makes it easy.</para>

      <para>You simply declare that a planning variable (<literal>previousAppearance</literal>) of this planning entity
      (<literal>VrpCustomer</literal>) is chained and therefor possibly referencing another planning entity
      (<literal>VrpCustomer</literal>) itself, creating a chain with that entity.</para>

      <programlisting language="java">public class VrpCustomer implements VrpAppearance {

    ...

    @PlanningVariable(chained = true)
    @ValueRanges({
            @ValueRange(type = ValueRangeType.FROM_SOLUTION_PROPERTY, solutionProperty = "vehicleList"),
            @ValueRange(type = ValueRangeType.FROM_SOLUTION_PROPERTY, solutionProperty = "customerList",
                    excludeUninitializedPlanningEntity = true)})
    public VrpAppearance getPreviousAppearance() {
        return previousAppearance;
    }

    ...
}</programlisting>

      <para>This triggers automatic chain correction:</para>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Release_Notes/chainCorrection.png"></imagedata>
        </imageobject>
      </mediaobject>

      <para>Without any extra boilerplate code, this is compatible with:</para>

      <itemizedlist>
        <listitem>
          <para>Every optimization algorithm: including construction heuristics (first fit, first fit decreasing, ...),
          local search (tabu search, simmulated annealing), ...</para>
        </listitem>

        <listitem>
          <para>The generic build-in move factories. Note: currently there are chained alternatives for each move
          factory, but those will be unified with the originals soon.</para>
        </listitem>

        <listitem>
          <para>Repeated planning, including real-time planning</para>
        </listitem>
      </itemizedlist>

      <para>For more information, <link xlink:href="http://www.jboss.org/drools/documentation">read the Planner
      reference manual</link>.</para>
    </section>

    <section>
      <title>New Tabu Search implementation: planning value tabu</title>

      <para>Property tabu has been renamed to planning entity tabu. Planning value tabu has been added. The generic
      moves support this out-of-the-box.</para>

      <programlisting language="xml">    &lt;acceptor&gt;
      &lt;planningValueTabuSize&gt;5&lt;/planningValueTabuSize&gt;
    &lt;/acceptor&gt;</programlisting>
    </section>

    <section>
      <title>Quick start tutorial</title>

      <para>The documentation now has a new chapter <emphasis>Quick start tutorial</emphasis>. It explains how to write
      the CloudBalance example from scratch. <link xlink:href="http://www.jboss.org/drools/documentation">Read the
      Planner reference manual</link>.</para>
    </section>
  </section>
</section>
