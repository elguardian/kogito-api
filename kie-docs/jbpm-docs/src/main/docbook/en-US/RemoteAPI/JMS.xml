<?xml version="1.0" encoding="UTF-8"?>
 <section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xmlns="http://docbook.org/ns/docbook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:ns="http://docbook.org/ns/docbook">
  <title>JMS</title>
  <para>The Java Message Service (JMS) is an API that allows Java Enterprise components to
    communicate with each other asynchronously and reliably. </para>
  <para>Operations on the runtime engine and tasks can be done via the JMS API exposed by the jBPM
    console and KIE workbench. However, it's not possible to manage deployments or the knowledge
    base via this JMS API. </para>
   
  <para>Unlike the REST API, it is possible to send a batch of commands to the JMS API that will all be processed in one request
    after which the responses to the commands will be collected and return in one response message.</para>
   
  <section>
    <title>JMS Queue setup</title>
         
    <para>When the Workbench is deployed on the JBoss AS or EAP server, it automatically creates 3
      queues: <itemizedlist>
        <listitem>
          <para><code>jms/queue/KIE.SESSION</code></para>
        </listitem>
        <listitem>
          <para><code>jms/queue/KIE.TASK</code></para>
        </listitem>
        <listitem>
          <para><code>jms/queue/KIE.RESPONSE</code></para>
        </listitem>
      </itemizedlist> The <code>KIE.SESSION</code> and <code>KIE.TASK</code> queues should be used
      to send request messages to the JMS API. Command response messages will be then placed on the
        <code>KIE.RESPONSE</code> queues. Command request messages that involve starting and
      managing business processes should be sent to the <code>KIE.SESSION</code> and command request
      messages that involve managing human tasks, should be sent to the <code>KIE.TASK</code> queue. </para>
    <para>Although there are 2 different input queues, <code>KIE.SESSION</code> and <code>KIE.TASK</code>, this is only in order to provide multiple 
           input queues so as to optimize processing: command request messages will be processed in the same manner regardless of which queue they're sent to. 
           However, in some cases, users may send many more requests involving human tasks than requests involving business processes, but then not want the 
           processing of business process-related request messages to be delayed by the human task messages. By sending the appropriate command request 
           messages to the appropriate queues, this problem can be avoided.</para>
    <para>The term "<emphasis>command request message</emphasis>" used above refers to a JMS byte message that contains a serialized 
           <code>JaxbCommandsRequest</code> object. At the moment, only XML serialization (as opposed to, JSON or protobuf, for example) is supported. 
    </para>     
  </section>
  
  <section>
    <title>Using the remote Java API</title>
    
    <para>While it is possible to interact with a BPMS or KIE workbench server instance by sending and processing JMS messages that you create yourself, 
      <emphasis>it will always be easier to use the remote Java API</emphasis> that's supplied by the <code>kie-services-client</code> jar.</para>
     
    <para>For more information about how to use the remote Java API to interact with the JMS API of a server instance, see the
      <link linkend='remote.java.api.jms'>Remote Java API</link> section.</para>
  </section>

  <section>
    <title>Serialization issues</title>
    
      <para>The JMS API accepts <code>ByteMessage</code> instances that contain serialized
          <code>JaxbCommandsRequest</code> objects. These <code>JaxbCommandsRequest</code> instances
        can be filled with multiple command objects. In this way, it's possible to send a batch of
        commands for processing to the JMS API. </para>
    
    <para>When users wish to include their own classes with requests, there a number of requirements that must
      be met for the user-defined classes. For more information about these requirements, see the 
      <link linkend="remote.serialization.user.classes">Sending and receiving user class instances</link> section 
    in the REST API documentation.</para>
    
  </section>

   <section>
    <title>Example JMS usage</title>
    
    <para>The following is a rather long example that shows how to use the JMS API. The numbers ("callouts") along the side of the example
      refer to notes below that explain particular parts of the example. It's supplied for those advanced users that do not wish to use
      the jBPM Remote Java API.</para>
    
    <para>The jBPM Remote Java API, described here, will otherwise take care of all of the logic shown below.</para>
    
    <programlistingco>
      <areaspec>
        <areaset xml:id="jbpm.jms.imports">
          <area xml:id="jbpm.jms.imports.1" coords='8' />
        </areaset>
        <areaset xml:id="jbpm.jms.commands">
          <area xml:id="jbpm.jms.commands.1" coords='42' />
        </areaset>
        <areaset xml:id="jbpm.jms.msg.structure">
          <area xml:id="jbpm.jms.msg.structure.1" coords='130' />
          <area xml:id="jbpm.jms.msg.structure.2" coords='133' />
          <area xml:id="jbpm.jms.msg.structure.3" coords='134' />
          <area xml:id="jbpm.jms.msg.structure.4" coords='144' />
        </areaset>
        <areaset xml:id="jbpm.jms.response.serialization">
          <area xml:id="jbpm.jms.response.serialization.1" coords='175' />
        </areaset>
        <areaset xml:id="jbpm.jms.response.index">
          <area xml:id="jbpm.jms.response.index.1" coords='41' />
          <area xml:id="jbpm.jms.response.index.2" coords='44' />
          <area xml:id="jbpm.jms.response.index.3" coords='84' />
          <area xml:id="jbpm.jms.response.index.4" coords='86' />
        </areaset>
        <areaset xml:id="jbpm.jms.response.jaxb">        
          <area xml:id="jbpm.jms.response.jaxb.1" coords='77' />
          <area xml:id="jbpm.jms.response.jaxb.2" coords='85' />
          <area xml:id="jbpm.jms.response.jaxb.3" coords='87' />
        </areaset>
      </areaspec>
      <programlisting language="java"><![CDATA[// normal java imports skipped

import org.drools.core.command.runtime.process.StartProcessCommand;
import org.jbpm.services.task.commands.GetTaskAssignedAsPotentialOwnerCommand;
import org.kie.api.command.Command;
import org.kie.api.runtime.process.ProcessInstance;
import org.kie.api.task.model.TaskSummary;
import org.kie.services.client.api.command.exception.RemoteCommunicationException;
import org.kie.services.client.serialization.JaxbSerializationProvider;
import org.kie.services.client.serialization.SerializationConstants;
import org.kie.services.client.serialization.SerializationException;
import org.kie.services.client.serialization.jaxb.impl.JaxbCommandResponse;
import org.kie.services.client.serialization.jaxb.impl.JaxbCommandsRequest;
import org.kie.services.client.serialization.jaxb.impl.JaxbCommandsResponse;
import org.kie.services.client.serialization.jaxb.rest.JaxbExceptionResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class DocumentationJmsExamples {

  protected static final Logger logger = LoggerFactory.getLogger(DocumentationJmsExamples.class);

  public void sendAndReceiveJmsMessage() {

    String USER = "charlie";
    String PASSWORD = "ch0c0licious";

    String DEPLOYMENT_ID = "test-project";
    String PROCESS_ID_1 = "oompa-processing";
    URL serverUrl;
    try {
      serverUrl = new URL("http://localhost:8080/jbpm-console/");
    } catch (MalformedURLException murle) {
      logger.error("Malformed URL for the server instance!", murle); 
      return;
    }

    // Create JaxbCommandsRequest instance and add commands
    Command<?> cmd = new StartProcessCommand(PROCESS_ID_1);
    int oompaProcessingResultIndex = 0;
    JaxbCommandsRequest req = new JaxbCommandsRequest(DEPLOYMENT_ID, cmd);
    req.getCommands().add(new GetTaskAssignedAsPotentialOwnerCommand(USER, "en-UK"));
    int loompaMonitoringResultIndex = 1;

    // Get JNDI context from server
    InitialContext context = getRemoteJbossInitialContext(serverUrl, USER, PASSWORD);
      
    // Create JMS connection 
    ConnectionFactory connectionFactory;
    try {
      connectionFactory = (ConnectionFactory) context.lookup("jms/RemoteConnectionFactory");
    } catch (NamingException ne) {
      throw new RuntimeException("Unable to lookup JMS connection factory.", ne);
    }

    // Setup queues
    Queue sendQueue, responseQueue;
    try {
      sendQueue = (Queue) context.lookup("jms/queue/KIE.SESSION");
      responseQueue = (Queue) context.lookup("jms/queue/KIE.RESPONSE");
    } catch (NamingException ne) {
      throw new RuntimeException("Unable to lookup send or response queue", ne);
    }

    // Send command request
    Long processInstanceId = null; // needed if you're doing an operation on a PER_PROCESS_INSTANCE deployment
    String humanTaskUser = USER;
    JaxbCommandsResponse cmdResponse = sendJmsCommands(
        DEPLOYMENT_ID, processInstanceId, humanTaskUser, req, 
        connectionFactory, sendQueue, responseQueue, 
        USER, PASSWORD, 5);

    // Retrieve results
    ProcessInstance oompaProcInst = null;
    List<TaskSummary> charliesTasks = null;
    for (JaxbCommandResponse<?> response : cmdResponse.getResponses()) {
      if (response instanceof JaxbExceptionResponse) {
        // something went wrong on the server side
        JaxbExceptionResponse exceptionResponse = (JaxbExceptionResponse) response;
        throw new RuntimeException(exceptionResponse.getMessage());
      }

      if (response.getIndex() == oompaProcessingResultIndex) {
        oompaProcInst = (ProcessInstance) response.getResult();
      } else if (response.getIndex() == loompaMonitoringResultIndex) {
        charliesTasks = (List<TaskSummary>) response.getResult();
      }
    }
  }

  private JaxbCommandsResponse sendJmsCommands(String deploymentId, Long processInstanceId, String user, JaxbCommandsRequest req,
      ConnectionFactory factory, Queue sendQueue, Queue responseQueue, String jmsUser, String jmsPassword, int timeout) {
    req.setProcessInstanceId(processInstanceId);
    req.setUser(user);

    Connection connection = null;
    Session session = null;
    String corrId = UUID.randomUUID().toString();
    String selector = "JMSCorrelationID = '" + corrId + "'";
    JaxbCommandsResponse cmdResponses = null;
    try {

      // setup
      MessageProducer producer;
      MessageConsumer consumer;
      try {
        if (jmsPassword != null) {
          connection = factory.createConnection(jmsUser, jmsPassword);
        } else {
          connection = factory.createConnection();
        }
        session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);

        producer = session.createProducer(sendQueue);
        consumer = session.createConsumer(responseQueue, selector);

        connection.start();
      } catch (JMSException jmse) {
        throw new RemoteCommunicationException("Unable to setup a JMS connection.", jmse);
      }

      JaxbSerializationProvider serializationProvider = new JaxbSerializationProvider();
      // if necessary, add user-created classes here:
      // xmlSerializer.addJaxbClasses(MyType.class, AnotherJaxbAnnotatedType.class);

      // Create msg
      BytesMessage msg;
      try {
        msg = session.createBytesMessage();

        // set properties
        msg.setJMSCorrelationID(corrId);
        msg.setIntProperty(SerializationConstants.SERIALIZATION_TYPE_PROPERTY_NAME, JaxbSerializationProvider.JMS_SERIALIZATION_TYPE);
        Collection<Class<?>> extraJaxbClasses = serializationProvider.getExtraJaxbClasses();
        if (!extraJaxbClasses.isEmpty()) {
          String extraJaxbClassesPropertyValue = JaxbSerializationProvider
              .classSetToCommaSeperatedString(extraJaxbClasses);
          msg.setStringProperty(SerializationConstants.EXTRA_JAXB_CLASSES_PROPERTY_NAME, extraJaxbClassesPropertyValue);
          msg.setStringProperty(SerializationConstants.DEPLOYMENT_ID_PROPERTY_NAME, deploymentId);
        }

        // serialize request
        String xmlStr = serializationProvider.serialize(req);
        msg.writeUTF(xmlStr);
      } catch (JMSException jmse) {
        throw new RemoteCommunicationException("Unable to create and fill a JMS message.", jmse);
      } catch (SerializationException se) {
        throw new RemoteCommunicationException("Unable to deserialze JMS message.", se.getCause());
      }

      // send
      try {
        producer.send(msg);
      } catch (JMSException jmse) {
        throw new RemoteCommunicationException("Unable to send a JMS message.", jmse);
      }

      // receive
      Message response;
      try {
        response = consumer.receive(timeout);
      } catch (JMSException jmse) {
        throw new RemoteCommunicationException("Unable to receive or retrieve the JMS response.", jmse);
      }

      if (response == null) {
        logger.warn("Response is empty, leaving");
        return null;
      }
      // extract response
      assert response != null : "Response is empty.";
      try {
        String xmlStr = ((BytesMessage) response).readUTF();
        cmdResponses = (JaxbCommandsResponse) serializationProvider.deserialize(xmlStr);
      } catch (JMSException jmse) {
        throw new RemoteCommunicationException("Unable to extract " + JaxbCommandsResponse.class.getSimpleName()
            + " instance from JMS response.", jmse);
      } catch (SerializationException se) {
        throw new RemoteCommunicationException("Unable to extract " + JaxbCommandsResponse.class.getSimpleName()
            + " instance from JMS response.", se.getCause());
      }
      assert cmdResponses != null : "Jaxb Cmd Response was null!";
    } finally {
      if (connection != null) {
        try {
          connection.close();
          session.close();
        } catch (JMSException jmse) {
          logger.warn("Unable to close connection or session!", jmse);
        }
      }
    }
    return cmdResponses;
  }

  private InitialContext getRemoteJbossInitialContext(URL url, String user, String password) { 
    Properties initialProps = new Properties();
    initialProps.setProperty(InitialContext.INITIAL_CONTEXT_FACTORY, "org.jboss.naming.remote.client.InitialContextFactory");
    String jbossServerHostName = url.getHost();
    initialProps.setProperty(InitialContext.PROVIDER_URL, "remote://"+ jbossServerHostName + ":4447");
    initialProps.setProperty(InitialContext.SECURITY_PRINCIPAL, user);
    initialProps.setProperty(InitialContext.SECURITY_CREDENTIALS, password);

    for (Object keyObj : initialProps.keySet()) {
      String key = (String) keyObj;
      System.setProperty(key, (String) initialProps.get(key));
    }
    try {
      return new InitialContext(initialProps);
    } catch (NamingException e) {
      throw new RemoteCommunicationException("Unable to create " + InitialContext.class.getSimpleName(), e);
    }
  }
}]]></programlisting>
      <calloutlist>
        <callout arearefs="jbpm.jms.imports">
          <para>These classes can all be found in the <code>kie-services-client</code> and the <code>kie-services-jaxb</code> JAR.</para>
        </callout>
        <callout arearefs="jbpm.jms.commands">
          <para>The <code>JaxbCommandsRequest</code> instance is the "holder" object in which you can place all of the commands
          you want to execute in a particular request. By using the <code>JaxbCommandsRequest.getCommands()</code> method, you 
          can retrieve the list of commands in order to add more commands to the request.</para>
          <para>A deployment id is required for command request messages that deal with business processes. Command request messages
          that only contain human task-related commands do not require a deployment id.</para>
        </callout>
        <callout arearefs="jbpm.jms.msg.structure">
          <para>Note that the JMS message sent to the remote JMS API <emphasis>must</emphasis> be constructed as follows:
          <itemizedlist>
            <listitem><para>It must be a JMS byte message.</para></listitem>
            <listitem><para>It must have a filled JMS Correlation ID property.</para></listitem>
            <listitem><para>It must have an int property with the name of "serialization" set to an acceptable value (only 0 at the moment).</para></listitem>
            <listitem><para>It must contain a serialized instance of a <code>JaxbCommandsRequest</code>, added to the message as a UTF string</para></listitem>
          </itemizedlist>
          </para>
        </callout>
        <callout arearefs="jbpm.jms.response.serialization">
          <para>The same serialization mechanism used to serialize the request message will be used to serialize the response message.</para>
        </callout>        
        <callout arearefs="jbpm.jms.response.index">
          <para>In order to match the response to a command, to the initial command, use the <code>index</code> field of the returned
          <code>JaxbCommandResponse</code> instances. This <code>index</code> field will match the index of the initial command. Because
          not all commands will return a result, it's possible to send 3 commands with a command request message, and then receive
          a command response message that only includes one <code>JaxbCommandResponse</code> message with an <code>index</code> value of 1. 
          That 1 then identifies it as the response to the second command.</para>
        </callout>        
        <callout arearefs="jbpm.jms.response.jaxb">
          <para>Since many of the results returned by various commands are not serializable, the jBPM JMS Remote API converts these results
          into JAXB equivalents, all of which implement the <code>JaxbCommandResponse</code> interface. The <code>JaxbCommandResponse.getResult()</code>
          method then returns the JAXB equivalent to the actual result, which will conform to the interface of the result.</para>
          <para>For example, in the code above, the <code>StartProcessCommand</code> returns a <code>ProcessInstance</code>. In order 
          to return this object to the requester, the <code>ProcessInstance</code> is converted to a <code>JaxbProcessInstanceResponse</code> and then
          added as a <code>JaxbCommandResponse</code> to the command response message. The same applies to the <code>List&lt;TaskSummary&gt;</code>
            that's returned by the <code>GetTaskAssignedAsPotentialOwnerCommand</code>.</para>
          <para><emphasis>However, not all methods that can be called on a normal <code>ProcessInstance</code> can be called on the 
          <code>JaxbProcessInstanceResponse</code></emphasis> because the <code>JaxbProcessInstanceResponse</code> is simply a representation
          of a <code>ProcessInstance</code> object. This applies to various other command response as well. In particular, methods which 
          require an active (backing) <code>KieSession</code>, such as <code>ProcessInstance.getProess()</code> or 
          <code>ProcessInstance.signalEvent(String type, Object event)</code> will throw an <code>UnsupportedOperationException</code>.</para>
        </callout>        
      </calloutlist>
    </programlistingco>
    
  </section>
                
</section>
