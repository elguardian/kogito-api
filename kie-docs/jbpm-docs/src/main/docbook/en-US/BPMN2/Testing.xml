<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Testing</title>

  <para>Even though business processes aren't code (we even recommend you to
  make them as high-level as possible and to avoid adding implementation
  details), they also have a life cycle like other development artefacts. And
  since business processes can be updated dynamically, testing them (so that
  you don't break any use cases when doing a modification) is really important
  as well.</para>

  <section>
    <title>Unit testing</title>

    <para>When unit testing your process, you test whether the process behaves
    as expected in specific use cases, for example test the output based on
    the existing input. To simplify unit testing, jBPM includes a helper class
    called <emphasis role="bold">JbpmJUnitBaseTestCase</emphasis> (in the
    jbpm-test module) that you can use to greatly simplify your junit testing,
    by offering:</para>

    <itemizedlist>
      <listitem>
        <para>helper methods to create a new RuntimeManager and RuntimeEngine
        for a given (set of) process(es)</para>

        <itemizedlist>
          <listitem>
            <para>you can select whether you want to use persistence or
            not</para>
          </listitem>
        </itemizedlist>
      </listitem>
    </itemizedlist>

    <itemizedlist>
      <listitem>
        <para>assert statements to check</para>

        <itemizedlist>
          <listitem>
            <para>the state of a process instance (active, completed,
            aborted)</para>
          </listitem>

          <listitem>
            <para>which node instances are currently active</para>
          </listitem>

          <listitem>
            <para>which nodes have been triggered (to check the path that has
            been followed)</para>
          </listitem>

          <listitem>
            <para>get the value of variables</para>
          </listitem>
        </itemizedlist>
      </listitem>
    </itemizedlist>

    <para>For example, conside the following hello world process containing a
    start event, a script task and an end event. The following junit test will
    create a new session, start the process and then verify whether the
    process instance completed successfully and whether these three nodes have
    been executed.</para>
 <figure>
    <mediaobject>
      <imageobject>
	<imagedata align="center" fileref="images/Chapter-5-CoreEngine/HelloWorld.png" format="PNG" role="" />
      </imageobject>
    </mediaobject>
  </figure>
    <programlisting language="java">public class ProcessPersistenceTest extends JbpmJUnitBaseTestCase {

    public ProcessPersistenceTest() {
        // setup data source, enable persistence
        super(true, true);
    }

    @Test
    public void testProcess() {
        // create runtime manager with single process - hello.bpmn
        createRuntimeManager("hello.bpmn");
 
        // take RuntimeManager to work with process engine
        RuntimeEngine runtimeEngine = getRuntimeEngine();

        // get access to KieSession instance
        KieSession ksession = runtimeEngine.getKieSession();

        // start process
        ProcessInstance processInstance = ksession.startProcess("com.sample.bpmn.hello");

        // check whether the process instance has completed successfully
        assertProcessInstanceCompleted(processInstance.getId(), ksession);

        // check what nodes have been triggered
        assertNodeTriggered(processInstance.getId(), "StartProcess", "Hello", "EndProcess");
    }
}</programlisting>

    <para>JbpmJUnitBaseTestCase acts as base test case class that shall be
    used for jBPM related tests. It provides four usage areas:</para>

    <itemizedlist>
      <listitem>
        <para>JUnit life cycle methods</para>

        <itemizedlist>
          <listitem>
            <para>setUp: executed @Before and configures data source and
            EntityManagerFactory, cleans up Singleton's session id</para>
          </listitem>

          <listitem>
            <para>tearDown: executed @After and clears out history, closes
            EntityManagerFactory and data source, disposes RuntimeEngines and
            RuntimeManager</para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para>Knowledge Base and KnowledgeSession management methods</para>

        <itemizedlist>
          <listitem>
            <para>createRuntimeManager creates RuntimeManager for given set of
            assets and selected strategy</para>
          </listitem>

          <listitem>
            <para>disposeRuntimeManager disposes RuntimeManager currently
            active in the scope of test</para>
          </listitem>

          <listitem>
            <para>getRuntimeEngine creates new RuntimeEngine for given
            context</para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para>Assertions</para>

        <itemizedlist>
          <listitem>
            <para>assertProcessInstanceCompleted</para>
          </listitem>

          <listitem>
            <para>assertProcessInstanceAborted</para>
          </listitem>

          <listitem>
            <para>assertProcessInstanceActive</para>
          </listitem>

          <listitem>
            <para>assertNodeActive</para>
          </listitem>

          <listitem>
            <para>assertNodeTriggered</para>
          </listitem>

          <listitem>
            <para>assertProcessVarExists</para>
          </listitem>

          <listitem>
            <para>assertNodeExists</para>
          </listitem>

          <listitem>
            <para>assertVersionEquals</para>
          </listitem>

          <listitem>
            <para>assertProcessNameEquals</para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para>Helper methods</para>

        <itemizedlist>
          <listitem>
            <para>getDs - returns currently configured data source</para>
          </listitem>

          <listitem>
            <para>getEmf - returns currently configured
            EntityManagerFactory</para>
          </listitem>

          <listitem>
            <para>getTestWorkItemHandler - returns test work item handler that
            might be registered in addition to what is registered by
            default</para>
          </listitem>

          <listitem>
            <para>clearHistory - clears history log</para>
          </listitem>

          <listitem>
            <para>setupPoolingDataSource - sets up data source</para>
          </listitem>
        </itemizedlist>
      </listitem>
    </itemizedlist>

    <para>JbpmJUnitBaseTestCase supports all three predefined RuntimeManager
    strategies as part of the unit testing. It's enough to specify which
    strategy shall be used whenever creating runtime manager as part of single
    test:</para>

    <programlisting language="java">public class ProcessHumanTaskTest extends JbpmJUnitBaseTestCase {
    
    private static final Logger logger = LoggerFactory.getLogger(ProcessHumanTaskTest.class);

    public ProcessHumanTaskTest() {
        super(true, false);
    }
    
    @Test
    public void testProcessProcessInstanceStrategy() {
        RuntimeManager manager = createRuntimeManager(Strategy.PROCESS_INSTANCE, "manager", "humantask.bpmn");
        RuntimeEngine runtimeEngine = getRuntimeEngine(ProcessInstanceIdContext.get());
        KieSession ksession = runtimeEngine.getKieSession();
        TaskService taskService = runtimeEngine.getTaskService();
        
        int ksessionID = ksession.getId();
        ProcessInstance processInstance = ksession.startProcess("com.sample.bpmn.hello");

        assertProcessInstanceActive(processInstance.getId(), ksession);
        assertNodeTriggered(processInstance.getId(), "Start", "Task 1");
        
        manager.disposeRuntimeEngine(runtimeEngine);
        runtimeEngine = getRuntimeEngine(ProcessInstanceIdContext.get(processInstance.getId()));
        
        ksession = runtimeEngine.getKieSession();
        taskService = runtimeEngine.getTaskService();
        
        assertEquals(ksessionID, ksession.getId());
        
        // let john execute Task 1
        List&lt;TaskSummary&gt; list = taskService.getTasksAssignedAsPotentialOwner("john", "en-UK");
        TaskSummary task = list.get(0);
        logger.info("John is executing task {}", task.getName());
        taskService.start(task.getId(), "john");
        taskService.complete(task.getId(), "john", null);

        assertNodeTriggered(processInstance.getId(), "Task 2");
        
        // let mary execute Task 2
        list = taskService.getTasksAssignedAsPotentialOwner("mary", "en-UK");
        task = list.get(0);
        logger.info("Mary is executing task {}", task.getName());
        taskService.start(task.getId(), "mary");
        taskService.complete(task.getId(), "mary", null);

        assertNodeTriggered(processInstance.getId(), "End");
        assertProcessInstanceCompleted(processInstance.getId(), ksession);
    }
}</programlisting>

    <para>Above is more complete example that uses PerProcessInstance runtime
    manager strategy and uses task service to deal with user tasks.</para>

    <section>
      <title>Testing integration with external services</title>

      <para>Real-life business processes typically include the invocation of
      external services (like for example a human task service, an email
      server or your own domain-specific services). One of the advantages of
      our domain-specific process approach is that you can specify yourself
      how to actually execute your own domain-specific nodes, by registering a
      handler. And this handler can be different depending on your context,
      allowing you to use testing handlers for unit testing your process. When
      you are unit testing your business process, you can register test
      handlers that then verify whether specific services are requested
      correctly, and provide test responses for those services. For example,
      imagine you have an email node or a human task as part of your process.
      When unit testing, you don't want to send out an actual email but rather
      test whether the email that is requested contains the correct
      information (for example the right to email, a personalized body,
      etc.).</para>

      <para>A TestWorkItemHandler is provided by default that can be
      registered to collect all work items (a work item represents one unit of
      work, like for example sending one specific email or invoking one
      specific service and contains all the data related to that task) for a
      given type. This test handler can then be queried during unit testing to
      check whether specific work was actually requested during the execution
      of the process and that the data associcated with the work was
      correct.</para>

      <para>The following example describes how a process that sends out an
      email could be tested. This test case in particular will test whether an
      exception is raised when the email could not be sent (which is simulated
      by notifying the engine that the sending the email could not be
      completed). The test case uses a test handler that simply registers when
      an email was requested (and allows you to test the data related to the
      email like from, to, etc.). Once the engine has been notified the email
      could not be sent (using abortWorkItem(..)), the unit test verifies that
      the process handles this case successfully by logging this and
      generating an error, which aborts the process instance in this
      case.</para>
 <figure>
    <mediaobject>
      <imageobject>
	<imagedata align="center" fileref="images/Chapter-5-CoreEngine/HelloWorld2.png" format="PNG" role="" />
      </imageobject>
    </mediaobject>
  </figure>

      <programlisting language="java">public void testProcess2() {

    // create runtime manager with single process - hello.bpmn
    createRuntimeManager("sample-process.bpmn");
    // take RuntimeManager to work with process engine
    RuntimeEngine runtimeEngine = getRuntimeEngine();

    // get access to KieSession instance
    KieSession ksession = runtimeEngine.getKieSession();

    // register a test handler for "Email"
    TestWorkItemHandler testHandler = getTestWorkItemHandler();

    ksession.getWorkItemManager().registerWorkItemHandler("Email", testHandler);

    // start the process
    ProcessInstance processInstance = ksession.startProcess("com.sample.bpmn.hello2");

    assertProcessInstanceActive(processInstance.getId(), ksession);
    assertNodeTriggered(processInstance.getId(), "StartProcess", "Email");

    // check whether the email has been requested
    WorkItem workItem = testHandler.getWorkItem();
    assertNotNull(workItem);
    assertEquals("Email", workItem.getName());
    assertEquals("me@mail.com", workItem.getParameter("From"));
    assertEquals("you@mail.com", workItem.getParameter("To"));

    // notify the engine the email has been sent
    ksession.getWorkItemManager().abortWorkItem(workItem.getId());
    assertProcessInstanceAborted(processInstance.getId(), ksession);
    assertNodeTriggered(processInstance.getId(), "Gateway", "Failed", "Error");

}</programlisting>
    </section>

    <section>
      <title>Configuring persistence</title>

      <para>You can configure whether you want to execute the junit tests
      using persistence or not. By default, the junit tests will use
      persistence, meaning that the state of all process instances will be
      stored in a (in-memory H2) database (which is started by the junit test
      during setup) and a history log will be used to check assertions related
      to execution history. When persistence is not used, process instances
      will only live in memory and an in-memory logger is used for history
      assertions.</para>

      <para>Persistence (and setup of data source) is controlled by the super
      constructor and allows following</para>

      <itemizedlist>
        <listitem>
          <para>default, no arg constructor - the most simple test case
          configuration (does NOT initialize data source and does NOT
          configure session persistence) - this is usually used for in memory
          process management, without human task interaction</para>
        </listitem>

        <listitem>
          <para>super(boolean, boolean) - allows to explicitly configure
          persistence and data source. This is the most common way of
          bootstrapping test cases for jBPM</para>

          <itemizedlist>
            <listitem>
              <para>super(true, false) - to execute with in memory process
              management with human tasks persistence</para>
            </listitem>

            <listitem>
              <para>super(true, true) - to execute with persistent process
              management with human tasks persistence</para>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <para>super(boolean, boolean, string) - same as super(boolean,
          boolean) but allows to use another persistence unit name than
          default (org.jbpm.persistence.jpa)</para>
        </listitem>
      </itemizedlist>

      <programlisting language="java">public class ProcessHumanTaskTest extends JbpmJUnitBaseTestCase {
    
    private static final Logger logger = LoggerFactory.getLogger(ProcessHumanTaskTest.class);

    public ProcessHumanTaskTest() {
        // configure this tests to not use persistence for process engine but still use it for human tasks
        super(true, false);
    }
}</programlisting>
    </section>
  </section>
</section>
