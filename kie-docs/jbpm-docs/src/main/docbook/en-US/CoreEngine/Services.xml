<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xmlns="http://docbook.org/ns/docbook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:ns="http://docbook.org/ns/docbook">
  <title>Services</title>
       <para>On top of RuntimeManager API a set of high level services has been provided from jBPM
              version 6.2. These services are meant to be the easiest way to embed (j)BPM
              capabilities into custom application. A complete set of modules are delivered as part
              of these services. They are partitioned into several modules to ease thier adoptions
              in various environments.</para>
       <para><itemizedlist>
                     <listitem>
                            <para>jbpm-services-api</para>
                            <para>contains only api classes and interfaces</para>
                     </listitem>
                     <listitem>
                            <para>jbpm-kie-services</para>
                            <para>rewritten code implementation of services api - pure java, no
                                   framework dependencies</para>
                     </listitem>
                     <listitem>
                            <para>jbpm-services-cdi</para>
                            <para>CDI wrapper on top of core services implementation</para>
                     </listitem>
                     <listitem>
                            <para>jbpm-services-ejb-api </para>
                            <para>extension to services api for ejb needs</para>
                     </listitem>
                     <listitem>
                            <para>jbpm-services-ejb-impl </para>
                            <para>EJB wrappers on top of core services implementation</para>
                     </listitem>
                     <listitem>
                            <para>jbpm-services-ejb-timer</para>
                            <para>scheduler service based on EJB TimerService to support time based
                                   operations e.g. timer events, deadlines, etc</para>
                     </listitem>
                     <listitem>
                            <para>jbpm-services-ejb-client</para>
                            <para>EJB remote client implementation - currently only for JBoss</para>
                     </listitem>
              </itemizedlist> Service modules are grouped with its framework dependencies, so
              developers are free to choose which one is suitable for them and use only that.</para>
       <para/>
       <section>
              <title>Deployment Service</title>
              <para>As the name suggest, its primary responsibility is to deploy (and undeploy)
                     units. Deployment unit is kjar that brings in business assets (like processes,
                     rules, forms, data model) for execution. Deployment services allow to query it
                     to get hold of available deployment units and even their RuntimeManager instances.<note>
                            <para>there are some restrictions on EJB remote client to do not expose
                                   RuntimeManager as it won't make any sense on client side (after
                                   it was serialized).</para>
                     </note></para>
              <para>So typical use case for this service is to provide dynamic behavior into your
                     system so multiple kjars can be active at the same time and be executed
                     simultaneously.<programlisting>
// create deployment unit by giving GAV
DeploymentUnit deploymentUnit = new KModuleDeploymentUnit(GROUP_ID, ARTIFACT_ID, VERSION);
// deploy        
deploymentService.deploy(deploymentUnit);
// retrieve deployed unit        
DeployedUnit deployed = deploymentService.getDeployedUnit(deploymentUnit.getIdentifier());
// get runtime manager
RuntimeManager manager = deployed.getRuntimeManager();
</programlisting></para>
              <para>Complete DeploymentService interface is as
                     follows:<programlisting>
public interface DeploymentService {

    void deploy(DeploymentUnit unit);
    
    void undeploy(DeploymentUnit unit);
    
    RuntimeManager getRuntimeManager(String deploymentUnitId);
    
    DeployedUnit getDeployedUnit(String deploymentUnitId);
    
    Collection&lt;DeployedUnit> getDeployedUnits();
    
    void activate(String deploymentId);
    
    void deactivate(String deploymentId);
    
    boolean isDeployed(String deploymentUnitId);
}</programlisting></para>
       </section>
       <section>
              <title>Definition Service</title>
              <para>Upon deployment, every process definition is scanned using definition service
                     that parses the process and extracts valuable information out of it. These
                     information can provide valuable input to the system to inform users about what
                     is expected. Definition service provides information about:<itemizedlist>
                            <listitem>
                                   <para>process definition - id, name, description</para>
                            </listitem>
                            <listitem>
                                   <para>process variables - name and type</para>
                            </listitem>
                            <listitem>
                                   <para>reusable subprocesses used in the process (if any)</para>
                            </listitem>
                            <listitem>
                                   <para>service tasks (domain specific activities)</para>
                            </listitem>
                            <listitem>
                                   <para>user tasks including assignment information</para>
                            </listitem>
                            <listitem>
                                   <para>task data input and output information</para>
                            </listitem>
                     </itemizedlist></para>
              <para>So definition service can be seen as sort of supporting service that provides
                     quite a few information about process definition that are extracted directly
                     from
                     BPMN2.<programlisting>
String processId = "org.jbpm.writedocument";
         
Collection&lt;UserTaskDefinition> processTasks = 
bpmn2Service.getTasksDefinitions(deploymentUnit.getIdentifier(), processId);
         
Map&lt;String, String> processData = 
bpmn2Service.getProcessVariables(deploymentUnit.getIdentifier(), processId);
         
Map&lt;String, String> taskInputMappings = 
bpmn2Service.getTaskInputMappings(deploymentUnit.getIdentifier(), processId, "Write a Document" );
</programlisting></para>
              <para>While it usually is used with combination of other services (like deployment
                     service) it can be used standalone as well to get details about process
                     definition that do not come from kjar. This can be achieved by using
                     buildProcessDefinition method of definition
                     service.<programlisting>
public interface DefinitionService {
	
    ProcessDefinition buildProcessDefinition(String deploymentId, String bpmn2Content,
			ClassLoader classLoader, boolean cache) throws IllegalArgumentException;

    ProcessDefinition getProcessDefinition(String deploymentId, String processId);
    
    Collection&lt;String> getReusableSubProcesses(String deploymentId, String processId);
    
    Map&lt;String, String> getProcessVariables(String deploymentId, String processId);
    
    Map&lt;String, String> getServiceTasks(String deploymentId, String processId);
    
    Map&lt;String, Collection&lt;String>> getAssociatedEntities(String deploymentId, String processId);
    
    Collection&lt;UserTaskDefinition> getTasksDefinitions(String deploymentId, String processId);
    
    Map&lt;String, String> getTaskInputMappings(String deploymentId, String processId, String taskName);
    
    Map&lt;String, String> getTaskOutputMappings(String deploymentId, String processId, String taskName);
	
}</programlisting></para>
              <para/>
       </section>
       <section>
              <title>Process Service</title>
              <para>Process service is the one that usually is of the most interest. Once the
                     deployment and definition service was already used to feed the system with
                     something that can be executed. Process service provides access to execution
                     environment that allows:<itemizedlist>
                            <listitem>
                                   <para>start new process instance</para>
                            </listitem>
                            <listitem>
                                   <para>work with existing one - signal, get details of it, get
                                          variables, etc</para>
                            </listitem>
                            <listitem>
                                   <para>work with work items</para>
                            </listitem>
                     </itemizedlist></para>
              <para>At the same time process service is a command executor so it allows to execute
                     commands (essentially on ksession) to extend its capabilities. </para>
              <para>Important to note is that process service is focused on runtime operations so
                     use it whenever there is a need to alter (signal, change variables, etc)
                     process instance and not for read operations like show available process
                     instances by looping though given list and invoking getProcessInstance method.
                     For that there is dedicated runtime data service that is described
                     below.</para>
              <para>An example on how to deploy and run process can be done as
                     follows:<programlisting>
KModuleDeploymentUnit deploymentUnit = new KModuleDeploymentUnit(GROUP_ID, ARTIFACT_ID, VERSION);
         
deploymentService.deploy(deploymentUnit);
 
long processInstanceId = processService.startProcess(deploymentUnit.getIdentifier(), "customtask");
      
ProcessInstance pi = processService.getProcessInstance(processInstanceId);   
</programlisting></para>
              <para>As you can see start process expects deploymentId as first argument. This is
                     extremely powerful to enable service to easily work with various deployments,
                     even with same processes but coming from different versions - kjar
                     versions.<programlisting>
public interface ProcessService {
	
    Long startProcess(String deploymentId, String processId);

    Long startProcess(String deploymentId, String processId, Map&lt;String, Object> params);

    void abortProcessInstance(Long processInstanceId);
    
    void abortProcessInstances(List&lt;Long> processInstanceIds);

    void signalProcessInstance(Long processInstanceId, String signalName, Object event);
    
    void signalProcessInstances(List&lt;Long> processInstanceIds, String signalName, Object event);
    
    ProcessInstance getProcessInstance(Long processInstanceId);

    void setProcessVariable(Long processInstanceId, String variableId, Object value);
    
    void setProcessVariables(Long processInstanceId, Map&lt;String, Object> variables);
    
    Object getProcessInstanceVariable(Long processInstanceId, String variableName);

    Map&lt;String, Object> getProcessInstanceVariables(Long processInstanceId);
    
    Collection&lt;String> getAvailableSignals(Long processInstanceId);
    
    void completeWorkItem(Long id, Map&lt;String, Object> results);

    void abortWorkItem(Long id);
    
    WorkItem getWorkItem(Long id);

    List&lt;WorkItem> getWorkItemByProcessInstance(Long processInstanceId);
    
    public &lt;T> T execute(String deploymentId, Command&lt;T> command);
    
    public &lt;T> T execute(String deploymentId, Context&lt;?> context, Command&lt;T> command);

}</programlisting></para>
              <para/>
       </section>
       <section>
              <title>Runtime Data Service</title>
              <para>Runtime data service as name suggests, deals with all that refers to runtime information:<itemizedlist>
                            <listitem>
                                   <para>started process instances</para>
                            </listitem>
                            <listitem>
                                   <para>executed node instances</para>
                            </listitem>
                            <listitem>
                                   <para>executed node instances</para>
                            </listitem>
                            <listitem>
                                   <para>and more</para>
                            </listitem>
                     </itemizedlist></para>
              <para>Use this service as main source of information whenever building list based UI -
                     to show process definitions, process instances, tasks for given user, etc. This
                     service was designed to be as efficient as possible and still provide all
                     required information.</para>
              <para>Some examples:<itemizedlist>
                            <listitem>
                                   <para>get all process definitions</para>
                                   <para>
                                          <programlisting>
Collection definitions = runtimeDataService.getProcesses(new QueryContext()); 
</programlisting>
                                   </para>
                            </listitem>
                            <listitem>
                                   <para>get active process
                                          instances<programlisting>
Collection&lt;processinstancedesc> instances = runtimeDataService.getProcessInstances(new QueryContext());
</programlisting></para>
                            </listitem>
                            <listitem>
                                   <para>get active nodes for given process
                                          instance<programlisting>
Collection&lt;nodeinstancedesc> instances = runtimeDataService.getProcessInstanceHistoryActive(processInstanceId, new QueryContext());
</programlisting></para>
                            </listitem>
                            <listitem>
                                   <para>get tasks assigned to
                                          john<programlisting>
List&lt;tasksummary> taskSummaries = runtimeDataService.getTasksAssignedAsPotentialOwner("john", new QueryFilter(0, 10));
</programlisting></para>
                            </listitem>
                     </itemizedlist></para>
              <para>There are two important arguments that the runtime data service operations supports:<itemizedlist>
                            <listitem>
                                   <para>QueryContext</para>
                            </listitem>
                            <listitem>
                                   <para>QueryFilter - extension of QueryContext</para>
                            </listitem>
                     </itemizedlist></para>
              <para>These provide capabilities for efficient management result set like pagination,
                     sorting and ordering (QueryContext). Moreover additional filtering can be
                     applied to task queries to provide more advanced capabilities when searching
                     for user
                     tasks.<programlisting>
public interface RuntimeDataService {
  
    // Process instance information
    
    Collection&lt;ProcessInstanceDesc> getProcessInstances(QueryContext queryContext);
   
    Collection&lt;ProcessInstanceDesc> getProcessInstances(List&lt;Integer> states, String initiator, QueryContext queryContext);
   
    Collection&lt;ProcessInstanceDesc> getProcessInstancesByProcessId(List&lt;Integer> states, String processId, String initiator, QueryContext queryContext);
   
    Collection&lt;ProcessInstanceDesc> getProcessInstancesByProcessName(List&lt;Integer> states, String processName, String initiator, QueryContext queryContext);
    
    Collection&lt;ProcessInstanceDesc> getProcessInstancesByDeploymentId(String deploymentId, List&lt;Integer> states, QueryContext queryContext);
    
    ProcessInstanceDesc getProcessInstanceById(long processInstanceId);
    
    Collection&lt;ProcessInstanceDesc> getProcessInstancesByProcessDefinition(String processDefId, QueryContext queryContext);
    
    Collection&lt;ProcessInstanceDesc> getProcessInstancesByProcessDefinition(String processDefId, List&lt;Integer> states, QueryContext queryContext);

    
    // Node and Variable instance information
   
    NodeInstanceDesc getNodeInstanceForWorkItem(Long workItemId);

    Collection&lt;NodeInstanceDesc> getProcessInstanceHistoryActive(long processInstanceId, QueryContext queryContext);

    Collection&lt;NodeInstanceDesc> getProcessInstanceHistoryCompleted(long processInstanceId, QueryContext queryContext);

    Collection&lt;NodeInstanceDesc> getProcessInstanceFullHistory(long processInstanceId, QueryContext queryContext);
    
    Collection&lt;NodeInstanceDesc> getProcessInstanceFullHistoryByType(long processInstanceId, EntryType type, QueryContext queryContext);

    Collection&lt;VariableDesc> getVariablesCurrentState(long processInstanceId);

    Collection&lt;VariableDesc> getVariableHistory(long processInstanceId, String variableId, QueryContext queryContext);

    
    // Process information
  
    Collection&lt;ProcessDefinition> getProcessesByDeploymentId(String deploymentId, QueryContext queryContext);   
    
    Collection&lt;ProcessDefinition> getProcessesByFilter(String filter, QueryContext queryContext);

    Collection&lt;ProcessDefinition> getProcesses(QueryContext queryContext);
   
    Collection&lt;String> getProcessIds(String deploymentId, QueryContext queryContext);
   
    ProcessDefinition getProcessById(String processId);
  
    ProcessDefinition getProcessesByDeploymentIdProcessId(String deploymentId, String processId);
    
	// user task query operations

    UserTaskInstanceDesc getTaskByWorkItemId(Long workItemId);

    UserTaskInstanceDesc getTaskById(Long taskId);

    List&lt;TaskSummary> getTasksAssignedAsBusinessAdministrator(String userId, QueryFilter filter);
	
    List&lt;TaskSummary> getTasksAssignedAsBusinessAdministratorByStatus(String userId, List&lt;Status> statuses, QueryFilter filter);

    List&lt;TaskSummary> getTasksAssignedAsPotentialOwner(String userId, QueryFilter filter);
	
    List&lt;TaskSummary> getTasksAssignedAsPotentialOwner(String userId, List&lt;String> groupIds, QueryFilter filter);

    List&lt;TaskSummary> getTasksAssignedAsPotentialOwnerByStatus(String userId, List&lt;Status> status, QueryFilter filter);
	
    List&lt;TaskSummary> getTasksAssignedAsPotentialOwner(String userId, List&lt;String> groupIds, List&lt;Status> status, QueryFilter filter);
	
    List&lt;TaskSummary> getTasksAssignedAsPotentialOwnerByExpirationDateOptional(String userId, List&lt;Status> status, Date from, QueryFilter filter);
	
    List&lt;TaskSummary> getTasksOwnedByExpirationDateOptional(String userId, List&lt;Status> strStatuses, Date from, QueryFilter filter);

    List&lt;TaskSummary> getTasksOwned(String userId, QueryFilter filter);

    List&lt;TaskSummary> getTasksOwnedByStatus(String userId, List&lt;Status> status, QueryFilter filter);

    List&lt;Long> getTasksByProcessInstanceId(Long processInstanceId);

    List&lt;TaskSummary> getTasksByStatusByProcessInstanceId(Long processInstanceId, List&lt;Status> status, QueryFilter filter);
        
    List&lt;AuditTask> getAllAuditTask(String userId, QueryFilter filter);
	    
}</programlisting></para>
              <para/>
       </section>
       <section>
              <title>User Task Service</title>
              <para>User task service covers complete life cycle of individual task so it can be
                     managed from start to end. It explicitly eliminates queries from it to provide
                     scoped execution and moves all query operations into runtime data service.
                     Besides lifecycle operations user task service allows:<itemizedlist>
                            <listitem>
                                   <para>modification of selected properties</para>
                            </listitem>
                            <listitem>
                                   <para>access to task variables</para>
                            </listitem>
                            <listitem>
                                   <para>access to task attachments</para>
                            </listitem>
                            <listitem>
                                   <para>access to task comments</para>
                            </listitem>
                     </itemizedlist></para>
              <para>On top of that user task service is a command executor as well that allows to
                     execute custom task commands.</para>
              <para>Complete example with start process and complete user task done by
                     services:<programlisting>
long processInstanceId = 
processService.startProcess(deployUnit.getIdentifier(), "org.jbpm.writedocument");
 
List&lt;Long> taskIds = 
runtimeDataService.getTasksByProcessInstanceId(processInstanceId);
 
Long taskId = taskIds.get(0);
      
userTaskService.start(taskId, "john");
UserTaskInstanceDesc task = runtimeDataService.getTaskById(taskId);
      
Map&lt;String, Object> results = new HashMap&lt;String, Object>();
results.put("Result", "some document data");
userTaskService.complete(taskId, "john", results);
</programlisting></para>
              <para>
                     <note>
                            <para>The most important thing when working with services is that there
                                   is no more need to create your own implementations of Process
                                   service that simply wraps runtime manager, runtime engine,
                                   ksession usage. Services make use of RuntimeManager API best
                                   practices and thus eliminate various risks when working with that
                                   API.</para>
                     </note>
              </para>
              <para/>
       </section>
       <section>
              <title>Working with deployments</title>
              <para>Deployment Service provides convinient way to put business assets to an
                     execution environment but there are cases that requires some additional
                     management to make them available in right context. </para>
              <para><emphasis role="bold">Activation and Deactivation of
                     deployments</emphasis></para>
              <para>Imagine situation where there are number of processes already running of given
                     deployment and then new version of these processes comes into the runtime
                     environment. With that administrator can decide that new instances of given
                     process definition should be using new version only while already active
                     instances should continue with the previous version. </para>
              <para>To help with that deployment service has been equipped with following methods:<itemizedlist>
                            <listitem>
                                   <para>activate</para>
                                   <para>allows to activate given deployment so it can be available
                                          for interaction meaning will show its process definition
                                          and allow to start new process instances of that project's
                                          processes</para>
                            </listitem>
                            <listitem>
                                   <para>deactivate</para>
                                   <para>allows to deactivate deployment which will disable option
                                          to see or start new process instances of that project's
                                          processes but will allow to continue working with already
                                          active process instances, e.g. signal, work with user task
                                          etc</para>
                            </listitem>
                     </itemizedlist></para>
              <para>This feature allows smooth transition between project versions whitout need of
                     process instance migration.</para>
              <para><emphasis role="bold">Deployment synchronization</emphasis></para>
              <para>Prior to jBPM 6.2, jbpm services did not have deployment store by default. When
                     embedded in jbpm-console/kie-wb they utilized sistem.git VFS repository to
                     preserve deployed units across server restarts. While that works fine, it comes
                     with some drawbacks:<itemizedlist>
                            <listitem>
                                   <para>not available for custom systems that use services</para>
                            </listitem>
                            <listitem>
                                   <para>requires complex setup in cluster - zookeeper and
                                          helix</para>
                            </listitem>
                     </itemizedlist></para>
              <para>With version 6.2 jbpm services come with deployment synchronizer that stores
                     available deployments into data base, including its deployment descriptor. At
                     the same time it constantly monitors that table to keep it in sync with other
                     installations that might be using same data source. This is especially
                     important when running in cluster or when jbpm console runs next to custom
                     application and both should be able to operate on the same artifacts.</para>
              <para>By default synchronization must be configured (when runing as core services
                     while it is automatically enabled for ejb and cdi extensions). To configure
                     synchronization following needs to be
                     configured:<programlisting>
TransactionalCommandService commandService = new TransactionalCommandService(emf);

DeploymentStore store = new DeploymentStore();
store.setCommandService(commandService);

DeploymentSynchronizer sync = new DeploymentSynchronizer();
sync.setDeploymentService(deploymentService);
sync.setDeploymentStore(store);

DeploymentSyncInvoker invoker = new DeploymentSyncInvoker(sync, 2L, 3L, TimeUnit.SECONDS);
invoker.start();
....
invoker.stop();
</programlisting></para>
              <para>With this, deployments will be synchronized every 3 seconds with initial delay
                     of two seconds.</para>
              <para><emphasis role="bold">Invoking latest version of project's
                     processes</emphasis></para>
              <para>In case there is a need to always work with latest version of project's process,
                     services allow to interact with various operations using deployment id with
                     latest keyword. Let's go over an example to better understand the
                     feature.</para>
              <para>Initially deployed unit is org.jbpm:HR:1.0 which has the first version of an
                     hiring process. After several weeks, new version is developed and deployed to
                     the execution server - org.jbpm:HR.2.0 with version 2 of the hiring
                     process.</para>
              <para>To allow callers of the services to interact without being worried if they work
                     with latest version, they can use following deployment
                     id:<programlisting>org.jbpm.HR:latest</programlisting></para>
              <para>this will alwyas find out latest available version of project that is identified by:<itemizedlist>
                            <listitem>
                                   <para>groupId: org.jbpm</para>
                            </listitem>
                            <listitem>
                                   <para>artifactId: HR</para>
                            </listitem>
                     </itemizedlist></para>
              <para>version comparizon is based on Maven version numbers and relies on Maen based
                     algorithm to find the latest one.<note>
                            <para>This is only supported when process identifier remains the same in
                                   all project versions</para>
                     </note></para>
              <para>Here is a complete example with deployment of multiple versions and interacting
                     always with the
                     latest:<programlisting>
KModuleDeploymentUnit deploymentUnitV1 = new KModuleDeploymentUnit("org.jbpm", "HR", "1.0");
deploymentService.deploy(deploymentUnitV1);

long processInstanceId = processService.startProcess("org.jbpm:HR:LATEST", "customtask");
ProcessInstanceDesc piDesc = runtimeDataService.getProcessInstanceById(processInstanceId); 

// we have started process with project's version 1
assertEquals(deploymentUnitV1.getIdentifier(), piDesc.getDeploymentId());

// next we deploy version 1
KModuleDeploymentUnit deploymentUnitV2 = new KModuleDeploymentUnit("org.jbpm", "HR", "2.0");
deploymentService.deploy(deploymentUnitV2);

processInstanceId = processService.startProcess("org.jbpm:HR:LATEST", "customtask");
piDesc = runtimeDataService.getProcessInstanceById(processInstanceId); 

// this time we have started process with project's version 2
assertEquals(deploymentUnitV2.getIdentifier(), piDesc.getDeploymentId());</programlisting></para>
              <para>As illustrated this provides very powerful feature when interacting with
                     frequently chaning environment that allows to always be up to date when it
                     comes to use of process definitions.<note>
                            <para>This feature is also available in REST interface so whenever
                                   sending request with deployment id, it's enough to replace
                                   concrete version with LATEST keyword to make use of this
                                   feature.</para>
                     </note></para>
       </section>
      
</section>
