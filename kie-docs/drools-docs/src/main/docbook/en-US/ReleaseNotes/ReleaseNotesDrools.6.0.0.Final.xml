<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0" xml:base="../../" xml:id="drools.ReleaseNotesDrools.6.0.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns="http://docbook.org/ns/docbook">

  <title>What is New and Noteworthy in Drools 6.0.0</title>
      
  <section>
    <title>PHREAK - Lazy rule matching algorithm</title>
    <para>The main work done for Drools in 6.0 involves the new PREAK algorithm. This is a lazy algorithm that should
      enable Drools to handle a larger number of rules and facts. AngendaGroups can now help improvement performance, as
      rules are not evaluated until it attempts to fire them.</para>
    <para>Sequential mode continues to be supported for PHREAK but now 'modify' is allowed. While there is no
      'inference' with sequential configuration,  as rules are lazily evaluated, any rule not yet evaluated will see the
      more recent data as a result of 'modify'. This is more inline with how people intuitively think sequential
      works.</para>
    <para>The conflict resolution order has been tweaked for PHREAK, and now is ordered by salience and then rule order;
      based on the rule position in the file.. Prior to Drools 6.0.0, after salience, it was considered arbitrary. When
      KieModules and updateToVersion are used for dynamic deployment, the rule order in the file is preserved via the
      diff processing.</para>
  </section>

  <section>
    <title>Automatically firing timed rule in passive mode</title>

    <para>When the rule engine runs in passive mode (i.e.: using fireAllRules)
    by default it doesn't fire consequences of timed rules unless fireAllRules isn't invoked again.
    Now it is possible to change this default behavior by configuring the KieSession
    with a <code>TimedRuleExectionOption</code> as shown in the following example.</para>

    <example>
      <title>Configuring a KieSession to automatically execute timed rules</title>

      <programlisting language="java">KieSessionConfiguration ksconf = KieServices.Factory.get().newKieSessionConfiguration();
ksconf.setOption( TimedRuleExectionOption.YES );
KSession ksession = kbase.newKieSession(ksconf, null);</programlisting>
    </example>

    <para>It is also possible to have a finer grained control on the timed rules that have to be
    automatically executed. To do this it is necessary to set a <code>FILTERED</code>
    <code>TimedRuleExectionOption</code> that allows to define a callback to filter those
    rules, as done in the next example.</para>

    <example>
      <title>Configuring a filter to choose which timed rules should be automatically executed</title>

      <programlisting language="java">KieSessionConfiguration ksconf = KieServices.Factory.get().newKieSessionConfiguration();
conf.setOption( new TimedRuleExectionOption.FILTERED(new TimedRuleExecutionFilter() {
    public boolean accept(Rule[] rules) {
        return rules[0].getName().equals("MyRule");
    }
}) );</programlisting>
    </example>
  </section>

  <section>
    <title>Expression Timers</title>

    <para>It is now possible to define both the delay and interval of an interval timer
    as an expression instead of a fixed value. To do that it is necessary to declare
    the timer as an expression one (indicated by "expr:") as in the following example:</para>

    <example>
      <title>An Expression Timer Example</title>

      <programlisting language="java">declare Bean
    delay   : String = "30s"
    period  : long = 60000
end

rule "Expression timer"
    timer( expr: $d, $p )
when
    Bean( $d : delay, $p : period )
then
end</programlisting>
    </example>

    <para>The expressions, $d and $p in this case, can use any variable defined in the
    pattern matching part of the rule and can be any String that can be parsed in a time
    duration or any numeric value that will be internally converted in a long representing
    a duration expressed in milliseconds.</para>

    <para>Both interval and expression timers can have 3 optional parameters named
    "start", "end" and "repeat-limit". When one or more of these parameters are used the first
    part of the timer definition must be followed by a semicolon ';' and the parameters have
    to be separated by a comma ',' as in the following example:</para>

    <example>
      <title>An Interval Timer with a start and an end</title>

      <programlisting language="java">timer (int: 30s 10s; start=3-JAN-2010, end=5-JAN-2010)</programlisting>
    </example>

    <para>The value for start and end parameters can be a Date, a String representing
    a Date or a long, or more in general any Number, that will be transformed in a Java Date
    applying the following conversion:</para>

    <programlisting language="java">new Date( ((Number) n).longValue() )</programlisting>

    <para>Conversely the repeat-limit can be only an integer and it defines the maximum
    number of repetitions allowed by the timer. If both the end and the repeat-limit parameters
    are set the timer will stop when the first of the two will be matched.</para>

    <para>The using of the start parameter implies the definition of a phase for the timer,
    where the beginning of the phase is given by the start itself plus the eventual delay.
    In other words in this case the timed rule will then be scheduled at times:</para>

    <programlisting language="java">start + delay + n*period</programlisting>

    <para>for up to repeat-limit times and no later than the end timestamp (whichever first).
    For instance the rule having the following interval timer</para>

    <programlisting language="java">timer ( int: 30s 1m; start="3-JAN-2010" )</programlisting>

    <para>will be scheduled at the 30th second of every minute after the midnight of the
    3-JAN-2010. This also means that if for example you turn the system on at midnight of
    the 3-FEB-2010 it won't be scheduled immediately but will preserve the phase defined by
    the timer and so it will be scheduled for the first time 30 seconds after the midnight.
    If for some reason the system is paused (e.g. the session is serialized and then deserialized
    after a while) the rule will be scheduled only once to recover from missing activations
    (regardless of how many activations we missed) and subsequently it will be scheduled
    again in phase with the timer.</para>
  </section>

  <section>
    <title>RuleFowGroup and AgendaGroups are merged</title>
    <para>These two groups have been merged and now RuleFlowGroup's behave the same as AgendaGroups. The get methods
      have been left, for deprecation reasons, but both return the same underlying data. When jBPM activates a group it
      now just calls setFocus. RuleFlowGroups and AgendaGroups when used together was a continued source of errors. It
      also aligns the codebase, towards PHREAK and the multi-core explotation that is planned in the future.</para>
  </section>

  <!--section>
    <title>Pluggable Belief System</title>
    <para>bar</para>
  </section>
  
  <section>
    <title>JTMS</title>
    <para>bar</para>
  </section>

  <section>
    <title>Defeasible</title>
    <para>bar</para>
  </section-->  
</section>
