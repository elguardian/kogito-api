<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xmlns="http://docbook.org/ns/docbook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:ns="http://docbook.org/ns/docbook">
  <title>Example: Notifications</title>
    

<para>Let's start by showing you how to include a simple work item for sending notifications.
A work item is defined by a unique name and includes additional parameters that describe the work 
in more detail. Work items can also return information after they have been executed, specified 
as results.</para>

<para>Our notification work item could be defined using a work definition with four parameters and 
no results. For example: 
  <itemizedlist>
    <listitem>Name: "Notification"</listitem>
    <listitem>Parameters:<itemizedlist>
      <listitem>From [String type]</listitem>
      <listitem>To [String type]</listitem>
      <listitem>Message [String type]</listitem>
      <listitem>Priority [String type]</listitem>
    </itemizedlist></listitem>
  </itemizedlist>
</para>

  <section>
    <title>The Notification Work Item Definition</title>

    <section>
      <title>Creating the work item definition</title>

<para>In our example we will create a MVEL work item definition that defines a "Notification" work
item. Using MVEL is the default way to This file will be placed in the project classpath in a directory called 
<filename>META-INF</filename>. The work item configuration file for this example, 
<filename>MyWorkDefinitions.wid</filename>, will look like this:</para>

<programlisting>
import org.drools.core.process.core.datatype.impl.type.StringDataType;
[
  // the Notification work item
  [
    "name" : "Notification",
    "parameters" : [
      "Message" : new StringDataType(),
      "From" : new StringDataType(),
      "To" : new StringDataType(),
      "Priority" : new StringDataType(),
    ],
    "displayName" : "Notification",
    "icon" : "icons/notification.gif"
  ]
]</programlisting>

<para>The project directory structure could then look something like this:</para>

<programlisting>project/src/main/resources/META-INF/MyWorkDefinitions.wid</programlisting>

<para>We also want to <emphasis>add</emphasis> a specific icon to be used in the process editor 
with the work item.  To add this, you will need <filename>.gif</filename> or 
<filename>.png</filename> images with a pixel size of 16x16. We put them in a directory outside 
of the <filename>META-INF</filename> directory, for example, here:</para>

<programlisting>project/src/main/resources/icons/notification.gif</programlisting>

    </section>

    <section>
      <title>Registering the work definition</title>

<para>The jBPM Eclipse editor uses the configuration mechanisms supplied by Drools to register work item definition 
files. That means adding a <code>drools.workDefinitions</code> property to the
<filename>drools.rulebase.conf</filename> file in the <filename>META-INF</filename>.</para>

<para>The <code>drools.workDefinitions</code> property represents a list of files containing work 
item definitions, separated usings spaces. If you want to <emphasis>exclude</emphasis> all other 
work item definitions and only use your definition, you could use the following:</para>

<programlisting>drools.workDefinitions = MyWorkDefinitions.wid</programlisting>

<para>However, if you only want to add the newly created node definition to the existing palette 
nodes, you can define the <code>drools.workDefinitions</code> property as follows:</para>

<programlisting>drools.workDefinitions = MyWorkDefinitions.wid WorkDefinitions.conf
</programlisting>

<para>We recommended that you use the extension <code>.wid</code> for your own definitions of 
domain specific nodes. The <code>.conf</code> extension used with the default definition file, 
<filename>WorkDefinitions.conf</filename>, for backward compatibility reasons.</para>

    </section>

    <section>
      <title>Using your new work item in your processes</title>

<para>We've created our work item definition and configured it, so now we can start using it in
our processes. The process editor contains a separate section in the palette where the
different service nodes that have been defined for the project appear.</para>

<mediaobject>
  <imageobject>
    <imagedata align="center" format="BMP" role="" 
               fileref="images/DomainSpecificProcesses/NotificationPalette.png"/>
  </imageobject>
</mediaobject>

<para>Using drag and drop, a notification node can be created inside your process.  The
properties can be filled in using the properties view.</para>

<para>Besides any custom properties, the following three properties are available for all work 
items:</para>
<orderedlist>
  <listitem>
    <para><code>Parameter Mapping</code>: Allows you to map the value of a variable in the process 
    to a parameter of the work item.  This allows you to customize the work item based on the
    current state of the actual process instance (for example, the priority of the
    notification could be dependent of some process-specific information).</para>
  </listitem>
  <listitem>
    <para><code>Result Mapping</code>: Allows you to map a result (returned once a work item has been
    executed) to a variable of the process.  This allows you to use results in the remainder
    of the process.</para>
  </listitem>
  <listitem>
    <para><code>Wait for completion</code>: By default, the process waits until the requested work
    item has been completed before continuing with the process.  It is also possible to
    continue immediately after the work item has been requested (and not waiting for the
    results) by setting <code>wait for completion</code> to false.</para>
  </listitem>h
</orderedlist>

<para>Here is an example that creates a domain specific node to execute Java, asking for
the class and method parameters. It includes a custom <filename>java.gif</filename> icon and 
consists of the following files and resulting screenshot:</para>

<programlisting>
import org.drools.core.process.core.datatype.impl.type.StringDataType;
[
  // the Java Node work item located in:
  // project/src/main/resources/META-INF/JavaNodeDefinition.wid
  [
    "name" : "JavaNode",
    "parameters" : [
      "class" : new StringDataType(),
      "method" : new StringDataType(),
    ],
    "displayName" : "Java Node",
    "icon" : "icons/java.gif"
  ]
]</programlisting>

<programlisting>
// located in: project/src/main/resources/META-INF/drools.rulebase.conf
drools.workDefinitions = JavaNodeDefinition.wid WorkDefinitions.conf

// icon for java.gif located in:
// project/src/main/resources/icons/java.gif
</programlisting>

<mediaobject>
  <imageobject>
    <imagedata align="center" format="BMP" 
               fileref="images/DomainSpecificProcesses/JavaNode.png"/>
  </imageobject>
</mediaobject>

    </section>

  </section>

  <section id="sec.example.notifications.workitemhandler">
    <title id="sec.example.notifications.workitemhandler.title" >The <code>NotificationWorkItemHandler</code></title>

    <section>
      <title>Creating a new work item handler</title>

<para>Once we've created our <code>Notification</code> work item definition (see the sections 
above), we can then create a custom implementation of a <emphasis>work item handler</emphasis> that 
will contain the logic to send the notification.</para>

<para>In order to execute our <emphasis>Notification</emphasis> work items, we first create a  
<code>NotificationWorkItemHandler</code> that implements the <code>WorkItemHandler</code> 
interface:</para>

<programlistingco>
  <areaspec>
    <area id="wih.service.ex" coords='18' />
    <area id="wih.mgr.completion" coords='22' />
  </areaspec>
  <programlisting language="java">
package com.sample;

import org.kie.api.runtime.process.WorkItem;
import org.kie.api.runtime.process.WorkItemHandler;
import org.kie.api.runtime.process.WorkItemManager;

public class NotificationWorkItemHandler implements WorkItemHandler {

  public void executeWorkItem(WorkItem workItem, WorkItemManager manager) {
    // extract parameters
    String from = (String) workItem.getParameter("From");
    String to = (String) workItem.getParameter("To");
    String message = (String) workItem.getParameter("Message");
    String priority = (String) workItem.getParameter("Priority");

    // send email
    EmailService service = ServiceRegistry.getInstance().getEmailService();
    service.sendEmail(from, to, "Notification", message);

    // notify manager that work item has been completed
    manager.completeWorkItem(workItem.getId(), null);
  }

  public void abortWorkItem(WorkItem workItem, WorkItemManager manager) {
    // Do nothing, notifications cannot be aborted
  }

}</programlisting>
  <calloutlist>
    <callout arearefs="wih.service.ex">
      <para>The <code>ServiceRegistry</code> class is simply a made-up class that we're using for
      this example. In your own <code>WorkItemHandler</code> implementations, the code containing 
      your domain-specific logic would go here.</para>
    </callout>
    <callout arearefs="wih.mgr.completion">
      <para>Notifying the <emphasis><code>WorkItemManager</code></emphasis> instance when your 
      a work item has been completed is crucial. For many synchronous actions, like sending an
      email in this case, the <code>WorkItemHandler</code> implementation will notify the 
      <code>WorkItemManager</code> in the <code>executeWorkItem(...)</code> method.</para>
    </callout>
  </calloutlist>
</programlistingco>

<para>This <code>WorkItemHandler</code> sends a notification as an email and then 
notifies the WorkItemManager that the work item has been completed.</para>

<para>Note that not all work items can be completed directly. In cases where executing a work item 
takes some time, execution can continue <emphasis>asynchronously</emphasis> and the work item 
manager can be notified later.</para>

<para>In these situations, it might also be possible that a work item is <emphasis>aborted</emphasis>
before it has been completed. The <code>WorkItemHandler.abortWorkItem(...)</code> method can be 
used to specify how to abort such work items.</para>

  <tip>
<para> Remember, if the <code>WorkItemManager</code> is not notified about the completion, the 
process engine will never be notified that your service node has completed.</para>
  </tip>

    </section>

    <section>
      <title>Registering the work item handler</title>

<para><code>WorkItemHandler</code> instances need to  be registered with the 
<code>WorkItemManager</code> in order to be used. In this case, we need to register an instance of
our <code>NotificationWorkItemHandler</code> in order to use it with our process containing a 
<code>Notification</code> work item. We can do that like this:</para>

<programlistingco>
  <areaspec>
    <area id="wih.reg.taskname" coords="4" />
    <area id="wih.reg.handler" coords="5" />
  </areaspec>

  <programlisting language="java">
StatefulKnowledgeSession ksession = kbase.newStatefulKnowledgeSession();
ksession.getWorkItemManager().registerWorkItemHandler(
  "Notification", 
  new NotificationWorkItemHandler()
);
  </programlisting>
  <calloutlist>
    <callout arearefs="wih.reg.taskname" >
      <para>This is the drools name of the <code>&lt;task&gt;</code> (or other task type) node. See
      below for an example.</para>
    </callout>  
    <callout arearefs="wih.reg.handler" >
      <para>This is the instance of our custom work item handler instance!</para>
    </callout>  
  </calloutlist>
</programlistingco>

<para>If we were to look at the BPMN2 syntax for our process with the <code>Notification</code> 
process, we would see something like the following example. Note the use of the 
<code>tns:taskName</code> attribute in the <code>&lt;task&gt;</code> node. This is necessary for the 
<code>WorkItemManager</code> to be able to see which <code>WorkItemHandler</code> instance should
be used with which task or work item.</para>

<programlisting language="xml">
&lt;?xml version="1.0" encoding="UTF-8"?&gt; 
&lt;definitions id="Definition"
             xmlns="http://www.omg.org/spec/BPMN/20100524/MODEL"
             xs:schemaLocation="http://www.omg.org/spec/BPMN/20100524/MODEL BPMN20.xsd"
...
             xmlns:tns="http://www.jboss.org/drools"&gt;

...

  &lt;process isExecutable="true" id="myCustomProcess" name="Domain-Specific Process" &gt;

...

    &lt;task id="_5" name="Notification Task" tns:taskName="Notification" &gt;

...
</programlisting>

  <tip>
<para>Different work item handlers could be used depending on the context. For example, during 
testing or simulation, it might not be necessary to actually execute the work items. In this case 
specialized dummy work item handlers could be used during testing.</para>
  </tip>

    </section>

  </section>

</section>
