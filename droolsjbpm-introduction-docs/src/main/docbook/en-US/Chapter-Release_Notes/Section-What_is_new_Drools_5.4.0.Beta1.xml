<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xmlns="http://docbook.org/ns/docbook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:ns="http://docbook.org/ns/docbook">
  <title>What is New and Noteworthy in Drools 5.4.0.Beta1</title>

  <section>
    <title>Guvnor</title>

    <section>
      <title>Guided Decision Table - Limited Entry</title>

      <para>The Guided Decision Table editor and wizard now support the creation of "Limited Entry" tables.</para>

      <figure>
        <title>Selecting the table format</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="images/Chapter-Release_Notes/limited-entry-1.png" format="PNG"
                       scalefit="0"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>

      <figure>
        <title>Defining Limited Entry constraints with the Wizard</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="images/Chapter-Release_Notes/limited-entry-2.png" format="PNG"
                       scalefit="1"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>

      <figure>
        <title>Defining Limited Entry actions with the Wizard</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="images/Chapter-Release_Notes/limited-entry-3.png" format="PNG"
                       scalefit="1"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>

      <figure>
        <title>An example expanded, limited entry table</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="images/Chapter-Release_Notes/limited-entry-4.png" format="PNG"
                       scalefit="1"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>

      <figure>
        <title>Editing a constraint in the editor</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="images/Chapter-Release_Notes/limited-entry-5.png" format="PNG"
                       scalefit="0"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>

      <figure>
        <title>Editing an action in the editor</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="images/Chapter-Release_Notes/limited-entry-6.png" format="PNG"
                       scalefit="1"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Guided Decision Table - Improved formatting</title>

      <para>With the introduction of support for Limited Entry, the decision table format was improved to better
      differentiate between Condition and Action columns. Furthermore the table header was improved to show more
      information for Action columns.</para>

      <figure>
        <title>Improved formatting and header</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="images/Chapter-Release_Notes/dtable-column-formatting.png" format="PNG"
                       scalefit="1"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Guided Decision Table - Rearranging columns</title>

      <para>The ability to rearrange whole patterns as well as individual conditions in the constraints section of the
      table has been added. This allows the table author to arrange constraints to maximise performance of the resulting
      rules, by placing generalised constraints before more specific. Action columns can also be re-arranged. Both
      patterns and columns are re-arranged by dragging and dropping.</para>

      <figure>
        <title>Re-arranging Condition patterns</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="images/Chapter-Release_Notes/dtable-rearranging-patterns.png"
                       format="PNG" scalefit="0"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>

      <figure>
        <title>Re-arranging columns</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="images/Chapter-Release_Notes/dtable-rearranging-columns.png" format="PNG"
                       scalefit="0"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Guided Decision Table - Actions to retract Facts</title>

      <para>This release brings the ability to define Action columns to retract Facts.</para>

      <para>If you are authoring an Extended Entry decision table the column definition contains basic information and
      the fact being retracted is held in the table itself.</para>

      <figure>
        <title>Defining an Extended Entry retraction</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="images/Chapter-Release_Notes/dtable-retract-extended-entry.png"
                       format="PNG" scalefit="0"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>

      <para>If however you are authoring a Limited Entry decision table the Fact being retracted is defined in the
      column definition.</para>

      <figure>
        <title>Defining a Limited Entry retraction</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="images/Chapter-Release_Notes/dtable-retract-limited-entry.png"
                       format="PNG" scalefit="0"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Guided Decision Table - Binding condition fields</title>

      <para>You can now bind fields in Conditions to variables. These variables can then be used in Predicate or Forumla
      conditions, and Work Item actions.</para>

      <figure>
        <title>Binding a field</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="images/Chapter-Release_Notes/dtable-field-binding1.png" format="PNG"
                       scalefit="0"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>

      <figure>
        <title>A Decision Table using bound fields</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="images/Chapter-Release_Notes/dtable-field-binding2.png" format="PNG"
                       scalefit="1"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Guided Decision Table - Using jBPM Work Item actions</title>

      <para>jBPM Work Items can now be used as Actions; and the corresponding Work Item Handler invoked at runtime. Work
      Item Handlers should be added to the runtime session as normal.</para>

      <para>Work Item input parameters can either be defined as a literal value in the column definition or as a Fact or
      Fact Field binding.</para>

      <para>New Actions have been created to perform the following functions:-</para>

      <itemizedlist>
        <listitem>
          <para>Execute a Work Item</para>
        </listitem>

        <listitem>
          <para>Set the value of a field on an existing Fact to the value of a Work Item output (result)
          parameter.</para>
        </listitem>

        <listitem>
          <para>Set the value of a field on a new Fact to the value of a Work Item output (result) parameter.</para>
        </listitem>
      </itemizedlist>

      <figure>
        <title>New Actions</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="images/Chapter-Release_Notes/dtable-workitems1.png" format="PNG"
                       scalefit="0"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>

      <figure>
        <title>Calling a Work Item</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="images/Chapter-Release_Notes/dtable-workitems2.png" format="PNG"
                       scalefit="0"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>

      <figure>
        <title>Setting a field from a Work Item output (result) parameter</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="images/Chapter-Release_Notes/dtable-workitems3.png" format="PNG"
                       scalefit="0"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Decision table analysis</title>

      <para>On the bottom of Web decision tables, there's now a button <guilabel>Analyze...</guilabel> which will check
      if there issues in your decision table, such as impossible matches and conflicting matches.</para>

      <section>
        <title>Impossible match detection</title>

        <para>An impossible match is a row in a decision table that can never match. For example:</para>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/Chapter-Release_Notes/impossibleMatch.png"></imagedata>
          </imageobject>
        </mediaobject>

        <para>In the decision table above, row 2 is an impossible match, because there is no Person with a minimum age
        of 21 and a maximum age of 20.</para>
      </section>

      <section>
        <title>Conflicting match detection</title>

        <para>A conflicting match are 2 rows in a decision table that can both match.</para>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/Chapter-Release_Notes/conflictingMatch.png"></imagedata>
          </imageobject>
        </mediaobject>

        <para>In the decision table above, row 2 and 3 are a conflicting match, because a Person of age 67 will match
        both rows: it's unclear whether that Person has to pay a fee of 200 or 100.</para>
      </section>
    </section>

    <section>
      <title>REST api changes</title>

      <itemizedlist>
        <listitem>
          <para>Added support to create (PUT) and delete (DELETE) a Category with
          <literal>rest/categories/{categoryName}</literal>.</para>
        </listitem>

        <listitem>
          <para>Removed buggy <literal>category</literal> property from <literal>Package</literal>: it was
          <literal>null</literal> upon GET and ignored upon PUT.</para>
        </listitem>

        <listitem>
          <para>The REST resource to get the assets for a certain category has been moved from
          <literal>rest/categories/{categoryName}</literal> to
          <literal>rest/categories/{categoryName}/assets</literal>.</para>
        </listitem>

        <listitem>
          <para>The REST resources now properly encode and decode the URL's. Note that URL path encoding is different
          than URL query encoding: the former does not accept <literal>+</literal> as encoding for space.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>JBoss AS 6 war is no longer shipped in the release</title>

      <para>This does not mean that Guvnor can not be made to work in AS 6. We are just focusing on JBoss AS 7 and
      Tomcat.</para>
    </section>
  </section>

  <section>
    <title>Planner</title>

    <section>
      <title>Build-in move factories</title>

      <para>Planner now comes with 2 build-in move factories: <literal>GenericChangeMoveFactory</literal> and
      <literal>GenericSwapMoveFactory</literal>. Here's an example that uses both of them:</para>

      <programlisting>  &lt;localSearch&gt;
    &lt;selector&gt;
      &lt;selector&gt;
        &lt;moveFactoryClass&gt;org.drools.planner.core.move.generic.GenericChangeMoveFactory&lt;/moveFactoryClass&gt;
      &lt;/selector&gt;
      &lt;selector&gt;
        &lt;moveFactoryClass&gt;org.drools.planner.core.move.generic.GenericSwapMoveFactory&lt;/moveFactoryClass&gt;
      &lt;/selector&gt;
    &lt;/selector&gt;
    ...
  &lt;/localSearch&gt;</programlisting>

      <para>It's no longer required to write your own Move and MoveFactory implementations, but you still can (and mix
      those in too).</para>
    </section>
  </section>
</section>
