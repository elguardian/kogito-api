<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xml:id="releaseNotes_6.0.0-SNAPSHOT" xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>What is New and Noteworthy in Drools 6.0.0</title>

  <section xml:id="releaseNotes_6.0.0_Expert">
    <title>Drools Expert</title>

    <section>
      <title>Expression timers and additional timers parameters</title>

      <para>When declaring an interval timer it can be sometimes useful to define both the delay
      and interval as an expression instead of a fixed value. To do that it is now possible to
      use an expression timer (indicated by "expr:") as in the following example:</para>

      <example>
        <title>An Expression Timer Example</title>

        <programlisting language="java">declare Bean
    delay   : String = "30s"
    period  : long = 60000
end

rule "Expression timer"
    timer( expr: $d, $p )
when
    Bean( $d : delay, $p : period )
then
end</programlisting>
      </example>

      <para>The expressions, $d and $p in this case, can use any variable defined in the
      pattern matching part of the rule and can be any String that can be parsed in a time
      duration or any numeric value that will be internally converted in a long representing
      a duration expressed in milliseconds.</para>

      <para>Both interval and expression timers can have 3 optional parameters named
      "start", "end" and "repeat-limit". When one or more of these parameters are used the first
      part of the timer definition must be followed by a semicolon ';' and the parameters have
      to be separated by a comma ',' as in the following example:</para>

      <example>
        <title>An Interval Timer with a start and an end</title>

        <programlisting language="java">timer (int: 30s 10s; start=3-JAN-2010, end=5-JAN-2010)</programlisting>
      </example>

      <para>The value for start and end parameters can be a Date, a String representing
      a Date or a long, or more in general any Number, that will be transformed in a Java Date
      applying the following conversion:</para>

      <programlisting language="java">new Date( ((Number) n).longValue() )</programlisting>

      <para>Conversely the repeat-limit can be only an integer and it defines the maximum
      number of repetitions allowed by the timer. If both the end and the repeat-limit parameters
      are set the timer will stop when the first of the two will be matched.</para>

      <para>The using of the start parameter implies the definition of a phase for the timer,
      where the beginning of the phase is given by the start itself plus the eventual delay.
      In other words in this case the timed rule will then be scheduled at times:</para>

      <programlisting language="java">start + delay + n*period</programlisting>

      <para>for up to repeat-limit times and no later than the end timestamp (whichever first).
      For instance the rule having the following interval timer</para>

      <programlisting language="java">timer ( int: 30s 1m; start="3-JAN-2010" )</programlisting>

      <para>will be scheduled at the 30th second of every minute after the midnight of the
      3-JAN-2010. This also means that if for example you turn the system on at midnight of
      the 3-FEB-2010 it won't be scheduled immediately but will preserve the phase defined by
      the timer and so it will be scheduled for the first time 30 seconds after the midnight.
      If for some reason the system is paused (e.g. the session is serialized and then deserialized
      after a while) the rule will be scheduled only once to recover from missing activations
      (regardless of how many activations we missed) and subsequently it will be scheduled
      again in phase with the timer.</para>
    </section>

    <section>
      <title>Better OSGi support</title>

      <para>OSGi support is substantially improved. Also, the production jars no longer have any split packages.</para>
    </section>
  </section>

  <section xml:id="releaseNotes_6.0.0_Guvnor">
    <title>Guvnor</title>

    <section>
      <title>New Maven groupId: org.kie.guvnor</title>

      <para>The Maven groupId has changed from org.drools.guvnor to org.kie.guvnor.</para>

      <para>Before</para>

      <programlisting language="xml">&lt;dependency&gt;
  &lt;groupId&gt;org.drools.guvnor&lt;/groupId&gt;
  ...
&lt;/dependency&gt;</programlisting>

      <para>After</para>

      <programlisting language="xml">&lt;dependency&gt;
  &lt;groupId&gt;org.kie.guvnor&lt;/groupId&gt;
  ...
&lt;/dependency&gt;</programlisting>
    </section>
  </section>

  <section xml:id="releaseNotes_6.0.0_DroolsWorkbench">
    <title>Drools Workbench</title>

    <section>
      <title>General</title>

      <para>Many things are changing for Drools 6.0.</para>

      <para>Along with the functional and feature changes we have restructured the <link
      xlink:href="https://github.com/droolsjbpm/guvnor">Guvnor</link> github repository to better reflect our new
      architecture. Guvnor has historically been the web application for Drools. It was a composition of editors
      specific to Drools, a back-end repository and a simplistic asset management system.</para>

      <para>Things are now different.</para>

      <para>For Drools 6.0 the web application has been extensively re-written to use <link
      xlink:href="http://droolsjbpm.github.io/uberfire/">UberFire</link> that provides a generic Workbench environment,
      a Metadata Engine, Security Framework, a VFS API and clustering support.</para>

      <para>Guvnor has become a generic asset management framework providing common services for generic projects and
      their dependencies. Drools use of both UberFire and Guvnor has born the Drools Workbench.</para>

      <para>A picture always helps:</para>

      <figure>
        <title>New structue</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="images/Chapter-Release_Notes/kie-structure.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>

      <section>
        <title><link xlink:href="https://github.com/droolsjbpm/uberfire">uberfire</link></title>

        <para>UberFire is the foundation of all components for both Drools and jBPM. Every editor and service leverages
        UberFire. Components can be mixed and matched into either a full featured application of used in
        isolation.</para>
      </section>

      <section>
        <title><link xlink:href="https://github.com/droolsjbpm/guvnor">guvnor</link></title>

        <para>Guvnor adds project services and dependency management to the mix.</para>

        <para>At present Guvnor consists of few parts; being principally a port of common project services that existed
        in the old Guvnor. As things settle down and the module matures pluggable workflow will be supported allowing
        for sensitive operations to be controlled by jBPM processes and rules. Work is already underway to include this
        for 6.0.</para>
      </section>

      <section>
        <title><link xlink:href="https://github.com/droolsjbpm/kie-wb-common">kie-wb-common</link></title>

        <para>Both Drools and jBPM editors and services share the need for a common set of re-usable screens, services
        and widgets.</para>

        <para>Rather than pollute Guvnor with screens and services needed only by Drools and jBPM this module contains
        such common dependencies.</para>

        <para>It is possible to just re-use the UberFire and Guvnor stack to create your own project-based workbench
        type application and take advantage of the underlying services.</para>
      </section>

      <section>
        <title><link xlink:href="https://github.com/droolsjbpm/drools-wb">Drools Workbench (drools-wb)</link></title>

        <para>Drools Workbench is the end product for people looking for a web application that is composed of all
        Drools related editors, screens and services. It is equivalent to the old Guvnor.</para>

        <para>Looking for the web application to accompany Drools Expert and Drools Fusion; an environment to author,
        test and deploy rules. This is what you're looking for.</para>
      </section>

      <section>
        <title><link xlink:href="https://github.com/droolsjbpm/kie-wb-distributions/tree/master/kie-drools-wb">KIE
        Drools Workbench (kie-drools-wb)</link></title>

        <para>KIE Drools Workbench (for want of a better name - it's amazing how difficult names can be) is an extension
        of Drools Workbench including jBPM Designer to support Rule Flow.</para>

        <para>jBPM Designer, now being an UberFire compatible component, does not need to be deployed as a separate web
        application. We bundle it here, along with Drools as a convenience for people looking to author Rule Flows along
        side their rules.</para>
      </section>

      <section>
        <title><link xlink:href="https://github.com/droolsjbpm/kie-wb-distributions/tree/master/kie-wb">KIE Workbench
        (kie-wb)</link></title>

        <para>This is the daddy of them all.</para>

        <para>KIE Workbench is the composition of everything known to man; from both the Drools and jBPM worlds. It
        provides for authoring of projects, data models, guided rules, decision tables etc, test services, process
        authoring, a process run-time execution environment and human task interaction.</para>

        <para>KIE Workbench is the old Guvnor, jBPM Designer and jBPM Console applications combined. On steroids.</para>
      </section>

      <section>
        <title>The World is not enough?</title>

        <para>You may have noticed; KIE Drools Workbench and KIE Workbench are in the same repository. This highlights a
        great thing about the new module design we have with UberFire. Web applications are just a composition of
        dependencies.</para>

        <para>You want your own web application that consists of just the Guided Rule Editor and jBPM Designer? You want
        your own web application that has the the Data Modeller and some of your own screens?</para>

        <para>Pick your dependencies and add them to your own UberFire compliant web application and, as the saying
        goes, the world is your oyster.</para>
      </section>
    </section>

    <section>
      <title>UberFire Provided Infrastructure</title>

      <section>
        <title>Virtual File System</title>

        <para>UberFire VFS is a <link xlink:href="http://jcp.org/en/jsr/detail?id=203">NIO.2</link> based API that
        provides a unified interface to access different file systems - by default it uses <link
        xlink:href="http://git-scm.com/">Git</link> as its primary backend implematation. Resources (ie. files and
        directories) are represented, as proposed by NIO.2, as URIs. Here are some examples:</para>

        <itemizedlist>
          <listitem>
            <para>file:///path/to/some/file.txt</para>
          </listitem>

          <listitem>
            <para>git://repository-name/path/to/file.txt</para>
          </listitem>

          <listitem>
            <para>git://repository-name/path/to/dir/</para>
          </listitem>

          <listitem>
            <para>git://my_branch@repository-name/path/to/file.txt</para>
          </listitem>
        </itemizedlist>

        <para>By using Git as its default implementation, UberFire VFS provides out-of-box a versioned system, which
        means that every information stored/deleted has its history preserved.</para>

        <important>
          <para>Your system doesn't need to have GIT installed, UberFire uses <link
          xlink:href="http://www.eclipse.org/jgit/">JGIT</link> internally, a 100% Java based Git implementation.</para>
        </important>
      </section>

      <section>
        <title>Metadata Engine</title>

        <para>Metadata engine provides two complementary services: Indexing and Searching. Both services were designed
        to be as minimum invasive as possible and, in the same time, providing all the complex features needed by the
        subject.</para>

        <section>
          <title>Index</title>

          <para>Indexing is automatically handled on VFS layer in completely transparent way. In order to agregate
          metadata to a VFS resource using the NIO.2 based API, all you need to do is set a resource attributes.</para>

          <important>
            <para>All metadata are stored on dot files alongside its resource. So if anything bad happens to your index
            and it get corrupted, you can always recreate the index based on those persistent dot files.</para>
          </important>

          <para>The metadata engine is not only for VFS resources, behind the scenes there's a powerfull metadata API
          that you can define your own MetaModel with custom MetaTypes, MetaObjects and MetaProperties.</para>
        </section>

        <section>
          <title>Search</title>

          <para>The Metadata Search API is very simple and yet powerful. It provides basically two methods, one that
          allows a full text search (including wildcards and boolean operations) or by a set of predefined
          attributes.</para>
        </section>

        <para>For those curious to know what is under the hood, Metadata engine uses <link
        xlink:href="http://lucene.apache.org/">Apache Lucene 4</link> as its default backend, but was designed to be
        able to have different and eventually mixed/composed backends.</para>
      </section>
    </section>

    <section>
      <title>Drools Workbench - In depth</title>

      <para>Drools Workbench is the corner stone of the new function and features for 6.0.</para>

      <para>Many of the new concepts and functions are described in more detail in the following sections.</para>

      <important>
        <para>Remember Drools Workbench is integrated into other distributions. Therefore many of the core concepts and
        functions are also within the other distributions. Furthemore jBPM web-based Tooling extends from UberFire and
        re-use features from Drools Workbench that are common across the KIE platform; such as Project Explorer, Project
        Editor and the M2 Repository.</para>
      </important>

      <section>
        <title>Home</title>

        <para>Home is where the heart is.</para>

        <para>Drools Workbench starts with a Home Page that will provides short-cut navigation to common tasks.</para>

        <para>What is provided in this release is minimal and largely a cosmetic exercise to hopefully increase
        usability for non-technical people.</para>

        <para>The appearance and content of the Home is likely to change as we approach a final release.</para>

        <figure>
          <title>Home</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="images/Chapter-Release_Notes/drools-wb-homepage.png" format="PNG"/>
            </imageobject>
          </mediaobject>
        </figure>
      </section>

      <section>
        <title>Project Explorer</title>

        <para>The Project Explorer is where most users will find themselves when authoring projects.</para>

        <para>The Project Explorer shows four drop-down selectors that are driven by Group, Repository, Project and
        Package.<itemizedlist>
            <listitem>
              <para>Group : The top level logical entitiy within the KIE world. This can represent a Company,
              Organization, Department etc.</para>
            </listitem>

            <listitem>
              <para>Repository : Groups have access to one or more repositories. Default repositories are setup; but you
              can create or clone your own.</para>
            </listitem>

            <listitem>
              <para>Project : Repositories contain one or more KIE projects. New Projects can be created using the "New"
              Menu option, provided a target repository is selected.</para>
            </listitem>

            <listitem>
              <para>Package : The package concept is no different to Guvnor 5.5. Projects contain packages.</para>
            </listitem>
          </itemizedlist></para>

        <para>Once a Group, Repository, Project and Package are selected the Project Explorer shows the items within
        that context.</para>

        <figure>
          <title>Project Explorer</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="images/Chapter-Release_Notes/drools-wb-projectexplorer.png"
                         format="PNG"/>
            </imageobject>
          </mediaobject>
        </figure>

        <warning>
          <para>The Project Explorer will support both a Business and Technical views. The Technical view will probably
          not make it into 6.0.0.Beta4.</para>
        </warning>
      </section>

      <section>
        <title>Creating new things</title>

        <para>Creation of anything "new" is accomplished using the "New" menu option.</para>

        <para>The types of thing that can be created from the "New" menu option depends upon the selected context.
        Projects require a Repository; rules, tests etc require a Package within a Project. New things are created in
        the context selected in the Project Explorer. I.E. if Repository 1, Project X is selected new items will be
        created in Project X.</para>

        <figure>
          <title>New Menu</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="images/Chapter-Release_Notes/drools-wb-newitem-menu.png" format="PNG"/>
            </imageobject>
          </mediaobject>
        </figure>

        <figure>
          <title>New Popup</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="images/Chapter-Release_Notes/drools-wb-newitem-popup.png" format="PNG"/>
            </imageobject>
          </mediaobject>
        </figure>
      </section>

      <section>
        <title>Editing</title>

        <para>By and large, other than the specific changes mentioned in this document, all of the old Guvnor asset
        editors have been ported to 6.0 with no or little change.</para>

        <para>The layout of the workbench has however changed and the following screen-shots give an example of the new,
        common layout for most editors.</para>

        <section>
          <title>The Editor itself</title>

          <para>Asset editors have been ported to 6.0 with no or little change.</para>

          <figure>
            <title>The Editor</title>

            <mediaobject>
              <imageobject>
                <imagedata align="center" fileref="images/Chapter-Release_Notes/drools-wb-guided-rule-editor.png"
                           format="PNG"/>
              </imageobject>
            </mediaobject>
          </figure>
        </section>

        <section>
          <title>The Source View</title>

          <para>The (DRL) Source View of the asset has been moved to a mini-tab within the editor.</para>

          <figure>
            <title>The Source View</title>

            <mediaobject>
              <imageobject>
                <imagedata align="center" fileref="images/Chapter-Release_Notes/drools-wb-source-view.png" format="PNG"/>
              </imageobject>
            </mediaobject>
          </figure>
        </section>

        <section>
          <title>The Imports View</title>

          <para>Types not within the package that contains the asset being authored need to be imported before they can
          be used.</para>

          <para>Guvnor 5.5 had the user define package-wide imports from the Package Screen. Drools Workbench 6.0 has
          moved the selection of imports from the Package level to the Asset level; positioning the facility on a
          mini-tab within the editor.</para>

          <figure>
            <title>The Imports View</title>

            <mediaobject>
              <imageobject>
                <imagedata align="center" fileref="images/Chapter-Release_Notes/drools-wb-imports.png" format="PNG"/>
              </imageobject>
            </mediaobject>
          </figure>
        </section>

        <section>
          <title>The Meta Data</title>

          <para>Meta Data has been moved to a mini-tab within the editor.</para>

          <figure>
            <title>The Meta Data</title>

            <mediaobject>
              <imageobject>
                <imagedata align="center" fileref="images/Chapter-Release_Notes/drools-wb-metadata.png" format="PNG"/>
              </imageobject>
            </mediaobject>
          </figure>
        </section>
      </section>

      <section>
        <title>Project Editor</title>

        <para>Project editor does what Package Editor did previously. It manages the the KIE projects. You can access
        the Project Editor from the menu bar Tools-&gt;Project Editor. The editor shows the configurations for the
        current active project and the content changes when you move around in your code repository.</para>

        <figure>
          <title>How to access the Project Editor</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="images/Chapter-Release_Notes/PE-menu.png" format="PNG"/>
            </imageobject>
          </mediaobject>
        </figure>

        <section>
          <title>Group artifact version options</title>

          <para>Allows you to set the group, artifact and version id's for the project. Basically this screen is editing
          a pom.xml since we use Maven to build our KIE projects.</para>

          <figure>
            <title>Panel for editing group, artifact and version id</title>

            <mediaobject>
              <imageobject>
                <imagedata align="center" fileref="images/Chapter-Release_Notes/PE-GAV.png" format="PNG"/>
              </imageobject>
            </mediaobject>
          </figure>
        </section>

        <section>
          <title>Dependencies options</title>

          <para>Lets you set the dependencies for the current project. It is possible to pick the the resources from an
          internal repository.</para>

          <figure>
            <title>Dependencies for the current project</title>

            <mediaobject>
              <imageobject>
                <imagedata align="center" fileref="images/Chapter-Release_Notes/PE-dependencies.png" format="PNG"/>
              </imageobject>
            </mediaobject>
          </figure>
        </section>

        <section>
           

          <title>Metadata</title>

           

          <para/>

           The different files used by the Project Editor still have metadata like they did in Guvnor 5.x. 

          <figure>
            <title>Metadata for pom.xml</title>

            <mediaobject>
              <imageobject>
                <imagedata align="center" fileref="images/Chapter-Release_Notes/PE-metadata.png" format="PNG"/>
              </imageobject>
            </mediaobject>
          </figure>

           
        </section>

        <section>
          <title>Knowledge bases and sessions options</title>

          <para>Editor for kmodule.xml explained more detail in the KIE core documentation. Editors for knowledge bases
          and knowledge session inside.</para>

          <figure>
            <title>Knowledge bases and sessions defined in the current project</title>

            <mediaobject>
              <imageobject>
                <imagedata align="center" fileref="images/Chapter-Release_Notes/PE-kbases-and-ksessions.png"
                           format="PNG"/>
              </imageobject>
            </mediaobject>
          </figure>
        </section>

        <section>
          <title>Import suggestions</title>

          <para>In import suggestions it is possible to specify a set of imports used in the project. Each editor has
          it's own imports now. Because of this these imports differ from what Guvnor 5.x Package Editor had, the
          imports are no longer automatically used in each asset, they just make use automated editor in KIE workbench
          easier and suggest fact types that the user might want to use.</para>

          <figure>
            <title>Imports that will be used as suggestions in the editors</title>

            <mediaobject>
              <imageobject>
                <imagedata align="center" fileref="images/Chapter-Release_Notes/PE-imports.png" format="PNG"/>
              </imageobject>
            </mediaobject>
          </figure>
        </section>
      </section>

      <section>
        <title>Incremental Builds</title>

        <para>Whenever a Project is built or an asset saved they are validated.</para>

        <para>In the example below, the Fact Type "Smurf" has not been imported into the project and hence cannot be
        resolved.</para>

        <figure>
          <title>The Problems panel</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="images/Chapter-Release_Notes/drools-wb-incremental-build.png"
                         format="PNG"/>
            </imageobject>
          </mediaobject>
        </figure>
      </section>

      <section>
        <title>BPM Console</title>

        <para>The following sections describe the improvements for the different components provided by the jBPM Console
        NG or the BPM related screens inside KIE Workbench for Beta4.</para>

        <section>
          <title>General Integration with Drools and Core Uberfire Components</title>

          <itemizedlist>
            <listitem>
              <para>Business Oriented access to projects structures</para>
            </listitem>

            <listitem>
              <para>Build and deploy projects containing processes with the standard Kmodule structure</para>
            </listitem>

            <listitem>
              <para>Improvements on security domain configuration</para>
            </listitem>

            <listitem>
              <para>Improvements on single sign on with the Dashboards application</para>
            </listitem>
          </itemizedlist>

          <figure>
            <title>Process Authoring Perspective</title>

            <mediaobject>
              <imageobject>
                <imagedata align="left" fileref="images/Chapter-Release_Notes/BPM-ProcessAuthoring.png"/>
              </imageobject>
            </mediaobject>
          </figure>
        </section>

        <section>
          <title>Process Management</title>

          <itemizedlist>
            <listitem>
              <para>Improved lists with search/filter capabilities</para>
            </listitem>

            <listitem>
              <para>Access to the process model and process instance graph through the Process Designer</para>
            </listitem>
          </itemizedlist>

          <figure>
            <title>Process Instance Details</title>

            <mediaobject>
              <imageobject>
                <imagedata align="left" fileref="images/Chapter-Release_Notes/BPM-ProcessInstanceDetails.png"/>
              </imageobject>
            </mediaobject>
          </figure>

          <figure>
            <title>Process Instances Lists</title>

            <mediaobject>
              <imageobject>
                <imagedata align="left" fileref="images/Chapter-Release_Notes/BPM-ProcessInstanceslist.png"/>
              </imageobject>
            </mediaobject>
          </figure>
        </section>

        <section>
          <title>Tasks List</title>

          <itemizedlist>
            <listitem>
              <para>Calendar and Grid View merged into a single view</para>
            </listitem>

            <listitem>
              <para>Filter capabilities improved</para>
            </listitem>

            <listitem>
              <para>Search and filter is now possible</para>
            </listitem>

            <listitem>
              <para>New task creation allows to set up multiple users and groups for the task</para>
            </listitem>

            <listitem>
              <para>Now you can release every task that you have assigned (WS-HT conformance)</para>
            </listitem>

            <listitem>
              <para>Initial version of the assignments tab added</para>
            </listitem>
          </itemizedlist>

          <figure>
            <title>Unified Filters</title>

            <mediaobject>
              <imageobject>
                <imagedata align="left" fileref="images/Chapter-Release_Notes/BPM-TasksListUnifiedDetails.png"/>
              </imageobject>
            </mediaobject>
          </figure>

          <figure>
            <title>Day View</title>

            <mediaobject>
              <imageobject>
                <imagedata align="left" fileref="images/Chapter-Release_Notes/BPM-TasksListDayView.png"/>
              </imageobject>
            </mediaobject>
          </figure>

          <figure>
            <title>Month View</title>

            <mediaobject>
              <imageobject>
                <imagedata align="left" fileref="images/Chapter-Release_Notes/BPM-TasksListMonthView.png"/>
              </imageobject>
            </mediaobject>
          </figure>
        </section>

        <section>
          <title>Deployments</title>

          <itemizedlist>
            <listitem>
              <para>Deployments screen added for admins</para>
            </listitem>

            <listitem>
              <para>Automatic deployments by default</para>
            </listitem>

            <listitem>
              <para>Custom deployments based on available KModules</para>
            </listitem>

            <listitem>
              <para>Filter capabilities</para>
            </listitem>

            <listitem>
              <para>Undeploy possible only on KModules with no active process instances</para>
            </listitem>
          </itemizedlist>

          <figure>
            <title>Deployed Units</title>

            <mediaobject>
              <imageobject>
                <imagedata align="left" fileref="images/Chapter-Release_Notes/BPM-DeployedUnitsList.png"/>
              </imageobject>
            </mediaobject>
          </figure>
        </section>
      </section>

      <section>
        <title>Data Modeller</title>

        <para>Typically, a business process analyst or data analyst will capture the requirements for a process or
        appliaction and turn these into a formal set of data structures and their relationships. The new Data Modeller
        tool enables configuration of such data models (both logical and physical), without the need for explicit
        coding. Its main goals are to make data models into first class citizens in the process improvement cycle and
        allow for full process automation using data and forms, without the need for advanced development skills.</para>

        <section>
          <title>Key features</title>

          <itemizedlist>
            <listitem>
              <para>Simple data modelling UI</para>
            </listitem>

            <listitem>
              <para>Allows adding conceptual information to the model (such as user friendly labels)</para>
            </listitem>

            <listitem>
              <para>Common tool for both analysts and developers</para>
            </listitem>

            <listitem>
              <para>Automatically generates all assets required for execution</para>
            </listitem>

            <listitem>
              <para>Single representation enables developer roundtrip</para>
            </listitem>
          </itemizedlist>
        </section>

        <para>By default, whenever a new project is created, it automatically associates an empty data model to it. The
        currently active project's data model can be opened from the menu bar Tools-&gt; Data Modeller:</para>

        <figure>
          <title>How to access the Data Modeller</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="images/Chapter-Release_Notes/DM-menu.png"/>
            </imageobject>
          </mediaobject>
        </figure>

        <para/>

        <para>The basic aspect of the Data Modeller is shown in the following screenshot:</para>

        <figure>
          <title>The Data Modeller screen</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="images/Chapter-Release_Notes/DM-screen.png"/>
            </imageobject>
          </mediaobject>
        </figure>

        <para/>

        <para>The Data Modeller screen is divided into the following sections:</para>

        <itemizedlist>
          <listitem>
            <para>Model browser: the leftmost section, which allows creation of new data objects and where the existing
            ones are listed.</para>
          </listitem>

          <listitem>
            <para>Object browser: the middle section, which displays a table with the fields of the data object that has
            been selected in the Model browser. This section also enables creating new attributes for the currently
            selected object.</para>
          </listitem>

          <listitem>
            <para>Object / Attribute editor: the rightmost section. This is a tabbed editor where either the currently
            selected object's properties (as currently shown in the screenshot), or a previously selected object
            attribute's properties, can be modified.</para>
          </listitem>
        </itemizedlist>

        <para/>

        <para>Whenever a data model screen is activated, an additional entry will appear in the top menu, allowing
        creation of new data objects, as well as saving the model's modifications. Saving the model will also generate
        all its assets (pojo's), which will then become available to the rest of the tools.</para>

        <figure>
          <title>The Data Modeller menu</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="images/Chapter-Release_Notes/DM-topmenu.png"/>
            </imageobject>
          </mediaobject>
        </figure>
      </section>

      <section>
        <title>Form Designer</title>

        <para>As well as being able to easily define data structures and their internal relationships, which is possible
        through the new Data Modeller utility, providing a tool that empowers analysts and developers to define the
        graphical interfaces to those data structures is of equal importance. The form designer tool allows
        non-technical users to configure complex data forms for data capture and visualization a WYSIWYG fashion, define
        the relationships between those forms and the underlying data structure(s), and execute those forms inside the
        context of business processes.</para>

        <section>
          <title>Key features</title>

          <itemizedlist>
            <listitem>
              <para>Simple WYSIWYG UI for easy form modelling</para>
            </listitem>

            <listitem>
              <para>Form autogeneration from datamodel/process task or java objects</para>
            </listitem>

            <listitem>
              <para>Data binding for java objects</para>
            </listitem>

            <listitem>
              <para>Customized form layouts</para>
            </listitem>

            <listitem>
              <para>Forms embedding</para>
            </listitem>
          </itemizedlist>
        </section>

        <section>
          <title>Target users:</title>

          <itemizedlist spacing="compact">
            <listitem>
              <para>Process / data analysts. Designing forms.</para>
            </listitem>

            <listitem>
              <para>Developers. Advanced form configuration, such as adding formulas and expressions for dynamic form
              recognition.</para>
            </listitem>
          </itemizedlist>
        </section>

        <figure>
          <title>A peak at the Form Designer aspect is shown in the following screenshot:</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="images/Chapter-Release_Notes/FD-screen.png"/>
            </imageobject>
          </mediaobject>
        </figure>

        <para/>
      </section>

      <section>
        <title>jBPM Dashboard</title>

        <para>The ability to monitor the status of process instances and tasks, is essential to evaluate the correctness
        of their design and implementation. With this in mind, the workbench integrates a complete process and task
        dashboard set, based on the "Dashboard Builder" tool (described below), which provide the views, data providers
        and key performance indicators that are needed to monitor the status of processes and tasks in real-time.</para>

        <section>
          <title>Key features</title>

          <itemizedlist>
            <listitem>
              <para>Visualization of process instances and tasks by process</para>
            </listitem>

            <listitem>
              <para>Visualization of process instances and tasks by user</para>
            </listitem>

            <listitem>
              <para>Visualization of process instances and tasks by date</para>
            </listitem>

            <listitem>
              <para>Visualization of process instances and tasks by duration</para>
            </listitem>

            <listitem>
              <para>Visualization of process instances and tasks by status</para>
            </listitem>

            <listitem>
              <para>Filter by process, process status, process version, task, task status, task start- and
              end-date</para>
            </listitem>

            <listitem>
              <para>Chart drill-down by process</para>
            </listitem>

            <listitem>
              <para>Chart drill-down by user</para>
            </listitem>
          </itemizedlist>
        </section>

        <figure>
          <title>Example of the jBPM dashboard:</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="images/Chapter-Release_Notes/jBPM_dashboard1.png"/>
            </imageobject>
          </mediaobject>
        </figure>

        <para/>
      </section>

      <section>
        <title>M2 Repository</title>

        <para>Upload, download and manage KJars with Guvnor M2 repository.</para>

        <figure>
          <title>M2 Repository</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="images/Chapter-Release_Notes/M2_repo_overview.png" format="PNG"/>
            </imageobject>
          </mediaobject>
        </figure>

        <para>Upload KJars to Guvnor M2 repository:</para>

        <para>A valid KJar must have a pom.xml (and pom.properties) that define the GAV and POJO model dependencies. If
        the pom.properties is missing the user is prompted for the GAV and a pom.properties file is appended to the JAR
        before being uploaded to Guvnor M2 repo.</para>

        <para/>

        <figure>
          <title>2 Repository</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="images/Chapter-Release_Notes/M2_repo_gav_warning.png" format="PNG"/>
            </imageobject>
          </mediaobject>
        </figure>

        <figure>
          <title>M2 Repository</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="images/Chapter-Release_Notes/M2_repo_gav.png" format="PNG"/>
            </imageobject>
          </mediaobject>
        </figure>

        <para>The Guvnor M2 REPO is exposed via REST with URL pattern
        http://{ServerName}/{httpPort}/{droolsWBWarFilename}/rest</para>

        <para/>
      </section>

      <section>
        <title>Data Migration</title>

        <para>jcr2vfs is a cli tool that migrates legancys Guvnor repository to 6.0.</para>

        <para>runMigration --help</para>

        <para>usage: runMigration [options...]</para>

        <para>-f,--forceOverwriteOutputVfsRepository Force overwriting the Guvnor 6 VFS repository</para>

        <para>-h,--help help for the command.</para>

        <para>-i,--inputJcrRepository &lt;arg&gt; The Guvnor 5 JCR repository</para>

        <para>-o,--outputVfsRepository &lt;arg&gt; The Guvnor 6 VFS repository</para>

        <para/>

        <para>Deploy to Guvnor M2 Repository remotely:</para>

        <para>You can deploy to Guvnor M2 Repository throuse SSH. The example belows show how to deploy to Guvnor M2
        Repository using wagon-ssh plugin:</para>

        <programlisting>  &lt;build&gt;
    &lt;extensions&gt;
      &lt;extension&gt;
        &lt;groupId&gt;org.apache.maven.wagon&lt;/groupId&gt;
        &lt;artifactId&gt;wagon-ssh&lt;/artifactId&gt;
        &lt;version&gt;1.0&lt;/version&gt;
      &lt;/extension&gt;
    &lt;/extensions&gt;
  &lt;/build&gt;    
  
  &lt;!-- Enabling the use of FTP --&gt;
  &lt;distributionManagement&gt;
    &lt;repository&gt;
      &lt;id&gt;guvnor-m2-repo&lt;/id&gt;
      &lt;url&gt;sftp://10.66.16.171/local/dev/jboss-as-7.1.1.Final/bin/repository&lt;/url&gt;
    &lt;/repository&gt;
  &lt;/distributionManagement&gt;  </programlisting>

        <para>You may need a login password for scp to work. For example, add following to settings.xml file:</para>

        <programlisting>  &lt;servers&gt;
    &lt;server&gt;
      &lt;id&gt;guvnor-m2-repo&lt;/id&gt;
      &lt;username&gt;yourusername&lt;/username&gt;
      &lt;password&gt;yourpwd&lt;/password&gt;
    &lt;/server&gt;
  &lt;/servers&gt;</programlisting>

        <para/>

        <para/>
      </section>

      <section>
        <title>REST</title>

        <para>The GuvnorNG Rest API provides access to project "service" resources, i.e., any "service" that is not part
        of the underlying persistence mechanism (i.e, Git, VFS).</para>

        <para>The http address to use as base address is http://{ServerName}/{httpPort}/{droolsWBWarFilename}/rest where
        ServerName is the host name on the server on which drools-wb is deployed, httpPort the port number (8080 by
        default development) and droolsWBWarFilename the name of the archived deployed (drools-workbench-6.0.0 for
        version 6.0) without the extension.</para>

        <para>Check this doc for API details: https://app.apiary.io/jervisliu/editor</para>

        <para/>
      </section>
    </section>
  </section>

  <section xml:id="releaseNotes_6.0.0_OptaPlanner">
    <title>OptaPlanner (AKA Drools Planner)</title>

    <section>
      <title>Drools Planner renamed to OptaPlanner</title>

      <para>OptaPlanner is the new name for Drools Planner. OptaPlanner is now standalone, but can still be optionally
      combined with the Drools rule engine for a powerful declarative approach to planning optimization.</para>

      <para>OptaPlanner has a new website (<link
      xlink:href="http://www.optaplanner.org">http://www.optaplanner.org</link>), a <link
      xlink:href="http://www.optaplanner.org/download/download.html">new groupId/artifactId</link> and its own <link
      xlink:href="http://www.optaplanner.org/community/chat.html">IRC channel</link>. It's a rename, not a fork. It's
      still the same license (ASL), same team, ...</para>

      <para>For more information, see <link
      xlink:href="http://www.optaplanner.org/community/droolsPlannerRenamed.html">the full announcement</link>.</para>
    </section>

    <section>
      <title>Faster and easier scoreDRL</title>

      <para>The new ConstraintMatch system is:</para>

      <itemizedlist>
        <listitem>
          <para>Faster: the average calculate count per seconds increases between 7% and 40% on average per use
          case.</para>
        </listitem>

        <listitem>
          <para>Easier to read and write</para>
        </listitem>

        <listitem>
          <para>Far less error-prone. It's much harder to cause score corruption in your DRL.</para>
        </listitem>
      </itemizedlist>

      <para>Before:</para>

      <programlisting language="java">    rule "conflictingLecturesSameCourseInSamePeriod"
        when
            ...
        then
            insertLogical(new IntConstraintOccurrence("conflictingLecturesSameCourseInSamePeriod", ConstraintType.HARD,
                    -1,
                    $leftLecture, $rightLecture));
    end</programlisting>

      <para>After:</para>

      <programlisting language="java">    rule "conflictingLecturesSameCourseInSamePeriod"
        when
            ...
        then
            scoreHolder.addHardConstraintMatch(kcontext, -1);
    end</programlisting>

      <para>Notice that you don't need to repeat the ruleName or the causes (the lectures) no more. OptaPlanner figures
      out it itself through the kcontext variable. Drools automatically exposes the kcontext variable in the RHS, so you
      don't need any extra code for it.</para>

      <para>You also no longer need to hack the API's to get a list of all ConstraintOcurrence's: the ConstraintMatch
      objects (and their totals per constraint) are available directly on the ScoreDirector API.</para>

      <para>For more information, see <link
      xlink:href="http://blog.athico.com/2013/04/score-drl-faster-and-easier-in.html">the blog post</link> and the
      manual.</para>
    </section>

    <section>
      <title>Construction heuristics now use selectors</title>

      <para>The construction heuristics now use the selector architecture so they support selection filtering, etc.
      Sorting can be overwritten at a configuration level (very handy for benchmarking).</para>

      <para>In cases with multiple planning variables (for example period, room and teacher), you can now switch to a
      far more scalable configuration.</para>
    </section>

    <section>
      <title>Automatic solution cloning</title>

      <para>Implementing the <literal>Solution's</literal> planning <literal>clone</literal> method is now optional.
      This means there's less boilerplate code to write and it's hard to cause score corruption in your code.</para>

      <para>For more information, see <link
      xlink:href="http://blog.athico.com/2013/02/automatic-solution-cloning-in-planner.html">the blog post</link> and
      the manual.</para>
    </section>

    <section>
      <title>New build-in scores</title>

      <para>New build-in score definitions include: <literal>HardMediumSoftScore</literal> (3 score levels),
      <literal>BendableScore</literal> (configurable number of score levels), <literal>HardSoftLongScore</literal>,
      <literal>HardSoftDoubleScore</literal>, <literal>HardSoftBigDecimalScore</literal>, ...</para>
    </section>

    <section>
      <title>Planning Variable Listener (shadow variables)</title>

      <para>A planning variable can now have a listener which updates a shadow planning variable.</para>

      <para>A shadow planning variable is a variable that is never changed directly, but can be calculated based on the
      state of the genuine planning variables. For example: in VRP with time windows, the arrival time at a customer can
      be calculated based on the previous customers of that vehicle.</para>
    </section>

    <section>
      <title>New example: VRP with time windows</title>

      <para>The VRP example can now also handle the capacitated vehicle routing problem with time windows.</para>

      <para>Use the import button to import a time windowed dataset.</para>

      <mediaobject>
        <imageobject>
          <imagedata align="center" fileref="images/Chapter-Release_Notes/vehicleRoutingWithTimeWindows.png"
                     format="PNG"/>
        </imageobject>
      </mediaobject>
    </section>

    <section>
      <title>Bi-directional variable relationship for chained variables</title>

      <para>A shadow planning variable can now be <literal>mappedBy</literal> a genuine variable. Planner will
      automatically update the shadow variable if the genuine variable is changed.</para>

      <para>Currently this is only supported for chained variables.</para>
    </section>

    <section>
      <title>TSP and VRP: Chained variables are more scalable</title>

      <para>Several improvements have made use cases like TSP and VRP more scalable. The code has been optimized to run
      significantly faster. Also ,<literal>&lt;subChainSelector&gt;</literal> now supports
      <literal>&lt;maximumSubChainSize&gt;</literal> to scale out better.</para>
    </section>

    <section>
      <title>New example: Project job scheduling</title>

      <para>Project job scheduling is a form of job shop scheduling, for example to schedule the production of diverse
      books, cars or other products to machines and employees (thanks to Lukáš Petrovický).</para>
    </section>

    <section>
      <title>Benchmarker improvements</title>

      <itemizedlist>
        <listitem>
          <para>The best solution mutation statistic shows for every new best solution found, how many variables needed
          to change to improve the last best solution.</para>
        </listitem>

        <listitem>
          <para>The step score statistic shows how the step score evolves over time.</para>
        </listitem>

        <listitem>
          <para>The Benchmarker now highlights infeasible solutions with an orange exclamation mark.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Example improvements</title>

      <itemizedlist>
        <listitem>
          <para>The GUI's of course scheduling, exam scheduling, hospital bed planning and sport scheduling have been
          improved.</para>
        </listitem>

        <listitem>
          <para>The optaplanner examples Swing GUI has been redesigned to take up less space.</para>
        </listitem>

        <listitem>
          <para>A web variant of the cloud balancing example has been added to optaplanner-webexamples.war.</para>
        </listitem>

        <listitem>
          <para>The Benchmarker now shows standard deviation per solver configuration (thanks to Miroslav
          Svitok).</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Other improvements</title>

      <itemizedlist>
        <listitem>
          <para>Domain classes that extend/implement a <literal>@PlanningEntity</literal> class or interface can now be
          used as planning entities.</para>
        </listitem>

        <listitem>
          <para>Late Acceptance improved.</para>
        </listitem>

        <listitem>
          <para>Ratio based entity tabu (thanks to Lukáš Petrovický)</para>
        </listitem>

        <listitem>
          <para>Drools properties can now be optionally specified in the solver configuration XML.</para>
        </listitem>

        <listitem>
          <para>Mimic selection: usefull to create a cartesian product selection of 2 change move selectors that move
          different variables of the <emphasis>same</emphasis> entity</para>
        </listitem>

        <listitem>
          <para>KieBase support</para>
        </listitem>

        <listitem>
          <para>Nullable variables support improved</para>
        </listitem>

        <listitem>
          <para>OSGi support out-of-the-box in the optaplanner jars.</para>
        </listitem>
      </itemizedlist>
    </section>
  </section>

  <section xml:id="releaseNotes_6.0.0_DashboardBuilder">
    <title>Dashboard Builder</title>

    <section>
      <title>What is JBoss Dashboard Builder?</title>

      <para>The Dashboard Builder is a full featured web application which allows non-technical users to visually create
      business dashboards. Dashboard data can be extracted from heterogeneous sources of information such as JDBC
      databases or regular text files. It also provides a generic process dashboard for the jBPM Human Task module. Such
      dashboard can display multiple key performance indicators regarding process instances, tasks and users.</para>

      <para>Some ready-to-use sample dashboards are provided as well, for demo and learning purposes.</para>

      <section>
        <title>Key features:</title>

        <itemizedlist spacing="compact">
          <listitem>
            <para>Visual configuration of dashboards (Drag'n'drop).</para>
          </listitem>

          <listitem>
            <para>Graphical representation of KPIs (Key Performance Indicators).</para>
          </listitem>

          <listitem>
            <para>Configuration of interactive report tables.</para>
          </listitem>

          <listitem>
            <para>Data export to Excel and CSV format.</para>
          </listitem>

          <listitem>
            <para>Filtering and search, both in-memory or SQL based.</para>
          </listitem>

          <listitem>
            <para>Process and tasks dashboards with jBPM.</para>
          </listitem>

          <listitem>
            <para>Data extraction from external systems, through different protocols.</para>
          </listitem>

          <listitem>
            <para>Granular access control for different user profiles.</para>
          </listitem>

          <listitem>
            <para>Look'n'feel customization tools.</para>
          </listitem>

          <listitem>
            <para>Pluggable chart library architecture.</para>
          </listitem>

          <listitem>
            <para>Chart libraries provided: NVD3 &amp; OFC2.</para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>Target users:</title>

        <itemizedlist spacing="compact">
          <listitem>
            <para>Managers / Business owners. Consumer of dashboards and reports.</para>
          </listitem>

          <listitem>
            <para>IT / System architects. Connectivity and data extraction.</para>
          </listitem>

          <listitem>
            <para>Analysts. Dashboard composition &amp; configuration.</para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>More info:</title>

        <para>For more info on the Dashboard Builder application, please refer to: <link
        xlink:href="https://github.com/droolsjbpm/dashboard-builder/blob/master/docs/quick-start-guide/index.html">Dash
        Builder Quick Start Guide</link>.</para>
      </section>
    </section>
  </section>
</section>
