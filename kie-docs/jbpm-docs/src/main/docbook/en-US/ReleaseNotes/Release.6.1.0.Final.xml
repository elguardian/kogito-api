<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0"
  xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
  xml:base="./../" xml:id="jBPMReleaseNotes610" xmlns="http://docbook.org/ns/docbook"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:ns="http://docbook.org/ns/docbook">
  <title>New and Noteworthy in jBPM 6.1.0</title>
  <para>jBPM 6.1 comes with a ton of smaller improvements and bug fixes (done over the last few months
  on top of 6.0.1.Final), and also includes some important new features, adding to the foundation
  delivered as part of jBPM 6.0.</para>
  <section>
    <title>Embedding forms in external applications</title>
    <para>Now you can embed and run process/task forms that live inside the Kie-Workbench just adding a JavaScript
      library to your webapps.
      Look at the <link linkend="sect-formmodeler-UsingFormsclient">Using forms on client applications</link> section
      to see the full functionality and usage examples.
    </para>
  </section>
  <section>
    <title>Attaching documents to forms</title>
    <para>Added new file type to manage upload documents on forms and store them on process variables. Using the
      <emphasis>Pluggable Variable Persistence</emphasis> you'll be able to create your own <emphasis>Marshalling
      Strategy</emphasis> and store the document contents on different systems (Database, Alfresco, Google Docs...)
      or use the default implementation and store them in your File System.
    </para>
  </section>
  <section>
    <title>Web Service (SOAP) interface for remote API</title>
    <para>The execution server, that is part of the jbpm-console web tooling, now also comes
    with a Web Service interface (in addition to the existing REST, JMS and Java client interfaces).
    </para>
    <!-- marco to add more details -->
  </section>
  <section>
    <title>Deployment descriptors</title>
    <para>Deployment descriptors have been added as an optional, yet powerful way of configuring
      deployment units - kjars. Deployment descriptors allow to configure (among others)</para>
    <para>
      <itemizedlist>
        <listitem>
          <para>persistence unit names</para>
        </listitem>
        <listitem>
          <para>work item handlers</para>
        </listitem>
        <listitem>
          <para>event listeners (process, agenda, task)</para>
        </listitem>
        <listitem>
          <para>roles (for authorizarion - see section 1.5)</para>
        </listitem>
      </itemizedlist>
    </para>
    <para>Deployment descriptors can be configured on various levels for enhanced flexibility to
      allow simple override functionality. Detailed definition of deployment descriptor can be found
      in <link linkend="jBPMRuntimeManagement">section 14.1.1. Deployment descriptors</link></para>
  </section>
  <section>
    <title>Role-based authorization at runtime for process definitions and process instances</title>
    <para>The process definition and process instance view in the jbpm console now also take the
      role-based access control restrictions into account that can be defined on the project the
      process is defined in. You can limit the visibility of a project (or repository as a whole) by
      associating some roles with it that are required to be able to see the project (or
      repository). This can be done when creating the repository, or bu using the command line
      interface to connect to the execution server. The deployment descriptor (see previous section)
      also allows you to further customize these roles at deployment time. At runtime, the views
      will check if the current logged in user has one of the necessary roles to be able to see that
      process. If not, the user will not see this process or process instance in the process
      definition or process instance list respectively. </para>
  </section>
  <!-- marco to add more details - section>
    <title>Remote API updates</title>
    <para/>
  </section-->
  <section>
    <title>jBPM installer updates</title>
    <para>The installer is updated to support: <itemizedlist>
        <listitem>
          <para>Wildfly 8.1 as application server</para>
        </listitem>
        <listitem>
          <para>Eclipse BPMN2 Modeler 1.0.2</para>
        </listitem>
        <listitem>
          <para>Eclipse Kepler SR2</para>
        </listitem>
      </itemizedlist>
    </para>
  </section>
  <section>
    <title>jBPM Spring integration</title>
    <para>Spring integration has been improved to allow complete configuration of jBPM runtime using
      Spring XML. That essentially means there are number of factory beans provided as part of
      droolsjbpm-integration module that significanlty simplifies configuration of jBPM. Moreover it
      allows various configuration options such as:</para>
    <para>
      <itemizedlist>
        <listitem>
          <para>reply on JTA and entity manager factory</para>
        </listitem>
        <listitem>
          <para>rely on JTA and shared entity manager</para>
        </listitem>
        <listitem>
          <para>rely on local transactions and entity manager factory</para>
        </listitem>
        <listitem>
          <para>rely on local transactions and shared entity manager</para>
        </listitem>
      </itemizedlist>
    </para>
    <para>Details about spring configuration can be found in <link
        xlink:href="http://mswiderski.blogspot.com/2014/01/jbpm-6-with-spring.html">this
        article</link>.</para>
  </section><section>
    <title>Other</title>
    <para>Smaller enhancements also include: <itemizedlist>
        <listitem>
          <para>Task service (query) improvements, significantly speeding up queries when you have a
            large numbers of tasks in the database.</para>
        </listitem>
        <listitem>
          <para>Various improvements to the asynchronous job executor so it can handle larger loads
            more easily and can be configured (number of parallel threads executing the jobs,
            retries, etc.).</para>
        </listitem>
        <listitem>
          <para>Ability to configure task administrator groups in a UserTask (similar to how you
            already could configure individual task administrators).</para>
        </listitem>
        <listitem>
          <para>Removed limitation on custom implementations of work item handler, event listeners
            that had to be placed on global classpath - usually in jbpm-console.war/WEB-INF/lib.
            With that custom classes can be added as maven dependencies into the project and will
            be registered on underlying components (ksession).</para>
        </listitem>
      </itemizedlist>
    </para>
  </section>
</section>
