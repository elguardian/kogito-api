<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xmlns="http://docbook.org/ns/docbook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:ns="http://docbook.org/ns/docbook">
  <title>Synchronizing with Workbench Repositories</title>
    
  <para>From Eclipse, you can synchronize your local workspace with one or more repositories that
  are managed inside the workbench application.  This enables collaboration between developers using
  Eclipse and users of the web-based workbench (business analysts or end users for example).  
  Synchronization between the workbench repositories and your local version of these projects is
  done using Git (a popular distributed source code version control system).</para>
  
  <para>When creating and executing processes inside Eclipse, you are creating them on your local
  file system.  You can however also import an existing repository from the Workbench, apply changes
  and push these changes back into the Workbench repositories.  We are using existing Git tools for
  this.  Note that this section will describe how to do this using the EGit tooling (Eclipse Tooling
  for Git which comes by default with most versions of Eclipse), but feel free to use your preferred
  Git tool instead.</para>
  
  <note><para>This section is not intended to explain what Git is, or how to use EGit, in detail.  If
  you don't have any experience with Git and/or EGit, it might be recommended to read up on them first
  if necessary.</para></note>
  
  <section>
    <title>Importing a workbench repository</title>
    
    <para>To import an existing repository from the workbench, you can use the EGit import wizard.
    In the File menu, select "Import ..." and in the Git category, select "Projects from Git" and
    click "Next >".  This should open a new dialog where you should select the location of the
    repository you would like to import.  Since we are connecting to a repository that is managed
    by the workbench application, select "URI" and click "Next >" once more.</para> 
    
    <para>Use the following URI to connect to your workbench repositories:</para>
    <programlisting>git://&lt;hostname&gt;/&lt;repository_name&gt;</programlisting>
    
    <para>For example, if you are running the workbench application on your local host (for
    example by using the jbpm-installer), and you want to import the jbpm-playground repo, use the
    following URI:</para>
    <programlisting>git://localhost/jbpm-playground</programlisting>
    
    <para>Fill in the URI of the repository you would like to import, as for example shown below,
    and click "Next >".</para>
  
    <figure>
      <mediaobject>
        <imageobject>
          <imagedata align="center"
                     fileref="images/EclipseJBPM/ImportWizard1.png"
                     format="PNG"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>
    
    <para>You will be asked to select which branch you would like to import.  Select the master branch
    and click "Next >" again.</para>
    
    <para>Finally, you need to specify where on your local file system you would like this repository
    to be created.  Fill in the directory (you can use the Browse button to select the folder in question,
    and if necessary you can create a new folder there as well) and click "Next >".  This will now download
    the repository to the folder you just selected.</para>
    
    <figure>
      <mediaobject>
        <imageobject>
          <imagedata align="center"
                     fileref="images/EclipseJBPM/ImportWizard2.png"
                     format="PNG"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>
    
    <para>You still need to import the repository you just downloaded as a project in your Eclipse
    workspace.  Select "Import as general project" and after clicking "Next >", give it a name and
    click "Finish".  After doing so, your workspace should now contain your repository, and you should
    be able to browse, open and edit the various assets inside.</para>

    <figure>
      <mediaobject>
        <imageobject>
          <imagedata align="center"
                     fileref="images/EclipseJBPM/ImportWizard3.png"
                     format="PNG"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>
    
  </section>

  <section>
    <title>Committing changes to the workbench</title>
    
    <para>You can commit and push changes (you do locally) back to the workbench repositories.  To
    commit changes, right-click on your repository project and select "Team -> Commit ...".  A new
    dialog pops up, showing all the changes you have on your local file system.  Select the files
    you want to commit (if you double-click them, you can get an overview of the changes you did for
    that file), provide an appropiate commit message and click "Commit".</para>
    
    <figure>
      <mediaobject>
        <imageobject>
          <imagedata align="center"
                     fileref="images/EclipseJBPM/Commit.png"
                     format="PNG"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>
    
    <para>Once you've committed your change to your local git, you still need to push it to the
    workbench repository.  Right-click your project again, and select "Team -> Push to Upstream".
    </para>
    
    <note><para>You are only allowed to push changes upstream if your local version
    includes all recent changes (otherwise you might be overriding someone else's changes).  You
    might be forced to update (and if necessary resolve conflicts) before you are allowed to commit
    any changes.</para></note>   
    
  </section>
    
  <section>
    <title>Updating from to the workbench</title>
    
    <para>To retrieve the latest changes from the workbench repository, right-click your repository
    project and select "Team -> Fetch from Upstream".  This will fetch all changes from the workbench
    repository, but not yet apply them to your local version.  Now right-click your project again and
    select "Team -> Merge ...".  In the dialog that pops up next, you need to select "origin/master"
    branch (under Remote Tracking) to indicate that you want to merge in all changes from the original
    repository in the workbench, and click "Merge".</para>
    
    <figure>
      <mediaobject>
        <imageobject>
          <imagedata align="center"
                     fileref="images/EclipseJBPM/Update.png"
                     format="PNG"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>
    
    <note><para>It is possible that you have committed and/or conflicting changes in your local
    version, you might have to resolve these conflicts and commit the merge results before you
    will be able to complete the merge successfully.  It is recommended to update regularly, before
    you start updating a file locally, to avoid merge conflicts being detected when trying to
    commit changes.</para></note>
    
  </section>
    
  <section>
    <title>Working on individual projects</title>
    
    <para>When you import a repository, it will download all the projects that are inside that
    repository.  It is however useful to mount one specific project as a separate Java project in
    Eclipse.  When you do this, Eclipse will be able to interpret the information in the project
    pom.xml file (that you created in the workbench), download and include any dependencies you
    specified, compile any Java classes you have in your project (that you for example created with
    the data modeler), etc.</para>
    
    <para>To do so, right-click on one of the projects in your repository project and select
    "Import ..." and under the Maven category, select "Existing Maven Projects" (as shown below)
    and click Next.</para>
    
    <figure>
      <mediaobject>
        <imageobject>
          <imagedata align="center"
                     fileref="images/EclipseJBPM/ImportProject1.png"
                     format="PNG"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>
    
    <para>In the next page, you should see the pom.xml of the project you selected.  Click Finish.</para>
    
    <figure>
      <mediaobject>
        <imageobject>
          <imagedata align="center"
                     fileref="images/EclipseJBPM/ImportProject2.png"
                     format="PNG"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>
    
    <para>If your project requires some of the jBPM libraries to correctly compile and/or execute
    any Java classes in your project (for example if you have test classes in your project that
    start up a jBPM engine and execute some tests for your project, or if you are using the data
    modeler, which will add some annotations to the generated Java classes), you still need to add
    the jBPM libraries to the classpath of your project.  To do so, simply convert your project
    into a jBPM project, which will add the jBPM library to your project's classpath.  Right-click
    your project and select "Configure -> Convert to jBPM Project".  Your project should now
    have a jBPM Library added to its classpath (it might be necessary to clean your project to
    pick up this change and recompile all Java classes).</para>
    
    <figure>
      <mediaobject>
        <imageobject>
          <imagedata align="center"
                     fileref="images/EclipseJBPM/ImportProject3.png"
                     format="PNG"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>
    
  </section>
    
</section>