<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xmlns="http://docbook.org/ns/docbook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:ns="http://docbook.org/ns/docbook">
  <title>What is New and Noteworthy in Drools 5.4.0.Beta2</title>

  <section>
    <title>Guvnor</title>

    <section>
      <title>Guvnor requirements change</title>

      <para>Guvnor 5.4.x requires at least Java 6 to run. The Drools and jBPM will still run on Java 5. Guvnor 5.3.x
      hotfixes will still run on Java 5 too.</para>
    </section>

    <section>
      <title>Guvnor configuration change</title>

      <para>Any custom configuration in the guvnor war in <filename>WEB-INF/components.xml</filename> must now happen in
      <filename>WEB-INF/beans.xml</filename>.</para>
    </section>

    <section>
      <title>Decision table analysis</title>

      <para>On the bottom of Web decision tables, the button <guilabel>Analyze...</guilabel> that checks for issues in
      your decision table, now also checks for 2 new detections:</para>

      <section>
        <title>Duplicate match detection</title>

        <para>A duplicate match are 2 rows in a decision table that can both match but have the same actions.</para>

        <para>For example: a person between 20 and 40 has to pay a fee of 400 and a person between 30 and 50 has to pay
        a fee of 400 too. These 2 rows duplicate each other. If the fee would be different between them, then they would
        conflict each other.</para>
      </section>

      <section>
        <title>Multiple values for one action detection</title>

        <para>A multiple values for one action match is 1 row in a decision table who's actions contradict itself. This
        is a common problem in limited entry tables, but rare in non-limited entry tables.</para>

        <para>For example: a person below 40 has to pay the standard fee (400) and also has to pay the youngster fee
        (200). Since fee can only be set once, that's a problem.</para>
      </section>
    </section>

    <section>
      <title>Decision table - BRL fragments</title>

      <para>BRL fragments can now be used for Condition and/or Action columns.</para>

      <figure>
        <title>Adding a BRL fragment</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="images/Chapter-Release_Notes/dtable-advanced-columns.png" format="PNG"
                       scalefit="0"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>

      <para>A BRL fragment is a section of a rule created using Guvnor's (BRL) Guided Rule Editor: Condition columns
      permit the definition of "WHEN" sections and Action columns the definition of "THEN" sections. Fields defined
      therein as "Template Keys" become columns in the decision table.</para>

      <figure>
        <title>A Condition BRL fragment</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="images/Chapter-Release_Notes/dtable-brl-condition.png" format="PNG"
                       scalefit="0"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>

      <figure>
        <title>An Action BRL fragment</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="images/Chapter-Release_Notes/dtable-brl-action.png" format="PNG"
                       scalefit="1"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>

      <para>Consequently any rule that could be defined with the (BRL) Guided Rule Editor can now be defined with a
      decision table; including free-format DRL and DSL Sentences.</para>

      <para>BRL fragments are fully integrated with other columns in the decision table, so that a Pattern or field
      defined in a regular column can be referenced in the BRL fragments and vice-versa.</para>

      <figure>
        <title>A decision table with BRL fragments and regular columns</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="images/Chapter-Release_Notes/dtable-brl-columns.png" format="PNG"
                       scalefit="1"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Decision table \ Template data copy and paste rows</title>

      <para>You can now copy and paste rows in both the guided Decision Table and Template Data editors.</para>

      <para>Simply right-click a row in the tables' left hand-side selector column and choose the appropriate
      operation.</para>

      <figure>
        <title>Copying a row</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="images/Chapter-Release_Notes/dtable-copy-paste-rows.png" format="PNG"
                       scalefit="0"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>BRL Editor - Remove Constraint\Action Value definition</title>

      <para>When creating new constraints or actions in the BRL guided (rule) editor it is simple to define a value as
      literal, or formula or expression. However, up until now, changing the value type required deletion of the whole
      constraint or action. This release brings the ability to remove the value definition thus enabling you to change a
      literal value to a formula etc without needing to delete the whole constraint or action.</para>

      <figure>
        <title>Copying a row</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="images/Chapter-Release_Notes/brl-remove-value-types.png" format="PNG"
                       scalefit="1"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>
    </section>
  </section>

  <section>
    <title>Planner</title>

    <section>
      <title>Benchmarker supports custom input and output files</title>

      <para>The Benchmarker can now read and write the input and output files from any format, through the
      <literal>ProblemIO</literal> interface. The default is still an XStream implementation.</para>
    </section>
  </section>
</section>
