<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xmlns="http://docbook.org/ns/docbook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:ns="http://docbook.org/ns/docbook">
  <title>Ejb</title>
       <para>jBPM since version 6.2 provides out of the box integration layer with Enterprise Java
              Beans (EJB) for both local and remote interaction. </para>
       <para>Ejb services are brought by following modules:<itemizedlist>
                     <listitem>
                            <para>jbpm-services-ejb-api</para>
                            <para>API module that extends jbpm-services-api with EJB specific
                                   interfaces and objects</para>
                     </listitem>
                     <listitem>
                            <para>jbpm-services-ejb-impl</para>
                            <para>EJB extension to core services</para>
                     </listitem>
                     <listitem>
                            <para>jbpm-services-ejb-timer</para>
                            <para>jBPM Scheduler Service implementation backed by EJB Timer
                                   Service</para>
                     </listitem>
                     <listitem>
                            <para>jbpm-services-ejb-client</para>
                            <para>EJB remote client implementation for remote interaction, provides
                                   JBoss AS support out of the box</para>
                     </listitem>
              </itemizedlist></para>
       <para>EJB layer is based on jbpm services and thus provides almost same capabilities as the
              core module though there are some imiliations when it comes to remote interfaces. Main
              difference is for the DeploymentService that has been limited for remote ejb service
              to following methods:<itemizedlist>
                     <listitem>
                            <para>deploy</para>
                     </listitem>
                     <listitem>
                            <para>undeploy</para>
                     </listitem>
                     <listitem>
                            <para>activate</para>
                     </listitem>
                     <listitem>
                            <para>deactivate</para>
                     </listitem>
                     <listitem>
                            <para>isDeployed</para>
                     </listitem>
              </itemizedlist></para>
       <para>Main rationale behind is to avoid returning runtime objects such as RuntimeManager over
              EJB remote as it won't bring any value because it will be "disconnected" state.</para>
       <para>All other services do provide exact same set of functionality as core module.</para>
       <section>
              <title>Ejb services implementation</title>
              <para>Ejb services as an extension of core services provide EJB based execution
                     semantic and based on various EJB specific features.<itemizedlist>
                            <listitem>
                                   <para>DeploymentServiceEJBImpl</para>
                                   <para>is implemented as ejb singleton with container managed
                                          concurrency and lock type set to write</para>
                            </listitem>
                            <listitem>
                                   <para>DefinitionServiceEJBImpl </para>
                                   <para>is implemented as ejb singleton with container managed
                                          concurrency with overall lock type set to read, except
                                          buildProcessDefinition method that has lock type set to
                                          write</para>
                            </listitem>
                            <listitem>
                                   <para>ProcessServiceEJBImpl</para>
                                   <para>is implemented as stateless session bean</para>
                            </listitem>
                            <listitem>
                                   <para>RuntimeDataServiceEJBImpl</para>
                                   <para>is implemented as ejb singleton with mojority of methods
                                          with lock type read, except following that are with lock
                                          type write:<itemizedlist>
                                                 <listitem>
                                                  <para>onDeploy</para>
                                                 </listitem>
                                                 <listitem>
                                                  <para>onUnDeploy</para>
                                                 </listitem>
                                                 <listitem>
                                                  <para>onActivte</para>
                                                 </listitem>
                                                 <listitem>
                                                  <para>onDeactivate</para>
                                                 </listitem>
                                          </itemizedlist></para>
                            </listitem>
                            <listitem>
                                   <para>UserTaskServiceEJBImpl</para>
                                   <para>is implemented as stateless session bean</para>
                            </listitem>
                     </itemizedlist></para>
              <para><emphasis role="bold">Transactions</emphasis></para>
              <para>Transaction is managed by EJB container thus there is no need to setup any sort
                     of transaction manager or user transaction within application code.</para>
              <para/>
              <para><emphasis role="bold">Identity provider</emphasis></para>
              <para>Identity provider by default is backed by EJBContext and will rely on caller
                     principal information for both name and roles. When inspecting IdentityProvider
                     interface there are two methods related to roles:<itemizedlist>
                            <listitem>
                                   <para>getRoles</para>
                                   <para>this method returns empty list due to the fact EJBContext
                                          does not provide options to fetch all roles for given
                                          user</para>
                            </listitem>
                            <listitem>
                                   <para>hasRole</para>
                                   <para>this method will delegate to context's isCallerInRole
                                          method</para>
                            </listitem>
                     </itemizedlist></para>
              <para>This means that ejb must be secured according to JEE security practices to
                     authentiate and authorize users so valid information will be available. In case
                     no authentication/authorization is configured for EJB services an anonymous
                     user is always assumed.</para>
              <para>In addition to that, EJB services acept CDI sytly injection for IdentityProvider
                     in case another (non ejb) security model is used. Simply create valid CDI bean
                     that implements org.kie.internal.identity.IdentityProvider and make it
                     available for injection with application and such implementation will take
                     precedence over EJBContext based identity provider.</para>
              <para/>
              <para><emphasis role="bold">Deployment synchronization</emphasis></para>
              <para>Deployment synchronization is enabled by default and will attempt to synchronize
                     any deployments every 3 seconds. It is implemented as ejb singleton with
                     container managed concurrency and lock type set to write. Under the covers it
                     utilizes EJB TimerService to schedule the synchronization jobs.</para>
              <para/>
              <para><emphasis role="bold">EJB Scheduler Service</emphasis></para>
              <para>jBPM uses scheduler service to deal with time based activities such as timer
                     events, deadlines, etc. When running in EJB environment and EJB Timer Service
                     based scheduler will be used. It will be automatically registered for all
                     instances of RuntimeManager. When it comes to cluster support application
                     server specific configuration might be required.</para>
              <para/>
              <para><emphasis role="bold">UserGroupCallback and UserInfo selection</emphasis></para>
              <para>UserGroupCallback and UserInfo might differ for various applications and thus
                     should be sort of pluggable. With EJB we could not make it directly available
                     for injections as they could not be injected with common type so there is
                     another mechanism that allows to select one of provided out of the box
                     implementation or to give a custom one. This mechanism is based on ssytem properties:<itemizedlist>
                            <listitem>
                                   <para>org.jbpm.ht.callback</para>
                                   <para>specify what implementation of user group callback will be selected<itemizedlist>
                                                 <listitem>
                                                  <para>mvel - default mostly used for
                                                  testing</para>
                                                 </listitem>
                                                 <listitem>
                                                  <para>ldap - ldap backed implementation - requires
                                                  additional configuration via
                                                  jbpm.usergroup.callback.properties file</para>
                                                 </listitem>
                                                 <listitem>
                                                  <para>db - data base backed implementation -
                                                  requires additional configuration via
                                                  jbpm.usergroup.callback.properties file</para>
                                                 </listitem>
                                                 <listitem>
                                                  <para>jaas - delegates to container to fetch
                                                  information about user data</para>
                                                 </listitem>
                                                 <listitem>
                                                  <para>props - simple property based callback -
                                                  requires additional file that will keep all
                                                  information (users and groups)</para>
                                                 </listitem>
                                                 <listitem>
                                                  <para>custom - custom implementation that requires
                                                  to have additional system property set (FQCN of
                                                  the implementation) -
                                                  org.jbpm.ht.custom.callback</para>
                                                 </listitem>
                                          </itemizedlist></para>
                            </listitem>
                            <listitem>
                                   <para>org.jbpm.ht.userinfo</para>
                                   <para>specify what implementation of UserInfo shall be used, one of:<itemizedlist>
                                                 <listitem>
                                                  <para>ldap - backed by ldap - requires
                                                  configuration via jbpm-user.info.properties
                                                  file</para>
                                                 </listitem>
                                                 <listitem>
                                                  <para>db - backed by data base - requires
                                                  configuration via jbpm-user.info.properties
                                                  file</para>
                                                 </listitem>
                                                 <listitem>
                                                  <para>props - backed by simple property
                                                  file</para>
                                                 </listitem>
                                                 <listitem>
                                                  <para>custom - custom implementation that requires
                                                  to have additional system property set (FQCN of
                                                  the implementation) -
                                                  org.jbpm.ht.custom.userinfo</para>
                                                 </listitem>
                                          </itemizedlist></para>
                            </listitem>
                     </itemizedlist></para>
              <para>System properties can either be added to the startup configuration of the server
                     (jvm) which is recommended or be set programmatically before services will be
                     used - for example with custom @Startup bean that will configure it properly
                     for selected callback and user info.</para>
              <para>A example application that utilizes EJB services can be found <link
                            xlink:href="https://github.com/jsvitak/jbpm-6-examples/tree/master/rewards-basic"
                            >here</link>.</para>
       </section>
       <section>
              <title>Local interface</title>
              <para>Local EJB services are brought via dedicated local interfaces that extends core services:<itemizedlist>
                            <listitem>
                                   <para>org.jbpm.services.ejb.api.DefinitionServiceEJBLocal</para>
                            </listitem>
                            <listitem>
                                   <para>org.jbpm.services.ejb.api.DeploymentServiceEJBLocal</para>
                            </listitem>
                            <listitem>
                                   <para>org.jbpm.services.ejb.api.ProcessServiceEJBLocal</para>
                            </listitem>
                            <listitem>
                                   <para>org.jbpm.services.ejb.api.RuntimeDataServiceEJBLocal</para>
                            </listitem>
                            <listitem>
                                   <para>org.jbpm.services.ejb.api.UserTaskServiceEJBLocal</para>
                            </listitem>
                     </itemizedlist></para>
              <para>These interfaces should be used as injection points and shall be annotated with
                     @EJB:<programlisting>
@EJB
private DefinitionServiceEJBLocal bpmn2Service;
	
@EJB
private DeploymentServiceEJBLocal deploymentService;
	
@EJB
private ProcessServiceEJBLocal processService;
	
@EJB
private RuntimeDataServiceEJBLocal runtimeDataService;
</programlisting></para>
              <para>Once injected operations can be invoked on them as with core modules, there are
                     no restrictions to their usage. </para>
       </section>
       <section>
              <title>Remote interface</title>
              <para>Remote EJB services are defined as dedicated remote interfaces that extends core services:<itemizedlist>
                            <listitem>
                                   <para>org.jbpm.services.ejb.api.DefinitionServiceEJBRemote</para>
                            </listitem>
                            <listitem>
                                   <para>org.jbpm.services.ejb.api.DeploymentServiceEJBRemote</para>
                            </listitem>
                            <listitem>
                                   <para>org.jbpm.services.ejb.api.ProcessServiceEJBRemote</para>
                            </listitem>
                            <listitem>
                                   <para>org.jbpm.services.ejb.api.RuntimeDataServiceEJBRemote</para>
                            </listitem>
                            <listitem>
                                   <para>org.jbpm.services.ejb.api.UserTaskServiceEJBRemote</para>
                            </listitem>
                     </itemizedlist></para>
              <para>These can be used similar way as local interfaces except for handling custom
                     types. Custom types can be defined:<itemizedlist>
                            <listitem>
                                   <para>globally</para>
                                   <para>such types are available on application classpath -
                                          included in the enterprise application</para>
                            </listitem>
                            <listitem>
                                   <para>locally to the deployment unit</para>
                                   <para>such types are declared as project (kjar) dependency and
                                          are resolved on deployment time</para>
                            </listitem>
                     </itemizedlist> Globally available types do not require any special handling as
                     they will be available for EJB container when remote requests are handled -
                     marshalling of incoming data. Though local custom types won't be visible by
                     default to EJB container as they are not on application classpath. Thus special
                     handling of such types is required.</para>
              <para>EJB services provides easy yet rather powerful mechanism to resolve the issue -
                     it comes with two additional types:<itemizedlist>
                            <listitem>
                                   <para>org.jbpm.services.ejb.remote.api.RemoteObject</para>
                                   <para>Serializable wrapper class for single value
                                          parameters</para>
                            </listitem>
                            <listitem>
                                   <para>org.jbpm.services.ejb.remote.api.RemoteMap</para>
                                   <para>Dedicated java.util.Map implementation to simplify remote
                                          invocation of service methods that accept custom object
                                          input. This map is backed by an internal map that holds
                                          already serialized content to avoid additional
                                          serialization on sending time. That removes the burden of
                                          ensuring that container will know about all custom data
                                          model classes as part of global classpath. </para>
                                   <para>This implementation does not support all methods that are
                                          usually not used when sending data. It shall be considered
                                          only as a wrapper only and not actual and complete
                                          implementation of a map.</para>
                            </listitem>
                     </itemizedlist></para>
              <para>These special objects will perform eager serialization to bytes using
                     ObjectInputStream to remove the need of serialization from the EJB
                     client/container. Though it might be worse in case of performance it does
                     overcome much more complecated handling of class loaders on EJB container side
                     to allow use of custom types defined in the project.</para>
              <para>Here is an example code needed to work with local types and remote
                     EJB:<programlisting>// start a process with custom types via remote EJB

Map&lt;String, Object> parameters = new RemoteMap();
Person person = new org.jbpm.test.Person("john", 25, true);
parameters.put("person", person);

Long processInstanceId = processService.startProcess(deploymentUnit.getIdentifier(), "custom-data-project.work-on-custom-data", parameters);

// fetch task data and complete task with custom types via remote EJB
Map&lt;String, Object> data = userTaskService.getTaskInputContentByTaskId(taskId);
        
Person fromTaskPerson = data.get("_person");
fromTaskPerson.setName("John Doe");
        
RemoteMap outcome = new RemoteMap();
outcome.put("person_", fromTaskPerson);
        
userTaskService.complete(taskId, "john", outcome);
</programlisting></para>
              <para>Similar way RemoteObject can be used for example to send evnet to process
                     instance:<programlisting>
// send event with custom type via remote EJB
Person person = new org.jbpm.test.Person("john", 25, true);

RemoteObject myObject = new RemoteObject(person);

processService.signalProcessInstance(processInstanceId, "MySignal", myObject);
</programlisting></para>
              <para>These illustrates how to wrap custom data when interacting with remote EJB
                     services. Next section will introduce how to make a connection to a remote
                     service vai client code.</para>
              <section>
                     <title>Remote EJB client</title>
                     <para>Remote client support is provided by implemetation of
                            ClientServiceFactory interface that is facede for application server
                            specific
                            code:<programlisting>
/**
 * Generic service factory used for remote look ups that are usually container specific.
 *
 */
public interface ClientServiceFactory {
	
	/**
	 * Returns unique name of given factory implementation
	 * @return
	 */
	String getName();

	/**
	 * Returns remote view of given service interface from selected application
	 * @param application application identifier on the container
	 * @param serviceInterface remote service interface to be found
	 * @return
	 * @throws NamingException
	 */
	&lt;T> T getService(String application, Class&lt;T> serviceInterface) throws NamingException;
}
</programlisting></para>
                     <para>Implementations can be dynamically registered using ServiceLoader
                            mechanism and by default there is only one available for JBoss
                            AS/EAP/Wildfly. Each ClientServiceFactory must provide name which will
                            be used to register it within the client registry so it can be then
                            easily looked up.</para>
                     <para>Here is a code used to get hold of default JBoss based remote
                            client:<programlisting>
// get hold of valid client service factory
ClientServiceFactory factory = ServiceFactoryProvider.getProvider("JBoss");

// application is the name known to application server aka module name
String application = "sample-war-ejb-app";

// get given service out of the factory
DeploymentServiceEJBRemote deploymentService = factory.getService(application, DeploymentServiceEJBRemote.class);
</programlisting></para>
                     <para>With service available all know to its interface methods are ready to be
                            used.</para>
                     <para>When working with JBoss AS and remote client you can add following maven
                            dependency to bring in all EJB client
                            libraries:<programlisting>
&lt;dependency>
  &lt;groupId>org.jboss.as&lt;/groupId>
  &lt;artifactId>jboss-as-ejb-client-bom&lt;/artifactId>
  &lt;version>7.2.0.Final&lt;/version> &lt;!-- use valid version for the server you run on -->
  &lt;optional>true&lt;/optional>
  &lt;type>pom&lt;/type>
&lt;/dependency>
</programlisting></para>
              </section>
       </section>
    
</section>
