<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>What is New and Noteworthy in Drools 5.2.0</title>

  <section>
    <title>Knowledge API (renamed from Drools API)</title>

    <section>
      <title>Core</title>

      <section>
        <title>MVEL</title>

        <para>The MVEL dialect has been improved. We have moved all variable
        lookups to the new indexed factories, which should allow faster
        execution, as well as being simpler code. The build process for mvel
        has been reviewed to streamline it to avoid wasteless object creation
        so that the build time is faster. We still have some more improvements
        on this to share the ParserConfiguration which will make each MVEL
        compilation unit faster to initalise and use less memory, as they will
        share import information for each package.</para>

        <para>It was always possible to execute with MVEL in both dynamic and
        strict mode, with strict mode for static type safety the default. This
        is configurable via the MVEL dialect configuration:</para>

        <programlisting>drools.dialect.mvel.strict = &lt;true|false&gt;</programlisting>

        <para>However there were some places in execution when strict mode was
        not enforced. Effort has now been done to ensure that type safety is
        enforced through out, unless "strict == false". This means that some
        bad code that compiled before may not compile now, because it is not
        type safe. For those cases where the type safety cannot be achieved at
        compile time we added the @typesafe annotation, discussed in it's own
        section.</para>
      </section>

      <section>
        <title>Classloader</title>

        <para>The Classloader has been improved to use a CompositeClassLoader
        instead of the previous hierarchical "parent" classloader. This was
        necessary for OSGi where each module needs it's own classpath, but
        reflection will not work if classloader cannot be found. Modules now
        add themselves to the composite classloader when first initialised.
        This is also exposed to the user where the previous Classloader
        argument on the kbase and kbuilder configuration now takes vararg of
        ClassLoaders, all of which are now searchable.</para>
      </section>
    </section>
  </section>

  <section>
    <title>Drools Expert and Fusion</title>

    <section>
      <title>Lazy Truth Maintenance</title>

      <para>You no longer need to enable or disable truth maintenance, via the
      kbase configuration. It is now handled automatically and turned on only
      when needed. This was done along with the code changes so that all entry
      points use the same code, previous to this the default entry point and
      named entry points used different code, to avoid TMS overhead for event
      processing.</para>
    </section>

    <section>
      <title>Multi-function Accumulates</title>

      <para>The accumulate CE now supports multiple functions. For instance,
      if one needs to find the minimum, maximum and average value for the same
      set of data, instead of having to repeat the accumulate statement 3
      times, a single accumulate can be used.</para>

      <programlisting>rule "Max, min and average" 
    when
        accumulate( Cheese( $price : price ),
                    $max : max( $price ),
                    $min : min( $price ),
                    $avg : average( $price ) )
    then
        // do something
end </programlisting>
    </section>

    <section>
      <title>Parameterized constructors for declared types</title>

      <para>Generate constructors with parameters for declared types.</para>

      <para>Example: for a declared type like the following:</para>

      <programlisting>declare Person
    firstName : String @key
    lastName : String @key
    age : int
end
</programlisting>

      <para>The compiler will implicitly generate 3 constructors: one without
      parameters, one with the @key fields, and one with all fields.</para>

      <programlisting>Person() // parameterless constructor
Person( String firstName, String lastName )
Person( String firstName, String lastName, int age )</programlisting>
    </section>

    <section>
      <title>Type Declaration 'extends'</title>

      <para>Type declarations now support 'extends' keyword for
      inheritance</para>

      <para>In order to extend a type declared in Java by a DRL declared
      subtype, repeat the supertype in a declare statement without any
      fields.</para>

      <programlisting>import org.people.Person

declare Person
end

declare Student extends Person
    school : String
end

declare LongTermStudent extends Student
    years : int
    course : String
end</programlisting>
    </section>

    <section>
      <title>Free Form expressions in Constraints (New Parser)</title>

      <para>The parser has been rewritten. We had reached the limitations of
      what we could achieve in pure ANTLR and moved to a hybrid parser, that
      adds flexibility to the language.</para>

      <para>The main benefit with the new parser is that the language now
      support free form expressions for constraints and 'from' statements. So
      complex expressions on nested accessors, method calls etc should now all
      be possible as simple constraints without wrapping them with an
      eval(.....). This was also important for us to start to move towards a
      single consistent grammer for both the "when" left hand side and "then"
      right hand side. As previously we had to document the restricted
      limitations of a field constraint on the LHS compared to expressions
      used inside of an 'eval' or used on the RHS. Complex expressions are
      still internally rewritten as evals, so it's just syntacic sugar.</para>

      <para>Examples:</para>

      <programlisting>Person( age * 2 &gt; $anotherPersonsAge + 2 ) // mathematical expressions
Person( addresses["home"].streetName.startsWith( "High Park" ) ) // method calls and collections simplified syntax
Person( isAdult() ) // boolean expression without relational operator</programlisting>

      <para>The new parser also support free form expressions on the "from"
      clause, allowing for instance, new syntaxes, like inline creation for
      lists:</para>

      <programlisting>Cheese( ) from [ $stilton, $brie, $provolone ] // inline list creation and iteration
</programlisting>
    </section>

    <section>
      <title>Rule API</title>

      <para>A fluent API was created to allow programmatic creation of rules
      as an alternative to the previously suggested method of template
      creation.</para>

      <programlisting>PackageDescr pkg = DescrFactory.newPackage()
       .name("org.drools.example")
       .newRule().name("Xyz")
           .attribute("ruleflow-grou","bla")
       .lhs()
           .and()
               .pattern("Foo").id( "$foo", false ).constraint("bar==baz").constraint("x&gt;y").end()
               .not().pattern("Bar").constraint("a+b==c").end().end()
           .end()
       .end()
       .rhs( "System.out.println();" ).end()
       .getDescr();</programlisting>
    </section>

    <section>
      <title>Positional Arguments</title>

      <para>Patterns now support positional arguments on type
      declarations.</para>

      <para>Positional arguments are ones where you don't need to specify the
      field name, as the position maps to a known named field. i.e. Person(
      name == "mark" ) can be rewritten as Person( "mark"; ). The semicolon
      ';' is important so that the engine knows that everything before it is a
      positional argument. Otherwise we might assume it was a boolean
      expression, which is how it could be interpretted after the semicolon.
      You can mix positional and named arguments on a pattern by using the
      semicolon ';' to separate them. Any variables used in a positional that
      have not yet been bound will be bound to the field that maps to that
      position.</para>

      <programlisting>declare Cheese
    name : String
    shop : String
    price : int
end
</programlisting>

      <para>Example patterns, with two constraints and a binding. Remember
      semicolon ';' is used to differentiate the positional section from the
      named argument section. Variables and literals and expressions using
      just literals are supported in posional arguments, but not
      variables.</para>

      <programlisting>
Cheese( "stilton", "Cheese Shop", p; )
Cheese( "stilton", "Cheese Shop"; p : price )
Cheese( "stilton"; shop == "Cheese Shop", p : price )
Cheese( name == "stilton"; shop == "Cheese Shop", p : price )
</programlisting>
    </section>

    <section>
      <title>Backward Chaining</title>

      <para>Drools now provides Prolog style derivation queries, as an
      experimental feature. What this means is that a query or the 'when' part
      of a rule may call a query, via a query element. This is also recursive
      so that a query may call itself. A query element may be prefixed with a
      question mark '?' which indicuates that we have a pattern construct that
      will pull data, rather than the normal reactive push nature of patterns.
      If the ? is ommitted the query will be executed as a live "open query"
      with reactiveness, similar to how normal patterns work.</para>

      <para>A key aspect of BC is unification. This is where a query parameter
      may be bound or unbound, when unbound it is considered an output
      variable and will bind to each found value.</para>

      <para>In the example below x and y are parameters. Unification is done
      by subsequent bindings inside of patterns. If a value for x is passed
      in, it's as though the pattern says "thing == x". If a value for x is
      not passed in it's as though "x: thing" and x will be bound to each
      found thing.</para>

      <para>Because Drools does not allow multiple bindings on the same
      variable we introduce ':=' unification symbol to support this.</para>

      <programlisting>declare Location
    thing : String 
    location : String 
end

query isContainedIn( String x, String y ) 
    Location( x := thing, y := location)
    or 
    ( Location(z := thing, y := location) and ?isContainedIn( thing := x, location := z) )
end
</programlisting>

      <para>Positional and mixed positional/named are supported.</para>

      <programlisting>declare Location
    thing : String 
    location : String 
end

query isContainedIn( String x, String y ) 
    Location(x, y;)
    or 
    ( Location(z, y;) and ?isContainedIn(x, z;) )
end
</programlisting>

      <para>Here is an example of query element inside of a rule using mixed
      positional/named arguments.</para>

      <programlisting>query whereFood( String x, String y )
    ( Location(x, y;) and
    Edible(x;) ) 
    or 
    ( Location(z, y;) and ?whereFood(x, z;) )
end

query look(String place, List things, List food, List exits) 
    Here(place;)
    things : List() from accumulate( Location(thing, place;),
                                    collectList( thing ) )
    food : List() from accumulate( ?whereFood(thing, place;) ,                                    
                                   collectList( thing ) )
    exits : List() from accumulate( ?connect(place, exit;),
                                    collectList( exit ) )
end

rule reactiveLook when
    Here( $place : place) 
    ?look($place, $things; $food := food, $exits := exits)
then
    System.out.println( "You are in the " + $place);
    System.out.println( "  You can see " + $things );
    System.out.println( "  You can eat " + $food );
    System.out.println( "  You can go to " + $exits );
end
</programlisting>

      <para>As previously mentioned you can use live "open" queries to
      reactively receive changes over time from the query results, as the
      underlying data it queries against changes. Notice the "look" rule calls
      the query without using '?'.</para>

      <programlisting>query isContainedIn( String x, String y ) 
    Location(x, y;)
    or 
    ( Location(z, y;) and isContainedIn(x, z;) )
end

rule look when 
    Person( $l : likes ) 
    isContainedIn( $l, 'office'; )
then
   insertLogical( $l 'is in the office' );
end 
</programlisting>

      <para>Literal expressions can passed as query arguments, but at this
      stage you cannot mix expressions with variables.</para>

      <para>It is possible to call queries from java leaving arguments
      unspecified using the static field org.drools.runtime.rule.Variable.v -
      note you must use 'v' and not an alternative instanceof Variable. The
      following example will return all objects contained in the
      office.</para>

      <programlisting>results = ksession.getQueryResults( "isContainedIn", new Object[] {  Variable.v, "office" } );
l = new ArrayList&lt;List&lt;String&gt;&gt;();
for ( QueryResultsRow r : results ) {
    l.add( Arrays.asList( new String[] { (String) r.get( "x" ), (String) r.get( "y" ) } ) );
}  
</programlisting>

      <para>The algorithm uses stacks to handle recursion, so the method stack
      will not blow up.</para>
    </section>

    <section>
      <title>Non Typesafe Classes</title>

      <para>@typesafe( &lt;boolean&gt;) has been added to type declarations.
      By default all type declarations are compiled with type safety enabled;
      @typesafe( false ) provides a means to override this behaviour by
      permitting a fall-back, to type unsafe evaluation where all constraints
      are generated as MVEL constraints and executed dynamically. This can be
      important when dealing with collections that do not have any generics or
      mixed type collections.</para>
    </section>

    <section>
      <title>Session Reports</title>

      <para>Added experimental framework to inspect a session and generate a
      report, either based on a predefined template or with a user created
      template.</para>

      <programlisting>// Creates an inspector
SessionInspector inspector = new SessionInspector( ksession );
// Collects the session info
StatefulKnowledgeSessionInfo info = inspector.getSessionInfo();
// Generate a report using the "simple" report template
String report = SessionReporter.generateReport( "simple", info, null );
</programlisting>
    </section>
  </section>

  <section>
    <title>Drools and jBPM integration</title>

    <section>
      <title>Improved Camel integration</title>

      <para>Camel integration using the Drools EndPoint was improved with the
      creation of both DroolsConsumer and DroolsProducer components.
      Configurations were added to support the insertion of either Camel's
      Exchange, Message or Body into the Drools session, allowing for the easy
      development of dynamic content based routing applications. Also, support
      to entry points was added.</para>

      <para>Examples of routes:</para>

      <programlisting>from( "direct:test-no-ep" ).to( "drools://node/ksession1?action=insertBody" );
from( "direct:test-with-ep" ).to( "drools://node/ksession1?action=insertBody&amp;entryPoint=ep1" );
from( "direct:test-message" ).to( "drools://node/ksession1?action=insertMessage" );
from( "direct:test-exchange" ).to( "drools://node/ksession1?action=insertExchange" );
</programlisting>
    </section>
  </section>

  <section>
    <title>Merging Drools Flow into jBPM5</title>

    <para>The Drools Flow project and the jBPM project have been merged into
    the the newest version of the jBPM project, called jBPM5. jBPM5 combines
    the best of both worlds: merging the experience that was built up with the
    jBPM project over several years in supporting stable, long-living business
    processes together with the improvements that were prototyped as part of
    Drools Flow to support more flexible and adaptive processes. Now that jBPM
    5.0 has been released, the Drools project will be using jBPM5 as the
    engine to support process capabilities. Drools Flow as a subproject will
    no longer exist, but its vision will continue as part of the jBPM project,
    still allowing (optional but) advanced integration between business rules,
    business processes and complex event processing and a unified environment
    for all three paradigms.</para>

    <para>The impact for the end user however should be minimal, as the
    existing (knowledge) API is still supported, the underlying implementation
    has just been replaced with a newer version. All existing features should
    still be supported, and many more.</para>

    <para>For more information, visit <ulink
    url="http://www.jboss.org/jbpm">http://www.jboss.org/jbpm</ulink></para>
  </section>

  <section>
    <title>Guvnor</title>

    <section>
      <title>Guvnor Look &amp; Feel Moving Closer To Native GWT Look</title>

      <para>We have removed GWT-Ext from Guvnor and now only use GWT.</para>
    </section>

    <section>
      <title>Embed Guvnor Editors</title>

      <para>Embed Guvnor Editor's in external applications. You can create or
      edit assets like Business Rules, Technical Rules, DSL definitions and
      Decision Tables in your applications using Guvnor's specific editors.
      You can even edit multiple assets at once.</para>
    </section>

    <section>
      <title>Annotations come to Declarative Models</title>

      <para>The ability to add annotations in Guvnor to declarative models has
      been added. This allows Fact Types to be defined as events.</para>

      <figure>
        <title>Annotations</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center"
                       fileref="images/Chapter-Release_Notes/declarative-model-annotations.png"
                       format="PNG" scalefit="1"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>

      <figure>
        <title>Annotation editor</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center"
                       fileref="images/Chapter-Release_Notes/declarative-model-annotations-editor.png"
                       format="PNG" scalefit="1"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Support for Complex Event Processing in the guided
      editors</title>

      <para>The guided editors have been enhanced to allow full use of Drools
      Fusion's Complex Event Processing operators, sliding windows and
      entry-points.</para>

      <figure>
        <title>Complex Event Processing</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center"
                       fileref="images/Chapter-Release_Notes/cep-guided-editor.png"
                       format="PNG" scalefit="1"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Decision Tables</title>

      <para>The existing Guided Decision Table has been replaced to provide a
      foundation on which to build our future guided Decision Table toolset.
      The initial release largely provides an equivalent feature-set to the
      obsolete Guided Decision Table with a few improvements, as explained in
      more detail below. A change from the legacy table was essential for us
      to begin to realise our desire to provide the number one web-based
      decision table available. With this foundation we will be able to expand
      the capabilities of our Guided Decision Table toolset to provide a
      feature rich, user-friendly environment.</para>

      <figure>
        <title>Basic Decision Table</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center"
                       fileref="images/Chapter-Release_Notes/dtable-basic.png"
                       format="PNG" scalefit="1"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>

      <section>
        <title>Cell Merging</title>

        <para>Adjacent cells in the same column with the same value can be
        merged thus eliminating the need for otherwise cluttered views of
        multiple rows containing the same value.</para>

        <figure>
          <title>Merged Decision Table</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center"
                         fileref="images/Chapter-Release_Notes/dtable-merged.png"
                         format="PNG" scalefit="1"></imagedata>
            </imageobject>
          </mediaobject>
        </figure>
      </section>

      <section>
        <title>Typed-columns</title>

        <para>The major basic data-types (numeric, date, text and Boolean) are
        handled as such and respond as you'd expect to sorting.</para>

        <figure>
          <title>Datatype Sorting</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center"
                         fileref="images/Chapter-Release_Notes/dtable-datatype-sorting.png"
                         format="PNG" scalefit="1"></imagedata>
            </imageobject>
          </mediaobject>
        </figure>
      </section>

      <section>
        <title>Improved header</title>

        <para>The table header section has been improved to show more verbose
        information to facilitate design-time understanding. The table has a
        fixed header that remains as you'd expect, at the top of the table,
        whilst scrolling larger decision tables.</para>

        <figure>
          <title>Scrolling Decision Table</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center"
                         fileref="images/Chapter-Release_Notes/dtable-scrolling.png"
                         format="PNG" scalefit="1"></imagedata>
            </imageobject>
          </mediaobject>
        </figure>
      </section>

      <section>
        <title>Tighter integration</title>

        <para>The decision table responds better to changes made to column
        definitions; so changes to column Fact Type, Fact Type field,
        calculation type, value list etc are reflected in the table
        itself.</para>
      </section>

      <section>
        <title>Negation of Fact patterns</title>

        <para>Fact Patterns in condition columns can be negated to match when
        the defined pattern does not exist in WorkingMemory. In essence it is
        now possible to construct rules within the decision table equivalent
        to the following DRL fragment:-</para>

        <programlisting>not Cheese( name == "Cheddar" ) </programlisting>

        <figure>
          <title>Negation of Fact Patterns</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center"
                         fileref="images/Chapter-Release_Notes/negate-fact-pattern.png"
                         format="PNG" scalefit="1"></imagedata>
            </imageobject>
          </mediaobject>
        </figure>
      </section>

      <section>
        <title>Negation of rules</title>

        <para>Entire rules can be negated, giving rise to DRL fragements such
        as:-</para>

        <programlisting>rule "no cheddar liked by Fred"
  when
    not (
      $c : Cheese( name == "Cheddar" )
      Person( name == "Fred", favouriteCheese == $c )
    )
  then
    ..
end
 </programlisting>

        <figure>
          <title>Negation of rules</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center"
                         fileref="images/Chapter-Release_Notes/negate-rule-option.png"
                         format="PNG" scalefit="1"></imagedata>
            </imageobject>
          </mediaobject>

          <mediaobject>
            <imageobject>
              <imagedata align="center"
                         fileref="images/Chapter-Release_Notes/negate-rule.png"
                         format="PNG" scalefit="1"></imagedata>
            </imageobject>
          </mediaobject>
        </figure>
      </section>

      <section>
        <title>Support for "otherwise"</title>

        <para>Condition columns containing literal values that use the
        equality (==, equal to) or inequality (!=, not equal to) operators can
        now contain a meta-value for "otherwise" which represents all other
        values not explicitly defined in the column. This feature gives rise
        to DRL fragments such as the following:-</para>

        <programlisting>#from row number: 1
rule "Row 1 dtable"
  salience 1
  dialect "mvel"
when
  $p : Person( name == "Bill" , age != "30" )
then
  $p.setAge( 12345 );
end

#from row number: 2
rule "Row 2 dtable"
  salience 2
  dialect "mvel"
when
  $p : Person( name == "Ben" , age in ( "30", "40", "50" ) )
then
  $p.setAge( 12345 );
end

#from row number: 3
rule "Row 3 dtable"
  salience 3
  dialect "mvel"
when
  $p : Person( name == "Weed" , age != "40" )
then
  $p.setAge( 12345 );
end

#from row number: 4
rule "Row 4 dtable"
  salience 4
  dialect "mvel"
when
  $p : Person( name not in ( "Bill", "Ben", "Weed" ) , age != "50" )
then
  $p.setAge( 12345 );
end</programlisting>

        <figure>
          <title>Support for "otherwise"</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center"
                         fileref="images/Chapter-Release_Notes/otherwise.png"
                         format="PNG" scalefit="1"></imagedata>
            </imageobject>
          </mediaobject>
        </figure>
      </section>

      <section>
        <title>Enhanced Package's Report</title>

        <para>Templates Rules and Decision Tables rules are now included in
        the package's report.</para>
      </section>

      <section>
        <title>Spring Context Editor</title>

        <para>Now it is possible to create and mange Spring Context files
        inside Guvnor. These Context Files are exposed through URLs so
        external applications can use them.</para>

        <figure>
          <title>Editing Spring Context</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center"
                         fileref="images/Chapter-Release_Notes/editspringcontextguvnor.png"
                         format="PNG" scalefit="1"></imagedata>
            </imageobject>
          </mediaobject>
        </figure>
      </section>

      <section>
        <title>Configuring Multiple Guvnor Instances In a Jackrabbit
        Cluster</title>

        <para>We added a new task in drools-ant which helps with configuring
        multiple Guvnor instances to be able to share their Jackrabbit
        content.</para>
      </section>

      <section>
        <title>Configuring Guvnor to use an external RDBMS made easier</title>

        <para>The default Guvnor repository configuration uses embedded Derby
        databases which writes the workspace and version information to the
        local file system. This is not always optimal for a production system
        where it makes sense to use an external RDBMS.</para>

        <para>We added a new section under the "Administration" tab called
        "Repository Configuration" which helps generate the repository.xml
        configuration file for a number of databases (Microsoft SQL Server,
        MySQL, Oracle, PostgreSQL, Derby, H2)</para>
      </section>

      <section>
        <title>Web-based BPMN2 authoring in Guvnor</title>

        <para>We have completed big parts of the integration between Guvnor
        and the Oryx web-based business process editor. Our primary use cases
        supported by this integration are:</para>

        <para>- Viewing existing jBPM5 processes in Guvnor</para>

        <para>- Prototyping new jBPM5 processes in Guvnor.</para>

        <para>Please note that we are still working on full round-tripping
        support between the web-based Oryx editor and our BPMN2 support
        provided through the eclipse plugin</para>
      </section>
    </section>
  </section>

  <section>
    <title>Eclipse</title>

    <section>
      <title>Removal of BRL Guided Editor</title>

      <para>The BRL Guided Editor has been removed due to lack of interest and
      it falling behind. Its removal allows more focus on the GWT based Guided
      Editor in Guvnor. The DRL, text-based, Guided Editor remains
      unaffected.</para>
    </section>
  </section>

  <section>
    <title>Maven artifactId changes</title>

    <para>A couple of maven artifacts (jars, wars, ...) have been renamed so
    it is more clear what they do. Below is the list of the GAV changes,
    adjust your <literal>pom.xml</literal> files accordingly when upgrading to
    the new version.</para>

    <table>
      <title>Maven GAV changes overview</title>

      <tgroup cols="4">
        <thead>
          <row>
            <entry align="center">Old groupId</entry>

            <entry align="center">Old artifactId</entry>

            <entry align="center">New groupId</entry>

            <entry align="center">New artifactId</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry>org.drools</entry>

            <entry>drools (the parent pom)</entry>

            <entry>org.drools</entry>

            <entry>droolsjbpm-parent</entry>
          </row>

          <row>
            <entry>org.drools</entry>

            <entry><emphasis role="bold">drools-api</emphasis></entry>

            <entry>org.drools</entry>

            <entry><emphasis role="bold">knowledge-api</emphasis></entry>
          </row>

          <row>
            <entry>org.drools</entry>

            <entry>drools-docs-introduction</entry>

            <entry>org.drools</entry>

            <entry>droolsjbpm-introduction-docs</entry>
          </row>

          <row>
            <entry>org.drools</entry>

            <entry>drools-examples-drl</entry>

            <entry>org.drools</entry>

            <entry>drools-examples</entry>
          </row>

          <row>
            <entry>org.drools</entry>

            <entry>drools-examples-fusion / drools-examples-drl (jBPM using
            parts)</entry>

            <entry>org.drools</entry>

            <entry>droolsjbpm-integration-examples</entry>
          </row>

          <row>
            <entry>org.drools</entry>

            <entry>drools-docs-expert</entry>

            <entry>org.drools</entry>

            <entry>droolsjbpm-expert-docs</entry>
          </row>

          <row>
            <entry>org.drools</entry>

            <entry>drools-docs-fusion</entry>

            <entry>org.drools</entry>

            <entry>droolsjbpm-fusion-docs</entry>
          </row>

          <row>
            <entry>org.drools</entry>

            <entry><emphasis role="bold">drools-repository</emphasis></entry>

            <entry>org.drools</entry>

            <entry><emphasis role="bold">guvnor-repository</emphasis></entry>
          </row>

          <row>
            <entry>org.drools</entry>

            <entry><emphasis role="bold">drools-ide-common</emphasis></entry>

            <entry>org.drools</entry>

            <entry><emphasis
            role="bold">droolsjbpm-ide-common</emphasis></entry>
          </row>

          <row>
            <entry>org.drools</entry>

            <entry><emphasis role="bold">drools-guvnor</emphasis></entry>

            <entry>org.drools</entry>

            <entry><emphasis role="bold">guvnor-webapp</emphasis></entry>
          </row>

          <row>
            <entry>org.jboss.drools.guvnor.tools</entry>

            <entry>guvnor-importer</entry>

            <entry>org.drools</entry>

            <entry>guvnor-bulk-importer</entry>
          </row>

          <row>
            <entry>org.drools</entry>

            <entry>drools-docs-guvnor</entry>

            <entry>org.drools</entry>

            <entry>guvnor-docs</entry>
          </row>

          <row>
            <entry>org.drools</entry>

            <entry><emphasis role="bold">drools-server</emphasis></entry>

            <entry>org.drools</entry>

            <entry><emphasis
            role="bold">drools-camel-server</emphasis></entry>
          </row>

          <row>
            <entry>org.drools</entry>

            <entry>drools-docs-integration</entry>

            <entry>org.drools</entry>

            <entry>droolsjbpm-integration-docs</entry>
          </row>

          <row>
            <entry>org.drools</entry>

            <entry><emphasis role="bold">drools-flow-core</emphasis></entry>

            <entry>org.jbpm</entry>

            <entry><emphasis role="bold">jbpm-flow</emphasis></entry>
          </row>

          <row>
            <entry>org.drools</entry>

            <entry><emphasis
            role="bold">drools-flow-compiler</emphasis></entry>

            <entry>org.jbpm</entry>

            <entry><emphasis role="bold">jbpm-flow-builder</emphasis></entry>
          </row>

          <row>
            <entry>org.drools</entry>

            <entry><emphasis role="bold">drools-bpmn2</emphasis></entry>

            <entry>org.jbpm</entry>

            <entry><emphasis role="bold">jbpm-bpmn2</emphasis></entry>
          </row>

          <row>
            <entry>org.drools</entry>

            <entry><emphasis
            role="bold">drools-flow-persistence-jpa</emphasis></entry>

            <entry>org.jbpm</entry>

            <entry><emphasis
            role="bold">jbpm-persistence-jpa</emphasis></entry>
          </row>

          <row>
            <entry>org.drools</entry>

            <entry>drools-bam</entry>

            <entry>org.jbpm</entry>

            <entry>jbpm-bam</entry>
          </row>

          <row>
            <entry>org.drools</entry>

            <entry>drools-process-task</entry>

            <entry>org.jbpm</entry>

            <entry>jbpm-human-task</entry>
          </row>

          <row>
            <entry>org.drools</entry>

            <entry>drools-gwt-console</entry>

            <entry>org.jbpm</entry>

            <entry>jbpm-gwt-console</entry>
          </row>

          <row>
            <entry>org.drools</entry>

            <entry>drools-gwt-form</entry>

            <entry>org.jbpm</entry>

            <entry>jbpm-gwt-form</entry>
          </row>

          <row>
            <entry>org.drools</entry>

            <entry>drools-gwt-graph</entry>

            <entry>org.jbpm</entry>

            <entry>jbpm-gwt-graph</entry>
          </row>

          <row>
            <entry>org.drools</entry>

            <entry>drools-gwt-war</entry>

            <entry>org.jbpm</entry>

            <entry>jbpm-gwt-war</entry>
          </row>

          <row>
            <entry>org.drools</entry>

            <entry>drools-gwt-server-war</entry>

            <entry>org.jbpm</entry>

            <entry>jbpm-gwt-server-war</entry>
          </row>

          <row>
            <entry>org.drools</entry>

            <entry>drools-workitems</entry>

            <entry>org.jbpm</entry>

            <entry>jbpm-workitems</entry>
          </row>

          <row>
            <entry>org.drools</entry>

            <entry>drools-docs-flow</entry>

            <entry>org.jbpm</entry>

            <entry>jbpm-docs</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>For example: before, in your <literal>pom.xml</literal> files, you
    declared <literal>drools-api</literal> like this:</para>

    <programlisting>  &lt;dependency&gt;
    &lt;groupId&gt;org.drools&lt;/groupId&gt;
    &lt;artifactId&gt;drools-api&lt;/artifactId&gt;
    ...
  &lt;/dependency&gt;</programlisting>

    <para>And now, afterwards, in your <literal>pom.xml</literal> files, you
    declare <literal>knowledge-api</literal> like this instead:</para>

    <programlisting>  &lt;dependency&gt;
    &lt;groupId&gt;org.drools&lt;/groupId&gt;
    &lt;artifactId&gt;knowledge-api&lt;/artifactId&gt;
    ...
  &lt;/dependency&gt;</programlisting>
  </section>
</section>
