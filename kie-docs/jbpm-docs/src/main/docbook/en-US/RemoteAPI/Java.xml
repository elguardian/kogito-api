<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xmlns="http://docbook.org/ns/docbook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:ns="http://docbook.org/ns/docbook">
  <title>Remote Java API</title>
  
  <section>
    <title>Using the Remote Java RuntimeEngine API</title>
    
    <para>By using the <code>RemoteRestSessionFactory</code> or <code>RemoteJmsSessionFactory</code> classes provided by the <code>kie-services-client</code>
      jar, you can create remote instances of the <code>RuntimeEngine</code> and thus also the <code>KieSession</code> and <code>TaskService</code>. 
      These instances  will allow you to interact with a remote workbench instance (i.e. KIE workbench or the jBPM Console) without having to deal with 
      the underlying transport and serialization details.</para>
    
    <section>
      <title>The REST Remote Java RuntimeEngine</title>     
      
      <para>In order to interact via REST with the remote runtime, the <code>RemoteRestSessionFactory</code>
        can be used. The following example illustrates how the remote session can be used.</para>
      
      <programlisting language="java">  // Create REST session
  RemoteRestSessionFactory restSessionFactory 
    = new RemoteRestSessionFactory(deploymentId, deploymentUrl, user, password);
  RuntimeEngine engine = restSessionFactory.newRuntimeEngine();
  KieSession ksession = engine.getKieSession();
  ProcessInstance processInstance = ksession.startProcess("org.jbpm.humantask");
  
  TaskService taskService = engine.getTaskService();
  List&lt;TaskSummary&gt; tasks = taskService.getTasksAssignedAsPotentialOwner(taskUserId, "en-UK");
  long taskId = findTaskId(processInstance.getId(), tasks);
  
  Task task = taskService.getTaskById(taskId);
  
  taskService.start(taskId, taskUserId);
  taskService.complete(taskId, taskUserId, null);</programlisting>

    <para>In the above example, the following variables were used when initalizing the <code>RemoteRestSessionFactory</code>
      <table frame="all">
        <title>Pagination query parameter syntax</title>
        <tgroup cols="3" align="left" rowsep="1" colsep="1">
          <thead valign="top">
            <row>
              <entry>Variable</entry>
              <entry>Possible value</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody valign="top">
            <row>
              <entry><code>deploymentId</code></entry>
              <entry><code>myproject</code></entry>
              <entry><para>This is the name (id) of the deployment the <code>RuntimeEngine</code> should interact
                    with.</para></entry>
            </row>
            <row>
              <entry><code>deploymentURL</code></entry>
              <entry><code>http://localhost:8080/kie-wb/</code></entry>
              <entry><para>This is the base URL that should be used when interacting with the remote
                    execution-server.</para></entry>
            </row>
            <row>
              <entry><code>user</code></entry>
              <entry><code>homer</code></entry>
              <entry>This is the user needed for authentication for all rest calls.</entry>
            </row>
            <row>
              <entry><code>password</code></entry>
              <entry><code>d0nutsd0nutsILUVDONUTS!</code></entry>
              <entry><para>This is the password for the user specified in the <code>user</code> parameter.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </para>
      
      <para>See the various constructors of the <code>RemoteRestSessionFactory</code> class for more possibilities.</para>
    </section>
         
    <section>
      <title>The JMS Remote Java RuntimeEngine</title>
      
      <para>The Remote JMS Java RuntimeEngine works precisely the same as the REST variant, except that it takes different parameters
      for its constructor. See the <code>RemoteJmsRuntimeEngineFactory</code> for more information.</para>
    </section>

  </section>
       
</section>
