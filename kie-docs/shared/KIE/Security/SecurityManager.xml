<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0" xml:id="SecurityManager"
  xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
  xml:base="./Overview/" xmlns="http://docbook.org/ns/docbook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xlink="http://www.w3.org/1999/xlink"
  xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:ns="http://docbook.org/ns/docbook">
  <title>Security Manager</title>
  
  <para>The KIE engine is a platform for the modelling and execution of business behavior, using a multitude of
    declarative abstractions and metaphores, like rules, processes, decision tables and etc.</para>
  <para>Many times, the authoring of these metaphores is done by third party groups, be it a different group inside the
    same company, a group from a partner company, or even anonymous third parties on the internet. </para>
  <para>Rules and Processes are designed to execute arbitrary code in order to do their job, but in such cases it might
    be necessary to constrain what they can do. For instance, it is unlikely a rule should be allowed to create a
    classloader (what could open the system to an attack) and certainly it should not be allowed to make a call to
      <code>System.exit()</code>.</para>
  <para>The Java Platform provides a very comprehensive and well defined security framework that allows users to define
    policies for what a system can do. The KIE platform leverages that framework and allow application developers to
    define a specific policy to be applied to any execution of user provided code, be it in rules, processes, work item
    handlers and etc.</para>
  
  <section xml:id="HowToDefineKiePolicy">
    <title>How to define a KIE Policy</title>
    <para>Rules and processes can run with very restrict permissions, but the engine itself needs to perform many
      complex operations in order to work. Examples are: it needs to create classloaders, read system properties, access
      the file system, etc. </para>
    <para>Once a security manager is installed, though, it will apply restrictions to all the code executing in the JVM
      according to the defined policy. For that reason, KIE allows the user to define two different policy files: one
      for the engine itself and one for the assets deployed into and executed by the engine.</para>
    <para>One easy way to setup the enviroment is to give the engine itself a very permissive policy, while providing a
      constrained policy for rules and processes. </para>
    <para>Policy files follow the standard policy file syntax as described in the Java documentation. For more details,
      see:</para>
    <para><link>http://docs.oracle.com/javase/6/docs/technotes/guides/security/PolicyFiles.html#FileSyntax</link></para>
    <para>A permissive policy file for the engine can look like the following:</para>
    <example>
      <title>A sample engine.policy file</title>
      <programlisting>grant { 
    permission java.security.AllPermission;
}</programlisting>
    </example>
    <para>An example security policy for rules could be:</para>
    <example>
      <title>A sample rules.policy file</title>
      <programlisting>grant { 
    permission java.util.PropertyPermission "*", "read"; 
    permission java.lang.RuntimePermission "accessDeclaredMembers"; 
}</programlisting>
    </example>
    <para>Please note that depending on what the rules and processes are supposed to do, many more permissions might
      need to be granted, like accessing files in the filesystem, databases, etc.</para>
    <para>In order to use these policy files, all that is necessary is to execute the application with these files as
      parameters to the JVM. Three parameters are required:</para>
    <para>
      <table frame="all">
        <title>Parameters</title>
        <tgroup cols="2">
          <colspec colname="c1" colnum="1" colwidth="1.0*"/>
          <colspec colname="c2" colnum="2" colwidth="1.0*"/>
          <thead>
            <row>
              <entry>Parameter</entry>
              <entry>Meaning</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>-Djava.security.manager</para>
              </entry>
              <entry>Enables the security manager</entry>
            </row>
            <row>
              <entry>
                <para>-Djava.security.policy=&lt;jvm_policy_file></para>
              </entry>
              <entry>Defines the global policy file to be applied to the whole application, including the engine</entry>
            </row>
            <row>
              <entry>
                <para>-Dkie.security.policy=&lt;kie_policy_file></para>
              </entry>
              <entry>Defines the policy file to be applied to rules and processes</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </para>
    <para>For instance:</para>
    <para><code>java -Djava.security.manager -Djava.security.policy=global.policy -Dkie.security.policy=rules.policy
        foo.bar.MyApp</code></para>
    <para/>
    <note>
      <para>When executing the engine inside a container, use your container's documentation to find out how to
        configure the Security Manager and how to define the global security policy. Define the kie security policy as
        described above and set the <code>kie.security.policy</code> system property in order to configure the engine to
        use it.</para>
    </note>
    <note>
      <para>Please note that unless a Security Manager is configured, the <code>kie.security.policy</code> will be
        ignored.</para>
    </note>
    <note>
      <para>A Security Manager has a high performance impact in the JVM. Applications with strict performance
        requirements are strongly discouraged of using a Security Manager. An alternative is the use of other security
        procedures like the auditing of rules/processes before testing and deployment to prevent malicious code from
        being deployed to the environment.</para>
    </note>
  </section>
  
</section>
