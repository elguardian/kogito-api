<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0" xml:base="./../../" xml:id="KIERunningSection"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Running</title>

  <para/>

  <section>
    <title>KieBase</title>

    <para>The <code>KieBase</code> is a repository of all the
    application's knowledge definitions. It will contain rules, processes,
    functions, and type models. The <code>KieBase</code> itself does not contain
    data; instead, sessions are created from the <code>KieBase</code>
    into which data can be inserted and from which process instances may be
    started. The <code>KieBase</code> can be obtained from the <code>KieContainer</code>
    containing the <code>KieModule</code> where the <code>KieBase</code> has been defined.</para>

    <example>
      <title>Getting a KieBase from a KieContainer</title>

      <programlisting language="java">KieBase kBase = kContainer.getKieBase();</programlisting>
    </example>
  </section>

  <section>
    <title>KieSession</title>

    <para>The <code>KieSession</code> stores and executes on the
    runtime data. It is created from the <code>KieBase</code>.</para>

    <figure>
      <title>KieSession</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/kie/BuildDeployUtilizeAndRun/KieSession.png"
                     format=""/>
        </imageobject>
      </mediaobject>
    </figure>

    <example>
      <title>Create a KieSession from a KieBase</title>

      <programlisting language="java">KieSession ksession = kbase.newKieSession();</programlisting>
    </example>
  </section>

  <section>
    <title>KieRuntime</title>

    <section>
      <title>KieRuntime</title>

      <para>The <code>KieRuntime</code> provides methods that
      are applicable to both rules and processes, such as setting globals and
      registering channels. ("Exit point" is an obsolete synonym for "channel".)</para>

      <figure>
        <title>KieRuntime</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/kie/BuildDeployUtilizeAndRun/KieRuntime.png"
                       format=""/>
          </imageobject>
        </mediaobject>
      </figure>

      <section>
        <title>Globals</title>

        <para>Globals are named objects that are made visible to the rule engine,
        but in a way that is fundamentally different from the one for facts:
        changes in the object backing a global do not trigger reevaluation of
        rules. Still, globals are useful for providing static information,
        as an object offering services that are used in the RHS of a rule, or
        as a means to return objects from the rule engine. When you use
        a global on the LHS of a rule, make sure it is immutable, or, at least,
        don't expect changes to have any effect on the behavior of your rules.</para>

        <para>A global must be declared in a rules file, and then it needs to be
        backed up with a Java object.</para>

        <programlisting>global java.util.List list</programlisting>

        <para>With the Knowledge Base now aware of the global identifier and
        its type, it is now possible to call <code>ksession.setGlobal()</code>
        with the global's name and an object, for any session, to associate
        the object with the global. Failure to declare the global type and
        identifier in DRL code will result in an exception being thrown from
        this call.</para>

        <programlisting language="java">List list = new ArrayList();
ksession.setGlobal("list", list);           </programlisting>

        <para>Make sure to set any global before it is used in the evaluation
        of a rule. Failure to do so results in a <code>NullPointerException</code>.</para>
      </section>
    </section>
  </section>

  <section>
    <title>Event Model</title>

    <para>The event package provides means to be notified of rule engine
      events, including rules firing, objects being asserted, etc. This allows
      separation of logging and auditing activities from the
      main part of your application (and the rules).</para>

    <para>The <code>KieRuntimeEventManager</code> interface is
      implemented by the <code>KieRuntime</code> which provides two
      interfaces, <code>RuleRuntimeEventManager</code> and
      <code>ProcessEventManager</code>. We will only cover the
      <code>RuleRuntimeEventManager</code> here.</para>

    <figure>
      <title>KieRuntimeEventManager</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/kie/BuildDeployUtilizeAndRun/KieRuntimeEventManager.png"
                     format=""/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>The <code>RuleRuntimeEventManager</code> allows for listeners to
      be added and removed, so that events for the working memory and the agenda
      can be listened to.</para>

    <figure>
      <title>RuleRuntimeEventManager</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/kie/BuildDeployUtilizeAndRun/RuleRuntimeEventManager.png"
                     format=""/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>The following code snippet shows how a simple agenda listener is
      declared and attached to a session. It will print matches after they
      have fired.</para>

    <example>
      <title>Adding an AgendaEventListener</title>

      <programlisting language="java">ksession.addEventListener( new DefaultAgendaEventListener() {
    public void afterMatchFired(AfterMatchFiredEvent event) {
        super.afterMatchFired( event );
        System.out.println( event );
    }
});</programlisting>
    </example>

    <para>Drools also provides <code>DebugRuleRuntimeEventListener</code>
      and <code>DebugAgendaEventListener</code> which implement each method with
      a debug print statement. To print all Working Memory events, you add a
      listener like this:</para>

    <example>
      <title>Adding a DebugRuleRuntimeEventListener</title>

      <programlisting language="java">ksession.addEventListener( new DebugRuleRuntimeEventListener() );</programlisting>
    </example>

    <para>All emitted events implement the <code>KieRuntimeEvent</code>
    interface which can be used to retrieve the actual
    <code>KnowlegeRuntime</code> the event originated from.</para>

    <figure>
      <title>KieRuntimeEvent</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/kie/BuildDeployUtilizeAndRun/KieRuntimeEvent.png"
                     format=""/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>The events currently supported are:</para>

    <itemizedlist>
      <listitem>
        <para>MatchCreatedEvent</para>
      </listitem>

      <listitem>
        <para>MatchCancelledEvent</para>
      </listitem>

      <listitem>
        <para>BeforeMatchFiredEvent</para>
      </listitem>

      <listitem>
        <para>AfterMatchFiredEvent</para>
      </listitem>

      <listitem>
        <para>AgendaGroupPushedEvent</para>
      </listitem>

      <listitem>
        <para>AgendaGroupPoppedEvent</para>
      </listitem>

      <listitem>
        <para>ObjectInsertEvent</para>
      </listitem>

      <listitem>
        <para>ObjectDeletedEvent</para>
      </listitem>

      <listitem>
        <para>ObjectUpdatedEvent</para>
      </listitem>

      <listitem>
        <para>ProcessCompletedEvent</para>
      </listitem>

      <listitem>
        <para>ProcessNodeLeftEvent</para>
      </listitem>

      <listitem>
        <para>ProcessNodeTriggeredEvent</para>
      </listitem>

      <listitem>
        <para>ProcessStartEvent</para>
      </listitem>
    </itemizedlist>
  </section>

  <section>
    <title>KieRuntimeLogger</title>

    <para>The KieRuntimeLogger uses the comprehensive event system in
    Drools to create an audit log that can be used to log the execution of an
    application for later inspection, using tools such as the Eclipse audit
    viewer.</para>

    <figure>
      <title>KieLoggers</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/kie/BuildDeployUtilizeAndRun/KieLoggers.png"
                     format=""/>
        </imageobject>
      </mediaobject>
    </figure>

    <example>
      <title>FileLogger</title>

      <programlisting language="java">KieRuntimeLogger logger =
  KieServices.Factory.get().newFileLogger(ksession, "logdir/mylogfile");
...
logger.close();</programlisting>
    </example>
  </section>
  <section>
    <title>Commands and the CommandExecutor</title>
    <para>KIE has the concept of stateful or stateless sessions. Stateful sessions have already been
      covered, which use the standard KieRuntime, and can be worked with iteratively over time.
      Stateless is a one-off execution of a KieRuntime with a provided data set. It may return some
      results, with the session being disposed at the end, prohibiting further iterative
      interactions. You can think of stateless as treating an engine like a function call with
      optional return results.</para>
    <para>The foundation for this is the <code>CommandExecutor</code> interface, which both the
      stateful and stateless interfaces extend. This returns an
      <code>ExecutionResults</code>:</para>
    <figure>
      <title>CommandExecutor</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="images/kie/BuildDeployUtilizeAndRun/CommandExecutor.png" format=""/>
        </imageobject>
      </mediaobject>
    </figure>
    <figure>
      <title>ExecutionResults</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="images/kie/BuildDeployUtilizeAndRun/ExecutionResults.png" format=""/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>The <code>CommandExecutor</code> allows for commands to be executed on those sessions, the
      only difference being that the StatelessKieSession executes <code>fireAllRules()</code> at the
      end before disposing the session.  The commands can be created using the
        <code>CommandExecutor</code> .The Javadocs provide the full list of the allowed comands
      using the <code>CommandExecutor</code> .</para>
    <para>setGlobal and getGlobal are two commands relevant to both Drools and jBPM. </para>
    <para>Set Global calls setGlobal underneath. The optional boolean indicates on whether the
      command should return value as part of the <code>ExecutionResults</code>. If true it uses the
      same name as the global name. A String can be used instead of the boolean, if an alternative
      name is desired.</para>
    <para>
      <example>
        <title>Set Global Command</title>
        <programlisting language="java">StatelessKieSession ksession = kbase.newStatelessKieSession();
ExecutionResults bresults =
    ksession.execute( CommandFactory.newSetGlobal( "stilton", new Cheese( "stilton" ), true);
Cheese stilton = bresults.getValue( "stilton" );
</programlisting>
      </example>
    </para>
    <para>Allows an existing global to be returned. The second optional String argument allows for
      an alternative return name.</para>
    <example>
      <title>Get Global Command</title>
      <programlisting language="java">StatelessKieSession ksession = kbase.newStatelessKieSession();
ExecutionResults bresults =
    ksession.execute( CommandFactory.getGlobal( "stilton" );
Cheese stilton = bresults.getValue( "stilton" );
</programlisting>
    </example>
    <para>All the above examples execute single commands.  The <code>BatchExecution</code>
      represents a composite command, created from a list of commands. It will iterate over the list
      and execute each command in turn. This means you can insert some objects, start a process,
      call fireAllRules and execute a query, all in a single <code>execute(...)</code> call, which
      is quite powerful.</para>
    <para>The StatelessKieSession will execute <code>fireAllRules()</code> automatically at the end.
      However the keen-eyed reader probably has already noticed the <code>FireAllRules</code>
      command and wondered how that works with a StatelessKieSession. The <code>FireAllRules</code>
      command is allowed, and using it will disable the automatic execution at the end; think of
      using it as a sort of manual override function.</para>
    <para>Any command, in the batch, that has an out identifier set will add its results to the
      returned <code>ExecutionResults</code> instance. Let's look at a simple example to see how
      this works. The example presented includes command from the Drools and jBPM, for the sake of
      illustration. They are covered in more detail in the Drool and jBPM specific sections.</para>
    <example>
      <title>BatchExecution Command</title>
      <programlisting language="java">StatelessKieSession ksession = kbase.newStatelessKieSession();

List cmds = new ArrayList();
cmds.add( CommandFactory.newInsertObject( new Cheese( "stilton", 1), "stilton") );
cmds.add( CommandFactory.newStartProcess( "process cheeses" ) );
cmds.add( CommandFactory.newQuery( "cheeses" ) );
ExecutionResults bresults = ksession.execute( CommandFactory.newBatchExecution( cmds ) );
Cheese stilton = ( Cheese ) bresults.getValue( "stilton" );
QueryResults qresults = ( QueryResults ) bresults.getValue( "cheeses" );
</programlisting>
    </example>
    <para>In the above example multiple commands are executed, two of which populate the
        <code>ExecutionResults</code>. The query command defaults to use the same identifier as the
      query name, but it can also be mapped to a different identifier.</para>
    <para>All commands support XML and jSON marshalling using XStream, as well as JAXB marshalling.
      This is covered in section
      XXX.<?oxy_comment_start author="mdproctor" timestamp="20131031T080228+0000" comment="need to refrence the section. Currently this is in the -integration docs. So it feels disjointed."?></para>
    <?oxy_comment_end?>
  </section>

  <section>
    <title>StatelessKieSession</title>

    <para>The <code>StatelessKieSession</code> wraps the
    <code>KieSession</code>, instead of extending it. Its main
    focus is on the decision service type scenarios. It avoids the need to call
    <code>dispose()</code>. Stateless sessions do not support iterative
    insertions and the method call <code>fireAllRules()</code> from Java code;
    the act of calling <code>execute()</code> is a single-shot method that
    will internally instantiate a <code>KieSession</code>, add
    all the user data and execute user commands, call
    <code>fireAllRules()</code>, and then call <code>dispose()</code>. While
    the main way to work with this class is via the
    <code>BatchExecution</code> (a subinterface of <code>Command</code>) as
    supported by the <code>CommandExecutor</code> interface, two convenience
    methods are provided for when simple object insertion is all that's
    required. The <code>CommandExecutor</code> and <code>BatchExecution</code>
    are talked about in detail in their own section.</para>

    <figure>
      <title>StatelessKieSession</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/kie/BuildDeployUtilizeAndRun/StatelessKieSession.png"
                     format=""/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>Our simple example shows a stateless session executing a given
    collection of Java objects using the convenience API. It will iterate the
    collection, inserting each element in turn.</para>

    <example>
      <title>Simple StatelessKieSession execution with a Collection</title>

      <programlisting language="java">StatelessKieSession ksession = kbase.newStatelessKieSession();
ksession.execute( collection );</programlisting>
    </example>

    <para>If this was done as a single Command it would be as follows:</para>

    <example>
      <title>Simple StatelessKieSession execution with InsertElements Command</title>

      <programlisting language="java">ksession.execute( CommandFactory.newInsertElements( collection ) );  </programlisting>
    </example>

    <para>If you wanted to insert the collection itself, and the collection's
    individual elements, then
    <code>CommandFactory.newInsert(collection)</code> would do the job.</para>

    <para>Methods of the <code>CommandFactory</code> create the supported
    commands, all of which can be marshalled using XStream and the
    <code>BatchExecutionHelper</code>. <code>BatchExecutionHelper</code>
    provides details on the XML format as well as how to use Drools Pipeline
    to automate the marshalling of <code>BatchExecution</code> and
    <code>ExecutionResults</code>.</para>

    <para><code>StatelessKieSession</code> supports globals, scoped in a
    number of ways. We cover the non-command way first, as commands are
    scoped to a specific execution call. Globals can be resolved in three
    ways.</para>

    <itemizedlist>
      <listitem>
        <para>The StatelessKieSession method <code>getGlobals()</code>
        returns a Globals instance which provides access to the session's
        globals. These are shared for <emphasis>all</emphasis> execution
        calls. Exercise caution regarding mutable globals because execution
        calls can be executing simultaneously in different threads.</para>

        <example>
          <title>Session scoped global</title>

          <programlisting language="java">StatelessKieSession ksession = kbase.newStatelessKieSession();
// Set a global hbnSession, that can be used for DB interactions in the rules.
ksession.setGlobal( "hbnSession", hibernateSession );
// Execute while being able to resolve the "hbnSession" identifier.
ksession.execute( collection ); </programlisting>
        </example>
      </listitem>

      <listitem>
        <para>Using a delegate is another way of global resolution. Assigning
        a value to a global (with <code>setGlobal(String, Object)</code>)
        results in the value being stored in an internal collection mapping
        identifiers to values. Identifiers in this internal collection will
        have priority over any supplied delegate. Only if an identifier cannot
        be found in this internal collection, the delegate global (if any)
        will be used.</para>
      </listitem>

      <listitem>
        <para>The third way of resolving globals is to have execution scoped
        globals. Here, a <code>Command</code> to set a global is passed to the
        <code>CommandExecutor</code>.</para>
      </listitem>
    </itemizedlist>

    <para>The <code>CommandExecutor</code> interface also offers the ability
    to export data via "out" parameters. Inserted facts, globals and query
    results can all be returned.</para>

    <example>
      <title>Out identifiers</title>

      <programlisting language="java">// Set up a list of commands
List cmds = new ArrayList();
cmds.add( CommandFactory.newSetGlobal( "list1", new ArrayList(), true ) );
cmds.add( CommandFactory.newInsert( new Person( "jon", 102 ), "person" ) );
cmds.add( CommandFactory.newQuery( "Get People" "getPeople" );

// Execute the list
ExecutionResults results =
  ksession.execute( CommandFactory.newBatchExecution( cmds ) );

// Retrieve the ArrayList
results.getValue( "list1" );
// Retrieve the inserted Person fact
results.getValue( "person" );
// Retrieve the query as a QueryResults instance.
results.getValue( "Get People" );</programlisting>
    </example>
  </section>

  <section>
    <title>Marshalling</title>

    <para>The <code>KieMarshallers</code> are used to marshal and unmarshal
    KieSessions.</para>

    <figure>
      <title>KieMarshallers</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/kie/BuildDeployUtilizeAndRun/KieMarshallers.png"
                     format=""/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>An instance of the <code>KieMarshallers</code> can be retrieved from the <code>KieServices</code>.
    A simple example is shown below:</para>

    <example>
      <title>Simple Marshaller Example</title>

      <programlisting language="java">// ksession is the KieSession
// kbase is the KieBase
ByteArrayOutputStream baos = new ByteArrayOutputStream();
Marshaller marshaller = KieServices.Factory.get().getMarshallers().newMarshaller( kbase );
marshaller.marshall( baos, ksession );
baos.close();
</programlisting>
    </example>

    <para>However, with marshalling, you will need more flexibility when dealing
    with referenced user data. To achieve this use the
    <code>ObjectMarshallingStrategy</code> interface. Two implementations are
    provided, but users can implement their own. The two supplied strategies
    are <code>IdentityMarshallingStrategy</code> and
    <code>SerializeMarshallingStrategy</code>.
    <code>SerializeMarshallingStrategy</code> is the default, as shown in the
    example above, and it just calls the <code>Serializable</code> or
    <code>Externalizable</code> methods on a user instance.
    <code>IdentityMarshallingStrategy</code> creates an integer id for
    each user object and stores them in a Map, while the id is written to the
    stream. When unmarshalling it accesses the
    <code>IdentityMarshallingStrategy</code> map to retrieve the instance.
    This means that if you use the <code>IdentityMarshallingStrategy</code>,
    it is stateful for the life of the Marshaller instance and will create ids
    and keep references to all objects that it attempts to marshal. Below is
    the code to use an Identity Marshalling Strategy.</para>

    <example>
      <title>IdentityMarshallingStrategy</title>

      <programlisting language="java">ByteArrayOutputStream baos = new ByteArrayOutputStream();
KieMarshallers kMarshallers = KieServices.Factory.get().getMarshallers()
ObjectMarshallingStrategy oms = kMarshallers.newIdentityMarshallingStrategy()
Marshaller marshaller =
        kMarshallers.newMarshaller( kbase, new ObjectMarshallingStrategy[]{ oms } );
marshaller.marshall( baos, ksession );
baos.close();
</programlisting>
    </example>

    <para>Im most cases, a single strategy is insufficient. For added flexibility, the
    <code>ObjectMarshallingStrategyAcceptor</code> interface can be used.
    This Marshaller has a chain of strategies,
    and while reading or writing a user object it iterates the
    strategies asking if they accept responsibility for marshalling the user
    object. One of the provided implementations is
    <code>ClassFilterAcceptor</code>. This allows strings and wild cards to be
    used to match class names. The default is "*.*", so in the above example
    the Identity Marshalling Strategy is used which has a default "*.*"
    acceptor.</para>

    <para>Assuming that we want to serialize all classes except for one given
    package, where we will use identity lookup, we could do the
    following:</para>

    <example>
      <title>IdentityMarshallingStrategy with Acceptor</title>

      <programlisting language="java">ByteArrayOutputStream baos = new ByteArrayOutputStream();
KieMarshallers kMarshallers = KieServices.Factory.get().getMarshallers()
ObjectMarshallingStrategyAcceptor identityAcceptor =
        kMarshallers.newClassFilterAcceptor( new String[] { "org.domain.pkg1.*" } );
ObjectMarshallingStrategy identityStrategy =
        kMarshallers.newIdentityMarshallingStrategy( identityAcceptor );
ObjectMarshallingStrategy sms = kMarshallers.newSerializeMarshallingStrategy();
Marshaller marshaller =
        kMarshallers.newMarshaller( kbase,
                                    new ObjectMarshallingStrategy[]{ identityStrategy, sms } );
marshaller.marshall( baos, ksession );
baos.close();
</programlisting>
    </example>

    <para>Note that the acceptance checking order is in the natural order of
    the supplied elements.</para>

    <para>Also note that if you are using scheduled matches (i.e. some
    of your rules use timers or calendars) they are marshallable only if,
    before you use it, you configure your KieSession to use a
    trackable timer job factory manager as follows:</para>

    <example>
      <title>Configuring a trackable timer job factory manager</title>

      <programlisting language="java">KieSessionConfiguration ksconf = KieServices.Factory.get().newKieSessionConfiguration();
ksconf.setOption(TimerJobFactoryOption.get("trackable"));
KSession ksession = kbase.newKieSession(ksconf, null);</programlisting>
    </example>

  </section>

  <section>
    <title>Persistence and Transactions</title>

    <para>Longterm out of the box persistence with Java Persistence API (JPA)
    is possible with Drools. It is necessary to have some implementation of the
    Java Transaction API (JTA) installed. For development purposes
    the Bitronix Transaction Manager is suggested, as it's simple to set up and
    works embedded, but for production use JBoss Transactions is
    recommended.</para>

    <example>
      <title>Simple example using transactions</title>

      <programlisting language="java">KieServices kieServices = KieServices.Factory.get();
Environment env = kieServices.newEnvironment();
env.set( EnvironmentName.ENTITY_MANAGER_FACTORY,
         Persistence.createEntityManagerFactory( "emf-name" ) );
env.set( EnvironmentName.TRANSACTION_MANAGER,
         TransactionManagerServices.getTransactionManager() );

// KieSessionConfiguration may be null, and a default will be used
KieSession ksession =
        kieServices.getStoreServices().newKieSession( kbase, null, env );
int sessionId = ksession.getId();

UserTransaction ut =
  (UserTransaction) new InitialContext().lookup( "java:comp/UserTransaction" );
ut.begin();
ksession.insert( data1 );
ksession.insert( data2 );
ksession.startProcess( "process1" );
ut.commit();</programlisting>
    </example>

    <para>To use a JPA, the Environment must be set with both the
    <code>EntityManagerFactory</code> and the <code>TransactionManager</code>.
    If rollback occurs the ksession state is also rolled back, hence it is possible
    continue to use it after a rollback. To load a previously persisted
    KieSession you'll need the id, as shown below:</para>

    <example>
      <title>Loading a KieSession</title>

      <programlisting language="java">KieSession ksession =
        kieServices.getStoreServices().loadKieSession( sessionId, kbase, null, env );</programlisting>
    </example>

    <para>To enable persistence several classes must be added to your
    persistence.xml, as in the example below:</para>

    <example>
      <title>Configuring JPA</title>

      <programlisting language="xml">&lt;persistence-unit name="org.drools.persistence.jpa" transaction-type="JTA"&gt;
   &lt;provider&gt;org.hibernate.ejb.HibernatePersistence&lt;/provider&gt;
   &lt;jta-data-source&gt;jdbc/BitronixJTADataSource&lt;/jta-data-source&gt;
   &lt;class&gt;org.drools.persistence.info.SessionInfo&lt;/class&gt;
   &lt;class&gt;org.drools.persistence.info.WorkItemInfo&lt;/class&gt;
   &lt;properties&gt;
         &lt;property name="hibernate.dialect" value="org.hibernate.dialect.H2Dialect"/&gt;
         &lt;property name="hibernate.max_fetch_depth" value="3"/&gt;
         &lt;property name="hibernate.hbm2ddl.auto" value="update" /&gt;
         &lt;property name="hibernate.show_sql" value="true" /&gt;
         &lt;property name="hibernate.transaction.manager_lookup_class"
                      value="org.hibernate.transaction.BTMTransactionManagerLookup" /&gt;
   &lt;/properties&gt;
&lt;/persistence-unit&gt;
</programlisting>
    </example>

    <para>The jdbc JTA data source would have to be configured first. Bitronix
    provides a number of ways of doing this, and its documentation should be
    consulted for details. For a quick start, here is the programmatic
    approach:</para>

    <example>
      <title>Configuring JTA DataSource</title>

      <programlisting language="java">PoolingDataSource ds = new PoolingDataSource();
ds.setUniqueName( "jdbc/BitronixJTADataSource" );
ds.setClassName( "org.h2.jdbcx.JdbcDataSource" );
ds.setMaxPoolSize( 3 );
ds.setAllowLocalTransactions( true );
ds.getDriverProperties().put( "user", "sa" );
ds.getDriverProperties().put( "password", "sasa" );
ds.getDriverProperties().put( "URL", "jdbc:h2:mem:mydb" );
ds.init();
</programlisting>
    </example>

    <para>Bitronix also provides a simple embedded JNDI service, ideal for
    testing. To use it, add a jndi.properties file to your META-INF folder and add the
    following line to it:</para>

    <example>
      <title>JNDI properties</title>

      <programlisting>java.naming.factory.initial=bitronix.tm.jndi.BitronixInitialContextFactory
</programlisting>
    </example>
  </section>
</section>
