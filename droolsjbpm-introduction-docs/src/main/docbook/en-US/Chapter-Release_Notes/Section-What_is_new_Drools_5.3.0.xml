<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>What is New and Noteworthy in Drools 5.3.0</title>

  <section>
    <title>Guvnor</title>

    <section>
      <title>Declarative type extension</title>

      <para>Following the enhancement to Drools Expert type declaration in
      Guvnor now support 'extends' to inherit from super-classes. Sub-classes
      can extend either other types declared in the same package or imported
      Java classes. In order to extend a type declared in Java by a declared
      subtype, repeat the supertype in a declare statement without any
      fields.</para>

      <figure>
        <title>Extending a class</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center"
                       fileref="images/Chapter-Release_Notes/declarative-model-extends1.png"
                       format="PNG" scalefit="1"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>

      <figure>
        <title>Declarative model showing extensions</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center"
                       fileref="images/Chapter-Release_Notes/declarative-model-extends2.png"
                       format="PNG" scalefit="1"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Improved Knowledge Bases view</title>

      <para>Thanks to the help of a community member the tree-view shown in
      the Knowledge Bases view has been improved.</para>

      <para>We also took the opportunity to make a few improvements of our
      own.</para>

      <itemizedlist>
        <listitem>
          <para>The view no longer repeats intermediate level sub-package
          names that are empty (community led effort).</para>
        </listitem>

        <listitem>
          <para>The package view can be viewed hierarchically, as has been the
          default up to 5.2.0.Final.</para>
        </listitem>

        <listitem>
          <para>The package view can now also be viewed "flat" with no
          nesting</para>
        </listitem>

        <listitem>
          <para>The tree's nodes can be fully expanded or collapsed.</para>
        </listitem>
      </itemizedlist>

      <figure>
        <title>Hierarchical view</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center"
                       fileref="images/Chapter-Release_Notes/improved-knowledgebases-view1.png"
                       format="PNG"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>

      <figure>
        <title>Flat view</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center"
                       fileref="images/Chapter-Release_Notes/improved-knowledgebases-view2.png"
                       format="PNG"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Asset Viewer</title>

      <para>Guvnor continues to grow and improve with every passing release.
      One of the requirements we have is to move Guvnor away from a pure
      "Rules" or "Knowledge" repository management and authoring environment
      to a more generic one, in which consumers of different technologies can
      tailor their experience to their domain's requirements.</para>

      <para>One of the more noticable changes we are making to support this
      has been to de-couple asset types and groups from the code. What was
      once previously static code is now defined by compile-time
      configuration. Due to limitations in GWT (no client-side reflection),
      the technology with which Guvnor is implemented, we are unfortunately
      not able to offer runtime configuration at this moment.</para>

      <para>The asset groups are configurable within source file;
      src/main/resources/drools-asseteditors.xml. This file is used at GWT
      compile time to wire-up asset types with their respective editor, group
      and group icon. An example extract from the foregoing file looks like
      this:-</para>

      <programlisting>&lt;asseteditor&gt;
    &lt;class&gt;org.drools.guvnor.client.modeldriven.ui.RuleModeller&lt;/class&gt;
    &lt;format&gt;brl&lt;/format&gt;
    &lt;icon&gt;images.ruleAsset()&lt;/icon&gt; &lt;title&gt;constants.BusinessRuleAssets()&lt;/title&gt;
&lt;/asseteditor&gt;</programlisting>

      <para>To emphasis the separation, asset groups have become their own
      "editor" appearing as a tab in Guvnor's main, central panel.</para>

      <figure>
        <title>Asset Viewer</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center"
                       fileref="images/Chapter-Release_Notes/asset-viewer.png"
                       format="PNG" scalefit="1"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>

      <para>The format of the new screen is being trialled for 5.3.0.Beta1.
      There has been some discussion whether a single table containing all
      assets would be better - with collapsible rows to group different types
      of asset. The immediate problem with this approach is however that
      finding different asset types on a "paged table" becomes more cumbersome
      for the user; as they'd have to sort by type and page through.</para>

      <para>We therefore ask for community feedback.</para>
    </section>

    <section>
      <title>Guvnor enumeration improvements</title>

      <para>Previously Guvnor enumerations that had a "display value" and a
      "DRL value" (i.e. the value substituted for the display value when DRL
      was generated) could be defined with "&lt;DRL value&gt;=&lt;Display
      value&gt;". Various community users have been using Guvnor enumerations
      to support complex rule definitions in both DSL and the guided Decision
      Table editor.</para>

      <programlisting>'Fact.operator' : ['equals=\\=\\=', 'not equals=!\\=']</programlisting>
    </section>

    <section>
      <title>Guvnor Guided Decision Table</title>

      <para>A couple of minor enhancements have been made to Guvnor's guided
      decision table editor:-</para>

      <itemizedlist>
        <listitem>
          <para>Removal of sorting</para>

          <para>You are now able to restore the original sort order of a
          column by clicking on the sort icon through: ascending, descending
          and none.</para>
        </listitem>

        <listitem>
          <para>Formulae and Predicates support value lists</para>

          <para>Up until now only literal value columns could take advantage
          of value lists; either "Guvnor enums" or the Decision Table's
          "Optional value list". This been rectified with this release
          bringing the advantage of pre-defined choices for these types of
          fields to the business user.</para>

          <figure>
            <title>Defining a predicate with a value list</title>

            <mediaobject>
              <imageobject>
                <imagedata align="center"
                           fileref="images/Chapter-Release_Notes/dtable-predicate-value-list1.png"
                           format="PNG" scalefit="0"></imagedata>
              </imageobject>
            </mediaobject>
          </figure>

          <figure>
            <title>Using the predicate column</title>

            <mediaobject>
              <imageobject>
                <imagedata align="center"
                           fileref="images/Chapter-Release_Notes/dtable-predicate-value-list2.png"
                           format="PNG" scalefit="0"></imagedata>
              </imageobject>
            </mediaobject>
          </figure>
        </listitem>
      </itemizedlist>
    </section>
  </section>
</section>
