<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xmlns="http://docbook.org/ns/docbook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:ns="http://docbook.org/ns/docbook"
         xml:id="remote.java.api">

  <title>Remote Java API</title>
  
    <para>The Remote Java API provides <code>KieSession</code>, <code>TaskService</code> and
        <code>AuditLogService</code> interfaces to the JMS and REST APIs.</para>
    
    <para>The interface implementations provided by the Remote Java API take care of the underlying
      logic needed to communicate with the JMS or REST APIs. In other words, these implementations
      will allow you to interact with a remote workbench instance (i.e. KIE workbench or the jBPM
      Console) via known interfaces such as the <code>KieSession</code> or <code>TaskService</code> interface, 
      without having to deal with the underlying transport and serialization details.</para>
    
  <important>
    <title>The Remote Java API provides clients, not "instances"</title>
    <para>While the <code>KieSession</code>, <code>TaskSerivce</code> and
        <code>AuditLogService</code> instances provided by the Remote Java API may "look" and "feel"
      like local instances of the same interfaces, please make sure to remember that these instances
      are only wrappers around a REST or jMS client that interacts with a remote REST or JMS
      API.</para>
    <blockquote> <!-- necessary in order to insert a space here --> </blockquote>
    <para>This means that if a requested operation fails on the <emphasis>server</emphasis>, the
      Remote Java API client instance on the <emphasis>client</emphasis> side will throw a
        <code>RuntimeException</code> indicating that the REST call failed. This is different from
      the behaviour of a "real" (or local) instance of a <code>KieSession</code>,
        <code>TaskSerivce</code> and <code>AuditLogService</code> instance because the exception the
      local instances will throw will relate to how the operation failed. Also, while local
      instances require different handling (such as having to dispose of a <code>KieSession</code>),
      client instances provided by the Remote Java API hold no state and thus do not require any
      special handling.</para>
    <blockquote> <!-- necessary in order to insert a space here --> </blockquote>
    <para>Lastly, operations on a Remote Java API client instance that would normally throw other
      exceptions (such as the <code>TaskService.claim(taskId, userId)</code> operation when called
      by a user who is not a potential owner), will now throw a <code>RuntimeException</code>
      instead when the requested operation fails on the <emphasis>server</emphasis>.</para>
  </important>
   
  <para>The first step in interacting with the remote runtime is to create either the
      <code>RemoteRestRuntimeFactory</code> or <code>RemoteJmsRuntimeEngineFactory</code>, both of
    which are instances of the <code>RemoteRuntimeEngineFactory</code> interface.</para>
  
  <para>The configuration for the Remote Java API is done when creating the
      <code>RemoteRuntimeEngineFactory</code> instance: there are a number of different constructors
    for both the JMS and REST impelementations that allow the configuration of such things as the
    base URL of the REST API, JMS queue location or timeout while waiting for responses. </para>
  
  <para>Once the factory instances have been created, there are a couple of methods that can then be
    used to instantiate the client instance that you want to use: <variablelist>
      <title>Remote Java API Methods</title>
      <varlistentry>
        <term><command>RemoteRuntimeEngine
          RemoteRuntimeEngineFactory.newRuntimeEngine()</command></term>
        <listitem>
          <para>This method instantiates a new <command>RemoteRuntimeEngine</command> (client)
            instance.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><command>RemoteRuntimeEngineFactory.addExtraJaxbClasses(Collection&lt;Class&lt;?&gt;&gt;
            extraJaxbClasses );</command></term>
        <listitem>
          <para>This method adds extra classes to the classpath available to the serialization
            mechanisms.</para>
          <para>When passing instances of user-defined classes in a Remote Java API call, it's
            important to have added the classes via this method first so that the class instances
            can be serialized correctly.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><command>KieSession RemoteRuntimeEngine.getKieSession()</command></term>
        <listitem>
          <para>This method instantiates a new (client) <command>KieSession</command>
            instance.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><command>TaskService RemoteRuntimeEngine.getTaskService()</command></term>
        <listitem>
          <para>This method instantiates a new (client) <command>TaskService</command>
            instance.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><command>AuditLogService RemoteRuntimeEngine.getAuditLogService()</command></term>
        <listitem>
          <para>This method instantiates a new (client) <command>AuditLogService</command>
            instance.</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </para>
  
    <section xml:id="remote.java.api.rest">
      <title>The REST Remote Java RuntimeEngine Factory</title>     
      <note>
        <title>Oops!</title>
        <para>The <code>RemoteRestRuntimeFactory</code> should indeed have been called the
            <code>RemoteRestRuntime<emphasis>Engine</emphasis>Factory</code>! Sometimes it's the
        easiest mistakes which are the hardest to catch. This will be corrected in future
        releases.</para>
      </note>
      
      <para>The <code>RemoteRestRuntimeFactory</code> has 4 constructor methods available. Besides
      an "everything" constructor method which provides all of the options provided below, there are
      also the following 3 constructors:</para>
      
      <para>
        <variablelist>
          <title>RemoteRestRuntimeFactory constructor method parameters</title>
          <varlistentry>
            <term>Simple constructor</term>
            <listitem>
              <table frame="all">
                <title>Simple <command>RemoteRestRuntimeFactory</command> constructor parameters</title>
                <tgroup cols="3" align="left" rowsep="1" colsep="1">
                  <thead valign="top">
                    <row>
                      <entry>Name</entry>
                      <entry>Type</entry>
                      <entry>Description</entry>
                    </row>
                  </thead>
                  <tbody valign="top">
                    <row>
                      <entry><code>deploymentId</code></entry>
                      <entry><code>java.lang.String</code></entry>
                      <entry>
                        <para>This is the name (id) of the deployment the <code>RuntimeEngine</code>
                          should interact with.</para>
                      </entry>
                    </row>
                    <row>
                      <entry><code>baseUrl</code></entry>
                      <entry><code>java.net.URL</code></entry>
                      <entry>
                        <para>This is the URL of the deployed jbpm-console, kie-wb or BPMS instance.</para>
                        <para>For example: <code>http://127.0.0.1:8080/jbpm-console/</code></para>
                      </entry>
                    </row>
                    <row>
                      <entry><code>username</code></entry>
                      <entry><code>java.lang.String</code></entry>
                      <entry>
                        <para>This is the user name needed to access the JMS queues.</para>
                      </entry>
                    </row>
                    <row>
                      <entry><code>password</code></entry>
                      <entry><code>java.lang.String</code></entry>
                      <entry>
                        <para>This is the password needed to access the JMS queues.</para>
                      </entry>
                    </row>
                  </tbody>
                </tgroup>
              </table>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Constructor with timeout parameter</term>
            <listitem>
              <table frame="all">
                <title><command>RemoteRestRuntimeFactory</command> constructor parameters with (response message) timeout parameter</title>
                <tgroup cols="3" align="left" rowsep="1" colsep="1">
                  <thead valign="top">
                    <row>
                      <entry>Name</entry>
                      <entry>Type</entry>
                      <entry>Description</entry>
                    </row>
                  </thead>
                  <tbody valign="top">
                    <row>
                      <entry><code>deploymentId</code></entry>
                      <entry><code>java.lang.String</code></entry>
                      <entry>
                        <para>This is the name (id) of the deployment the <code>RuntimeEngine</code>
                          should interact with.</para>
                      </entry>
                    </row>
                    <row>
                      <entry><code>baseUrl</code></entry>
                      <entry><code>java.net.URL</code></entry>
                      <entry>
                        <para>This is the URL of the deployed jbpm-console, kie-wb or BPMS instance.</para>
                        <para>For example: <code>http://127.0.0.1:8080/jbpm-console/</code></para>
                      </entry>
                    </row>
                    <row>
                      <entry><code>username</code></entry>
                      <entry><code>java.lang.String</code></entry>
                      <entry>
                        <para>This is the user name needed to access the REST API.</para>
                      </entry>
                    </row>
                    <row>
                      <entry><code>password</code></entry>
                      <entry><code>java.lang.String</code></entry>
                      <entry>
                        <para>This is the password needed to access the REST API.</para>
                      </entry>
                    </row>
                    <row>
                      <entry><code>timeoutInSeconds</code></entry>
                      <entry><code>int</code></entry>
                      <entry>
                        <para>This maximum number of seconds to wait when waiting for a response from the server.</para>
                      </entry>
                    </row>
                  </tbody>
                </tgroup>
              </table>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Constructor with form-based authorization parameter</term>
            <listitem>
              <table frame="all">
                <title><command>RemoteRestRuntimeFactory</command> constructor parameters with form-based authorization parameter</title>
                <tgroup cols="3" align="left" rowsep="1" colsep="1">
                  <thead valign="top">
                    <row>
                      <entry>Name</entry>
                      <entry>Type</entry>
                      <entry>Description</entry>
                    </row>
                  </thead>
                  <tbody valign="top">
                    <row>
                      <entry><code>deploymentId</code></entry>
                      <entry><code>java.lang.String</code></entry>
                      <entry>
                        <para>This is the name (id) of the deployment the <code>RuntimeEngine</code>
                          should interact with.</para>
                      </entry>
                    </row>
                    <row>
                      <entry><code>baseUrl</code></entry>
                      <entry><code>java.net.URL</code></entry>
                      <entry>
                        <para>This is the URL of the deployed jbpm-console, kie-wb or BPMS instance.</para>
                        <para>For example: <code>http://127.0.0.1:8080/jbpm-console/</code></para>
                      </entry>
                    </row>
                    <row>
                      <entry><code>username</code></entry>
                      <entry><code>java.lang.String</code></entry>
                      <entry>
                        <para>This is the user name needed to access the REST API.</para>
                      </entry>
                    </row>
                    <row>
                      <entry><code>password</code></entry>
                      <entry><code>java.lang.String</code></entry>
                      <entry>
                        <para>This is the password needed to access the REST API.</para>
                      </entry>
                    </row>
                    <row>
                      <entry><code>useFormBasedAuth</code></entry>
                      <entry><code>boolean</code></entry>
                      <entry>
                        <para>Whether or not to use form-based authentication when making a REST call. Form-based authentication will be necessary on tomcat instances.</para>
                      </entry>
                    </row>
                  </tbody>
                </tgroup>
              </table>
            </listitem>
          </varlistentry>
        </variablelist>
      </para>
      <section>
        <title>Example usage</title>
          <para>The following example illustrates how the Remote Java API can be used with the REST API.</para>
      
      <programlisting language="java"><![CDATA[public void startProcessAndHandleTaskViaRestRemoteJavaAPI(URL instanceUrl, String deploymentId, String user, String password) {
  // the serverRestUrl should contain a URL similar to "http://localhost:8080/jbpm-console/"
  
  // Setup the factory class with the necessarry information to communicate with the REST services
  RemoteRuntimeEngineFactory restSessionFactory 
    = new RemoteRestRuntimeFactory(deploymentId, instanceUrl, user, password);

  // Create KieSession and TaskService instances and use them
  RemoteRuntimeEngine engine = restSessionFactory.newRuntimeEngine();
  KieSession ksession = engine.getKieSession();
  TaskService taskService = engine.getTaskService();

  // Each opertion on a KieSession, TaskService or AuditLogService (client) instance 
  // sends a request for the operation to the server side and waits for the response
  // If something goes wrong on the server side, the client will throw an exception. 
  ProcessInstance processInstance 
    = ksession.startProcess("com.burns.reactor.maintenance.cycle");
  long procId = processInstance.getId();

  String taskUserId = user;
  taskService = engine.getTaskService();
  List<TaskSummary> tasks = taskService.getTasksAssignedAsPotentialOwner(user, "en-UK");

  long taskId = -1;
  for (TaskSummary task : tasks) {
    if (task.getProcessInstanceId() == procId) {
      taskId = task.getId();
    }
  }

  if (taskId == -1) {
    throw new IllegalStateException("Unable to find task for " + user + " in process instance " + procId);
  }

  taskService.start(taskId, taskUserId);
}
]]></programlisting>
    </section>
     
     <!-- finish this.. 
    <section>
      <title>Remote REST Java API exceptions</title>
      
      <para>Because the Remote REST Java API clients implement the existing <code>KieSession</code>,
          <code>TaskService</code> and <code>AuditLogService</code> interfaces, the exceptions
        thrown by the client implementations must be instances of a
        <code>RuntimeException</code>.</para>
      
      <para>The table below lists the exceptions thrown by the different client interfaces.</para>
      
      <table frame="all">
        <title>Exceptions thrown by the Remote REST Java API client implementations</title>
        <tgroup cols="3" align="left" rowsep="1" colsep="1">
          <thead valign="top">
            <row>
              <entry>Name</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody valign="top">
            <row>
              <entry><code>deploymentId</code></entry>
              <entry><code>java.lang.String</code></entry>
              <entry>
                <para>This is the name (id) of the deployment the <code>RuntimeEngine</code>
                  should interact with.</para>
              </entry>
            </row>
            <row>
              <entry><code>baseUrl</code></entry>
              <entry><code>java.net.URL</code></entry>
              <entry>
                <para>This is the URL of the deployed jbpm-console, kie-wb or BPMS instance.</para>
                <para>For example: <code>http://127.0.0.1:8080/jbpm-console/</code></para>
              </entry>
            </row>
            <row>
              <entry><code>username</code></entry>
              <entry><code>java.lang.String</code></entry>
              <entry>
                <para>This is the user name needed to access the REST API.</para>
              </entry>
            </row>
            <row>
              <entry><code>password</code></entry>
              <entry><code>java.lang.String</code></entry>
              <entry>
                <para>This is the password needed to access the REST API.</para>
              </entry>
            </row>
            <row>
              <entry><code>timeoutInSeconds</code></entry>
              <entry><code>int</code></entry>
              <entry>
                <para>This maximum number of seconds to wait when waiting for a response from the server.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      
    </section>
    -->
    </section>
         
    <section xml:id="remote.java.api.jms">
      <title>The JMS Remote Java RuntimeEngine Factory</title>
      
      <para>The Remote JMS Java RuntimeEngine works precisely the same as the REST variant, except
        that it has different constructors.</para>
      
      <para>The <code>RemoteJmsRuntimeEngineFactory</code> constructors can be grouped into 3 types.
      The list below specifies the main arguments to each group type. <orderedlist>
        <listitem>
          <para>The URL of the execution server instance is given</para>
        </listitem>
        <listitem>
          <para>The JMS remote access objects (such as the <code>ConnectionFactory</code> and
              <code>Queue</code>) are given.</para>
        </listitem>
        <listitem>
          <para>A remote <code>InitialContext</code> instance (created using JNDI) from the server
            is given.</para>
        </listitem>
      </orderedlist></para>
      
      <formalpara>
        <title>Configuration using the server <code>URL</code></title>
        
        <para>Configuration using only the URL of the server where the jBPM Console or Kie Workbench
        instance is running, is the most straightforward. However, this is only possible when the
        jBPM console or KIE Workbench instance is running on Wildfly or JBoss AS, or JBoss EAP. </para>
        
        <para> The following table describes the parameters used when using an
          <code>InitialContext</code> to configure a <code>RemoteJmsRuntimeEngineFactory</code>
        instance: <table frame="all">
          <title>RemoteJmsRuntimeFactory constructor arguments</title>
          <tgroup cols="3" align="left" rowsep="1" colsep="1">
            <thead valign="top">
              <row>
                <entry>Name</entry>
                <entry>Type</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody valign="top">
              <row>
                <entry><code>deploymentId</code></entry>
                <entry><code>java.lang.String</code></entry>
                <entry>
                  <para>This is the name (id) of the deployment the <code>RuntimeEngine</code>
                    should interact with.</para>
                </entry>
              </row>
              <row>
                <entry><code>serverURL</code></entry>
                <entry><code>java.net.URL</code></entry>
                <entry>
                  <para>This is the URL of the (JBoss) server instance..</para>
                </entry>
              </row>
              <row>
                <entry><code>username</code></entry>
                <entry><code>java.lang.String</code></entry>
                <entry>
                  <para>This is the user name needed to access the JMS queues and JNDI
                    InitialContext instance. </para>
                </entry>
              </row>
              <row>
                <entry><code>password</code></entry>
                <entry><code>java.lang.String</code></entry>
                <entry>
                  <para>This is the password needed to access the JMS queues and JNDI InitialContext
                    instance. </para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </table></para>
      </formalpara>
      
      <formalpara>
        <title>Configuration using an <code>InitialContext</code> instance</title>
        
        <para>When configuring the <code>RemoteJmsRuntimeEngineFactory</code> with an
          <code>InitialContext</code> instance as a parameter, it's necessary to retrieve the
          (remote) <code>InitialContext</code> instance first from the remote server. The following
          code illustrates how to do this. </para>
        
      
      </formalpara>
      
      <important>
        <para>The code below illustrates how this can be done with a <emphasis>JBoss AS 7 or EAP
          6</emphasis> server instance. Similar code is used in the constructor above.</para>
        <blockquote> <!-- necessary in order to insert a space here --> </blockquote>
        <para>However, regardless of which application server you use, it is necessary to
          include in your classpath the class specified as the <code>INITIAL_CONTEXT_FACTORY</code>
          (see below). For JBoss AS 7 and EAP 6, the artifact (jar) containing this class is the
            <code>org.jboss:jboss-remote-naming</code> artifact (jar), version
            <code>1.0.5.Final</code> or higher. Depending on the version of AS 7 or EAP 6 that you
          use, this version may vary.</para>
        <blockquote> <!-- necessary in order to insert a space here --> </blockquote>
        <para>If you are using a <emphasis>different</emphasis> application server, please see your specific
          application server documentation for the parameters and artifacts necessary to create an
            <code>InitialContextFactory</code> instance or otherwise get a remote
            <code>InitialContext</code> instance (via JNDI) from the application server instance.</para>
      </important>
      
      <programlisting language="java"><![CDATA[public void startProcessAndTaskViaJmsRemoteJavaAPI(String serverHostName, String deploymentId, String user, String password) {
  // Setup remote JMS runtime engine factory
  InitialContext remoteInitialContext 
    = getRemoteInitialContext(serverHostName, user, password);
  int maxTimeoutSecs = 5;
  RemoteJmsRuntimeEngineFactory remoteJmsFactory 
    = new RemoteJmsRuntimeEngineFactory(deploymentId, remoteInitialContext, user, password, maxTimeoutSecs);

  // Interface with JMS api
  RuntimeEngine engine = remoteJmsFactory.newRuntimeEngine();
  KieSession ksession = engine.getKieSession();
  ProcessInstance processInstance = ksession.startProcess("com.burns.reactor.maintenance.cycle");
  long procId = processInstance.getId();
  TaskService taskService = engine.getTaskService();
  List<Long> tasks = taskService.getTasksByProcessInstanceId(procId);
  taskService.start(tasks.get(0), user);
}

private static InitialContext getRemoteInitialContext(String jbossServerHostName, String user, String password) { 
  // Configure the (JBoss AS 7/EAP 6) InitialContextFactory
  Properties initialProps = new Properties();
  initialProps.setProperty(InitialContext.INITIAL_CONTEXT_FACTORY, "org.jboss.naming.remote.client.InitialContextFactory");
  initialProps.setProperty(InitialContext.PROVIDER_URL, "remote://"+ jbossServerHostName + ":4447");
  initialProps.setProperty(InitialContext.SECURITY_PRINCIPAL, user);
  initialProps.setProperty(InitialContext.SECURITY_CREDENTIALS, password);

  for (Object keyObj : initialProps.keySet()) {
    String key = (String) keyObj;
    System.setProperty(key, (String) initialProps.get(key));
  }
  
  // Create the remote InitialContext instance
  try {
    return new InitialContext(initialProps);
  } catch (NamingException e) {
    throw new RuntimeException("Unable to create " + InitialContext.class.getSimpleName(), e);
  }
}]]></programlisting>
      
      <para> The following table describes the parameters used when using an
        <code>InitialContext</code> to configure a <code>RemoteJmsRuntimeEngineFactory</code>
      instance: <table frame="all">
        <title>RemoteJmsRuntimeFactory constructor arguments</title>
        <tgroup cols="3" align="left" rowsep="1" colsep="1">
          <thead valign="top">
            <row>
              <entry>Name</entry>
              <entry>Type</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody valign="top">
            <row>
              <entry><code>deploymentId</code></entry>
              <entry><code>java.lang.String</code></entry>
              <entry>
                <para>This is the name (id) of the deployment the <code>RuntimeEngine</code> should
                  interact with.</para>
              </entry>
            </row>
            <row>
              <entry><code>initialContext</code></entry>
              <entry><code>javax.naming.InitialContext</code></entry>
              <entry>
                <para>This is a remote <code>InitialContext</code> instance from which the
                    (<code>javax.jms</code>) <code>ConnectionFactory</code> and <code>Queue</code>
                  instances can be retrieved.</para>
              </entry>
            </row>
            <row>
              <entry><code>username</code></entry>
              <entry><code>java.lang.String</code></entry>
              <entry>
                <para>This is the user name needed to access the JMS queues.</para>
              </entry>
            </row>
            <row>
              <entry><code>password</code></entry>
              <entry><code>java.lang.String</code></entry>
              <entry>
                <para>This is the password needed to access the JMS queues.</para>
              </entry>
            </row>
            <row>
              <entry><code>timeoutSeconds</code></entry>
              <entry><code>int</code></entry>
              <entry>
                <para>This maximum number of seconds to wait when waiting for a response from
                  the server.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table></para>

      <formalpara>
        <title>Configuration using <code>ConnectionFactory</code> and <code>Queue</code> instance parameters</title>
        <para>Some users may have direct access to a <code>ConnectionFactory</code> and the
          <code>Queue</code> instances needed to interact with the JMS API. In this case, they can
        use the <code>RemoteJmsRuntimeEngineFactory</code> constructor that uses the following
        arguments: <table frame="all">
          <title>RemoteJmsRuntimeEngineFactory constructor arguments</title>
          <tgroup cols="3" align="left" rowsep="1" colsep="1">
            <thead valign="top">
              <row>
                <entry>Name</entry>
                <entry>Type</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody valign="top">
              <row>
                <entry><code>deploymentId</code></entry>
                <entry><code>java.lang.String</code></entry>
                <entry>
                  <para>This is the name (id) of the deployment the <code>RuntimeEngine</code>
                    should interact with.</para>
                </entry>
              </row>
              <row>
                <entry><code>connectionFactory</code></entry>
                <entry><code>javax.jms.ConnectionFactory</code></entry>
                <entry>
                  <para>This is a <code>ConnectionFactory</code> instance used to connect to the
                      <code>ksessionQueue</code> or <code>taskQueue</code>.</para>
                </entry>
              </row>
              <row>
                <entry><code>ksessionQueue</code></entry>
                <entry><code>javax.jms.Queue</code></entry>
                <entry>
                  <para>This is an instance of the <code>Queue</code> for requests relating to the
                    process instance.</para>
                </entry>
              </row>
              <row>
                <entry><code>taskQueue</code></entry>
                <entry><code>javax.jms.Queue</code></entry>
                <entry>
                  <para>This is an instance of the <code>Queue</code> for requests relating to task
                    service usage.</para>
                </entry>
              </row>
              <row>
                <entry><code>responseQueue</code></entry>
                <entry><code>javax.jms.Queue</code></entry>
                <entry>
                  <para>This is an instance of the <code>Queue</code> used to receive
                    responses.</para>
                </entry>
              </row>
              <row>
                <entry><code>username</code></entry>
                <entry><code>java.lang.String</code></entry>
                <entry>
                  <para>This is the user name needed to access the JMS queues (in your application
                    server configuration).</para>
                </entry>
              </row>
              <row>
                <entry><code>password</code></entry>
                <entry><code>java.lang.String</code></entry>
                <entry>
                  <para>This is the password needed to access the JMS queues (in your application
                    server configuration).</para>
                </entry>
              </row>
              <row>
                <entry><code>timeoutSeconds</code></entry>
                <entry><code>int</code></entry>
                <entry>
                  <para>This maximum number of seconds to wait when waiting for a response from
                    the server.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </para>
      </formalpara>
    </section>

  <!--section>
    <title>REST helper classe</title>
    
    <para>The <code>org.kie.services.client.api.RestRequestHelper</code> class can be used to... </para>
    
    <programlisting language="java">
      asdf
    </programlisting>
  </section-->
</section>
